
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.lang
import java.nio.file
import java.util
import java.util.concurrent
import jpype.protocol
import org.apache.tika.config
import org.apache.tika.pipes
import org.apache.tika.pipes.pipesiterator.filelist
import org.apache.tika.pipes.pipesiterator.fs
import typing



class CallablePipesIterator(java.util.concurrent.Callable[int]):
    @typing.overload
    def __init__(self, pipesIterator: 'PipesIterator', arrayBlockingQueue: java.util.concurrent.ArrayBlockingQueue[org.apache.tika.pipes.FetchEmitTuple]): ...
    @typing.overload
    def __init__(self, pipesIterator: 'PipesIterator', arrayBlockingQueue: java.util.concurrent.ArrayBlockingQueue[org.apache.tika.pipes.FetchEmitTuple], long: int): ...
    @typing.overload
    def __init__(self, pipesIterator: 'PipesIterator', arrayBlockingQueue: java.util.concurrent.ArrayBlockingQueue[org.apache.tika.pipes.FetchEmitTuple], long: int, int: int): ...
    def call(self) -> int: ...

class PipesIterator(org.apache.tika.config.ConfigBase, java.util.concurrent.Callable[int], java.lang.Iterable[org.apache.tika.pipes.FetchEmitTuple], org.apache.tika.config.Initializable):
    DEFAULT_MAX_WAIT_MS: typing.ClassVar[int] = ...
    DEFAULT_QUEUE_SIZE: typing.ClassVar[int] = ...
    COMPLETED_SEMAPHORE: typing.ClassVar[org.apache.tika.pipes.FetchEmitTuple] = ...
    def __init__(self): ...
    @staticmethod
    def build(path: typing.Union[java.nio.file.Path, jpype.protocol.SupportsPath]) -> 'PipesIterator': ...
    def call(self) -> int: ...
    def checkInitialization(self, initializableProblemHandler: typing.Union[org.apache.tika.config.InitializableProblemHandler, typing.Callable]) -> None: ...
    def getEmitterName(self) -> str: ...
    def getFetcherName(self) -> str: ...
    def getOnParseException(self) -> org.apache.tika.pipes.FetchEmitTuple.ON_PARSE_EXCEPTION: ...
    def initialize(self, map: typing.Union[java.util.Map[str, org.apache.tika.config.Param], typing.Mapping[str, org.apache.tika.config.Param]]) -> None: ...
    def iterator(self) -> java.util.Iterator[org.apache.tika.pipes.FetchEmitTuple]: ...
    def setEmitterName(self, string: str) -> None: ...
    def setFetcherName(self, string: str) -> None: ...
    def setHandlerType(self, string: str) -> None: ...
    def setMaxEmbeddedResources(self, int: int) -> None: ...
    def setMaxWaitMs(self, long: int) -> None: ...
    @typing.overload
    def setOnParseException(self, string: str) -> None: ...
    @typing.overload
    def setOnParseException(self, oN_PARSE_EXCEPTION: org.apache.tika.pipes.FetchEmitTuple.ON_PARSE_EXCEPTION) -> None: ...
    @typing.overload
    def setParseMode(self, string: str) -> None: ...
    @typing.overload
    def setParseMode(self, pARSE_MODE: org.apache.tika.pipes.HandlerConfig.PARSE_MODE) -> None: ...
    def setQueueSize(self, int: int) -> None: ...
    def setThrowOnWriteLimitReached(self, boolean: bool) -> None: ...
    def setWriteLimit(self, int: int) -> None: ...

class TotalCountResult:
    UNSUPPORTED: typing.ClassVar['TotalCountResult'] = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, long: int, sTATUS: 'TotalCountResult.STATUS'): ...
    def getStatus(self) -> 'TotalCountResult.STATUS': ...
    def getTotalCount(self) -> int: ...
    def toString(self) -> str: ...
    class STATUS(java.lang.Enum['TotalCountResult.STATUS']):
        UNSUPPORTED: typing.ClassVar['TotalCountResult.STATUS'] = ...
        EXCEPTION: typing.ClassVar['TotalCountResult.STATUS'] = ...
        NOT_COMPLETED: typing.ClassVar['TotalCountResult.STATUS'] = ...
        COMPLETED: typing.ClassVar['TotalCountResult.STATUS'] = ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'TotalCountResult.STATUS': ...
        @staticmethod
        def values() -> typing.MutableSequence['TotalCountResult.STATUS']: ...

class TotalCounter:
    def getTotalCount(self) -> TotalCountResult: ...
    def startTotalCount(self) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.apache.tika.pipes.pipesiterator")``.

    CallablePipesIterator: typing.Type[CallablePipesIterator]
    PipesIterator: typing.Type[PipesIterator]
    TotalCountResult: typing.Type[TotalCountResult]
    TotalCounter: typing.Type[TotalCounter]
    filelist: org.apache.tika.pipes.pipesiterator.filelist.__module_protocol__
    fs: org.apache.tika.pipes.pipesiterator.fs.__module_protocol__
