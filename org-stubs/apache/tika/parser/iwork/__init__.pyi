
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.io
import java.lang
import java.util
import org.apache.commons.compress.archivers.zip
import org.apache.tika.metadata
import org.apache.tika.mime
import org.apache.tika.parser
import org.apache.tika.parser.iwork.iwana
import org.xml.sax
import typing



class IWorkPackageParser(org.apache.tika.parser.Parser):
    IWORK_CONTENT_ENTRIES: typing.ClassVar[java.util.Set] = ...
    IWORK_COMMON_ENTRY: typing.ClassVar[str] = ...
    def __init__(self): ...
    def getSupportedTypes(self, parseContext: org.apache.tika.parser.ParseContext) -> java.util.Set[org.apache.tika.mime.MediaType]: ...
    def parse(self, inputStream: java.io.InputStream, contentHandler: org.xml.sax.ContentHandler, metadata: org.apache.tika.metadata.Metadata, parseContext: org.apache.tika.parser.ParseContext) -> None: ...
    class IWORKDocumentType(java.lang.Enum['IWorkPackageParser.IWORKDocumentType']):
        KEYNOTE: typing.ClassVar['IWorkPackageParser.IWORKDocumentType'] = ...
        NUMBERS: typing.ClassVar['IWorkPackageParser.IWORKDocumentType'] = ...
        PAGES: typing.ClassVar['IWorkPackageParser.IWORKDocumentType'] = ...
        ENCRYPTED: typing.ClassVar['IWorkPackageParser.IWORKDocumentType'] = ...
        @typing.overload
        @staticmethod
        def detectType(inputStream: java.io.InputStream) -> 'IWorkPackageParser.IWORKDocumentType': ...
        @typing.overload
        @staticmethod
        def detectType(zipArchiveEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry, zipArchiveInputStream: org.apache.commons.compress.archivers.zip.ZipArchiveInputStream) -> 'IWorkPackageParser.IWORKDocumentType': ...
        @typing.overload
        @staticmethod
        def detectType(zipArchiveEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry, zipFile: org.apache.commons.compress.archivers.zip.ZipFile) -> 'IWorkPackageParser.IWORKDocumentType': ...
        def getNamespace(self) -> str: ...
        def getPart(self) -> str: ...
        def getType(self) -> org.apache.tika.mime.MediaType: ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'IWorkPackageParser.IWORKDocumentType': ...
        @staticmethod
        def values() -> typing.MutableSequence['IWorkPackageParser.IWORKDocumentType']: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.apache.tika.parser.iwork")``.

    IWorkPackageParser: typing.Type[IWorkPackageParser]
    iwana: org.apache.tika.parser.iwork.iwana.__module_protocol__
