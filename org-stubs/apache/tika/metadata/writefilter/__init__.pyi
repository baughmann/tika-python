
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.io
import java.util
import jpype
import typing



class MetadataWriteFilter(java.io.Serializable):
    def add(self, string: str, string2: str, map: typing.Union[java.util.Map[str, typing.Union[typing.List[str], jpype.JArray]], typing.Mapping[str, typing.Union[typing.List[str], jpype.JArray]]]) -> None: ...
    def filterExisting(self, map: typing.Union[java.util.Map[str, typing.Union[typing.List[str], jpype.JArray]], typing.Mapping[str, typing.Union[typing.List[str], jpype.JArray]]]) -> None: ...
    def set(self, string: str, string2: str, map: typing.Union[java.util.Map[str, typing.Union[typing.List[str], jpype.JArray]], typing.Mapping[str, typing.Union[typing.List[str], jpype.JArray]]]) -> None: ...

class MetadataWriteFilterFactory:
    def newInstance(self) -> MetadataWriteFilter: ...

class StandardWriteFilter(MetadataWriteFilter, java.io.Serializable):
    ALWAYS_SET_FIELDS: typing.ClassVar[java.util.Set] = ...
    ALWAYS_ADD_FIELDS: typing.ClassVar[java.util.Set] = ...
    def add(self, string: str, string2: str, map: typing.Union[java.util.Map[str, typing.Union[typing.List[str], jpype.JArray]], typing.Mapping[str, typing.Union[typing.List[str], jpype.JArray]]]) -> None: ...
    def filterExisting(self, map: typing.Union[java.util.Map[str, typing.Union[typing.List[str], jpype.JArray]], typing.Mapping[str, typing.Union[typing.List[str], jpype.JArray]]]) -> None: ...
    def set(self, string: str, string2: str, map: typing.Union[java.util.Map[str, typing.Union[typing.List[str], jpype.JArray]], typing.Mapping[str, typing.Union[typing.List[str], jpype.JArray]]]) -> None: ...

class StandardWriteFilterFactory(MetadataWriteFilterFactory):
    DEFAULT_MAX_KEY_SIZE: typing.ClassVar[int] = ...
    DEFAULT_MAX_FIELD_SIZE: typing.ClassVar[int] = ...
    DEFAULT_TOTAL_ESTIMATED_BYTES: typing.ClassVar[int] = ...
    DEFAULT_MAX_VALUES_PER_FIELD: typing.ClassVar[int] = ...
    def __init__(self): ...
    def getIncludeFields(self) -> java.util.Set[str]: ...
    def getMaxFieldSize(self) -> int: ...
    def getMaxKeySize(self) -> int: ...
    def getMaxTotalEstimatedBytes(self) -> int: ...
    def getMaxValuesPerField(self) -> int: ...
    def isIncludeEmpty(self) -> bool: ...
    def newInstance(self) -> MetadataWriteFilter: ...
    def setIncludeEmpty(self, boolean: bool) -> None: ...
    def setIncludeFields(self, list: java.util.List[str]) -> None: ...
    def setMaxFieldSize(self, int: int) -> None: ...
    def setMaxKeySize(self, int: int) -> None: ...
    def setMaxTotalEstimatedBytes(self, int: int) -> None: ...
    def setMaxValuesPerField(self, int: int) -> None: ...
    def toString(self) -> str: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.apache.tika.metadata.writefilter")``.

    MetadataWriteFilter: typing.Type[MetadataWriteFilter]
    MetadataWriteFilterFactory: typing.Type[MetadataWriteFilterFactory]
    StandardWriteFilter: typing.Type[StandardWriteFilter]
    StandardWriteFilterFactory: typing.Type[StandardWriteFilterFactory]
