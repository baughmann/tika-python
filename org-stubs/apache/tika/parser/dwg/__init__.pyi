
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.io
import java.util
import org.apache.tika.config
import org.apache.tika.metadata
import org.apache.tika.mime
import org.apache.tika.parser
import org.xml.sax
import typing



class AbstractDWGParser(org.apache.tika.parser.Parser):
    def __init__(self): ...
    def configure(self, parseContext: org.apache.tika.parser.ParseContext) -> None: ...
    def getCleanDwgReadOutputBatchSize(self) -> int: ...
    def getCleanDwgReadRegexToReplace(self) -> str: ...
    def getCleanDwgReadReplaceWith(self) -> str: ...
    def getDwgReadExecutable(self) -> str: ...
    def getDwgReadTimeout(self) -> int: ...
    def isCleanDwgReadOutput(self) -> bool: ...
    def setCleanDwgReadOutput(self, boolean: bool) -> None: ...
    def setCleanDwgReadOutputBatchSize(self, int: int) -> None: ...
    def setCleanDwgReadRegexToReplace(self, string: str) -> None: ...
    def setCleanDwgReadReplaceWith(self, string: str) -> None: ...
    def setDwgReadExecutable(self, string: str) -> None: ...
    def setDwgReadTimeout(self, long: int) -> None: ...

class DWGParserConfig(java.io.Serializable):
    def __init__(self): ...
    def getCleanDwgReadOutputBatchSize(self) -> int: ...
    def getCleanDwgReadRegexToReplace(self) -> str: ...
    def getCleanDwgReadReplaceWith(self) -> str: ...
    def getDwgReadExecutable(self) -> str: ...
    def getDwgReadTimeout(self) -> int: ...
    def hasDwgRead(self) -> bool: ...
    def initialize(self, map: typing.Union[java.util.Map[str, org.apache.tika.config.Param], typing.Mapping[str, org.apache.tika.config.Param]]) -> None: ...
    def isCleanDwgReadOutput(self) -> bool: ...
    def setCleanDwgReadOutput(self, boolean: bool) -> None: ...
    def setCleanDwgReadOutputBatchSize(self, int: int) -> None: ...
    def setCleanDwgReadRegexToReplace(self, string: str) -> None: ...
    def setCleanDwgReadReplaceWith(self, string: str) -> None: ...
    def setDwgReadExecutable(self, string: str) -> None: ...
    def setDwgReadtimeout(self, long: int) -> None: ...

class DWGReadFormatRemover:
    def __init__(self): ...
    def cleanupDwgString(self, string: str) -> str: ...

class DWGParser(AbstractDWGParser):
    DWG_CUSTOM_META_PREFIX: typing.ClassVar[str] = ...
    def __init__(self): ...
    def getSupportedTypes(self, parseContext: org.apache.tika.parser.ParseContext) -> java.util.Set[org.apache.tika.mime.MediaType]: ...
    def parse(self, inputStream: java.io.InputStream, contentHandler: org.xml.sax.ContentHandler, metadata: org.apache.tika.metadata.Metadata, parseContext: org.apache.tika.parser.ParseContext) -> None: ...

class DWGReadParser(AbstractDWGParser):
    def __init__(self): ...
    def getSupportedTypes(self, parseContext: org.apache.tika.parser.ParseContext) -> java.util.Set[org.apache.tika.mime.MediaType]: ...
    def parse(self, inputStream: java.io.InputStream, contentHandler: org.xml.sax.ContentHandler, metadata: org.apache.tika.metadata.Metadata, parseContext: org.apache.tika.parser.ParseContext) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.apache.tika.parser.dwg")``.

    AbstractDWGParser: typing.Type[AbstractDWGParser]
    DWGParser: typing.Type[DWGParser]
    DWGParserConfig: typing.Type[DWGParserConfig]
    DWGReadFormatRemover: typing.Type[DWGReadFormatRemover]
    DWGReadParser: typing.Type[DWGReadParser]
