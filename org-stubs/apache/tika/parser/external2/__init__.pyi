
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.io
import java.util
import org.apache.tika.config
import org.apache.tika.metadata
import org.apache.tika.mime
import org.apache.tika.parser
import org.xml.sax
import typing



class ExternalParser(org.apache.tika.parser.Parser, org.apache.tika.config.Initializable):
    DEFAULT_TIMEOUT_MS: typing.ClassVar[int] = ...
    INPUT_FILE_TOKEN: typing.ClassVar[str] = ...
    OUTPUT_FILE_TOKEN: typing.ClassVar[str] = ...
    def __init__(self): ...
    def checkInitialization(self, initializableProblemHandler: typing.Union[org.apache.tika.config.InitializableProblemHandler, typing.Callable]) -> None: ...
    def getOutputParser(self) -> org.apache.tika.parser.Parser: ...
    def getSupportedTypes(self, parseContext: org.apache.tika.parser.ParseContext) -> java.util.Set[org.apache.tika.mime.MediaType]: ...
    def initialize(self, map: typing.Union[java.util.Map[str, org.apache.tika.config.Param], typing.Mapping[str, org.apache.tika.config.Param]]) -> None: ...
    def parse(self, inputStream: java.io.InputStream, contentHandler: org.xml.sax.ContentHandler, metadata: org.apache.tika.metadata.Metadata, parseContext: org.apache.tika.parser.ParseContext) -> None: ...
    def setCommandLine(self, list: java.util.List[str]) -> None: ...
    def setMaxStdErr(self, int: int) -> None: ...
    def setMaxStdOut(self, int: int) -> None: ...
    def setOutputParser(self, parser: org.apache.tika.parser.Parser) -> None: ...
    def setReturnStderr(self, boolean: bool) -> None: ...
    def setReturnStdout(self, boolean: bool) -> None: ...
    def setSupportedTypes(self, list: java.util.List[str]) -> None: ...
    def setTimeoutMs(self, long: int) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.apache.tika.parser.external2")``.

    ExternalParser: typing.Type[ExternalParser]
