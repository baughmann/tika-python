
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.io
import java.util
import org.apache.tika.metadata
import org.apache.tika.mime
import org.apache.tika.parser
import org.apache.tika.parser.xml
import org.apache.tika.sax
import org.xml.sax
import typing



class FlatOpenDocumentParser(org.apache.tika.parser.Parser):
    def __init__(self): ...
    def getSupportedTypes(self, parseContext: org.apache.tika.parser.ParseContext) -> java.util.Set[org.apache.tika.mime.MediaType]: ...
    def isExtractMacros(self) -> bool: ...
    def parse(self, inputStream: java.io.InputStream, contentHandler: org.xml.sax.ContentHandler, metadata: org.apache.tika.metadata.Metadata, parseContext: org.apache.tika.parser.ParseContext) -> None: ...
    def setExtractMacros(self, boolean: bool) -> None: ...

class NSNormalizerContentHandler(org.apache.tika.sax.ContentHandlerDecorator):
    def __init__(self, contentHandler: org.xml.sax.ContentHandler): ...
    def endElement(self, string: str, string2: str, string3: str) -> None: ...
    def resolveEntity(self, string: str, string2: str) -> org.xml.sax.InputSource: ...
    def startElement(self, string: str, string2: str, string3: str, attributes: org.xml.sax.Attributes) -> None: ...
    def startPrefixMapping(self, string: str, string2: str) -> None: ...

class OpenDocumentContentParser(org.apache.tika.parser.Parser):
    def __init__(self): ...
    def getSupportedTypes(self, parseContext: org.apache.tika.parser.ParseContext) -> java.util.Set[org.apache.tika.mime.MediaType]: ...
    def parse(self, inputStream: java.io.InputStream, contentHandler: org.xml.sax.ContentHandler, metadata: org.apache.tika.metadata.Metadata, parseContext: org.apache.tika.parser.ParseContext) -> None: ...

class OpenDocumentMetaParser(org.apache.tika.parser.xml.XMLParser):
    ODF_VERSION_KEY: typing.ClassVar[str] = ...
    def __init__(self): ...
    def parse(self, inputStream: java.io.InputStream, contentHandler: org.xml.sax.ContentHandler, metadata: org.apache.tika.metadata.Metadata, parseContext: org.apache.tika.parser.ParseContext) -> None: ...

class OpenDocumentParser(org.apache.tika.parser.Parser):
    def __init__(self): ...
    def getContentParser(self) -> org.apache.tika.parser.Parser: ...
    def getMetaParser(self) -> org.apache.tika.parser.Parser: ...
    def getSupportedTypes(self, parseContext: org.apache.tika.parser.ParseContext) -> java.util.Set[org.apache.tika.mime.MediaType]: ...
    def isExtractMacros(self) -> bool: ...
    def parse(self, inputStream: java.io.InputStream, contentHandler: org.xml.sax.ContentHandler, metadata: org.apache.tika.metadata.Metadata, parseContext: org.apache.tika.parser.ParseContext) -> None: ...
    def setContentParser(self, parser: org.apache.tika.parser.Parser) -> None: ...
    def setExtractMacros(self, boolean: bool) -> None: ...
    def setMetaParser(self, parser: org.apache.tika.parser.Parser) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.apache.tika.parser.odf")``.

    FlatOpenDocumentParser: typing.Type[FlatOpenDocumentParser]
    NSNormalizerContentHandler: typing.Type[NSNormalizerContentHandler]
    OpenDocumentContentParser: typing.Type[OpenDocumentContentParser]
    OpenDocumentMetaParser: typing.Type[OpenDocumentMetaParser]
    OpenDocumentParser: typing.Type[OpenDocumentParser]
