
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import jpype
import org.apache.tika.sax
import org.xml.sax
import typing



class Matcher:
    FAIL: typing.ClassVar['Matcher'] = ...
    def __init__(self): ...
    def descend(self, string: str, string2: str) -> 'Matcher': ...
    def matchesAttribute(self, string: str, string2: str) -> bool: ...
    def matchesElement(self) -> bool: ...
    def matchesText(self) -> bool: ...

class MatchingContentHandler(org.apache.tika.sax.ContentHandlerDecorator):
    def __init__(self, contentHandler: org.xml.sax.ContentHandler, matcher: Matcher): ...
    def characters(self, charArray: typing.Union[typing.List[str], jpype.JArray], int: int, int2: int) -> None: ...
    def endElement(self, string: str, string2: str, string3: str) -> None: ...
    def ignorableWhitespace(self, charArray: typing.Union[typing.List[str], jpype.JArray], int: int, int2: int) -> None: ...
    def processingInstruction(self, string: str, string2: str) -> None: ...
    def skippedEntity(self, string: str) -> None: ...
    def startElement(self, string: str, string2: str, string3: str, attributes: org.xml.sax.Attributes) -> None: ...

class XPathParser:
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, string: str, string2: str): ...
    def addPrefix(self, string: str, string2: str) -> None: ...
    def parse(self, string: str) -> Matcher: ...

class AttributeMatcher(Matcher):
    INSTANCE: typing.ClassVar[Matcher] = ...
    def __init__(self): ...
    def matchesAttribute(self, string: str, string2: str) -> bool: ...

class ChildMatcher(Matcher):
    def __init__(self, matcher: Matcher): ...
    def descend(self, string: str, string2: str) -> Matcher: ...

class CompositeMatcher(Matcher):
    def __init__(self, matcher: Matcher, matcher2: Matcher): ...
    def descend(self, string: str, string2: str) -> Matcher: ...
    def matchesAttribute(self, string: str, string2: str) -> bool: ...
    def matchesElement(self) -> bool: ...
    def matchesText(self) -> bool: ...

class ElementMatcher(Matcher):
    INSTANCE: typing.ClassVar[Matcher] = ...
    def __init__(self): ...
    def matchesElement(self) -> bool: ...

class NamedAttributeMatcher(Matcher):
    def __init__(self, string: str, string2: str): ...
    def matchesAttribute(self, string: str, string2: str) -> bool: ...

class NodeMatcher(Matcher):
    INSTANCE: typing.ClassVar[Matcher] = ...
    def __init__(self): ...
    def matchesAttribute(self, string: str, string2: str) -> bool: ...
    def matchesElement(self) -> bool: ...
    def matchesText(self) -> bool: ...

class SubtreeMatcher(Matcher):
    def __init__(self, matcher: Matcher): ...
    def descend(self, string: str, string2: str) -> Matcher: ...
    def matchesAttribute(self, string: str, string2: str) -> bool: ...
    def matchesElement(self) -> bool: ...
    def matchesText(self) -> bool: ...

class TextMatcher(Matcher):
    INSTANCE: typing.ClassVar[Matcher] = ...
    def __init__(self): ...
    def matchesText(self) -> bool: ...

class NamedElementMatcher(ChildMatcher):
    def descend(self, string: str, string2: str) -> Matcher: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.apache.tika.sax.xpath")``.

    AttributeMatcher: typing.Type[AttributeMatcher]
    ChildMatcher: typing.Type[ChildMatcher]
    CompositeMatcher: typing.Type[CompositeMatcher]
    ElementMatcher: typing.Type[ElementMatcher]
    Matcher: typing.Type[Matcher]
    MatchingContentHandler: typing.Type[MatchingContentHandler]
    NamedAttributeMatcher: typing.Type[NamedAttributeMatcher]
    NamedElementMatcher: typing.Type[NamedElementMatcher]
    NodeMatcher: typing.Type[NodeMatcher]
    SubtreeMatcher: typing.Type[SubtreeMatcher]
    TextMatcher: typing.Type[TextMatcher]
    XPathParser: typing.Type[XPathParser]
