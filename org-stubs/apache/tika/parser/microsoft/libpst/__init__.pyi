
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.io
import java.nio.file
import java.nio.file.attribute
import java.util
import jpype.protocol
import org.apache.tika.config
import org.apache.tika.metadata
import org.apache.tika.mime
import org.apache.tika.parser
import org.apache.tika.sax
import org.xml.sax
import typing



class EmailVisitor(java.nio.file.FileVisitor[java.nio.file.Path]):
    def __init__(self, path: typing.Union[java.nio.file.Path, jpype.protocol.SupportsPath], boolean: bool, xHTMLContentHandler: org.apache.tika.sax.XHTMLContentHandler, metadata: org.apache.tika.metadata.Metadata, parseContext: org.apache.tika.parser.ParseContext): ...
    def postVisitDirectory(self, path: typing.Union[java.nio.file.Path, jpype.protocol.SupportsPath], iOException: java.io.IOException) -> java.nio.file.FileVisitResult: ...
    def preVisitDirectory(self, path: typing.Union[java.nio.file.Path, jpype.protocol.SupportsPath], basicFileAttributes: java.nio.file.attribute.BasicFileAttributes) -> java.nio.file.FileVisitResult: ...
    def visitFile(self, path: typing.Union[java.nio.file.Path, jpype.protocol.SupportsPath], basicFileAttributes: java.nio.file.attribute.BasicFileAttributes) -> java.nio.file.FileVisitResult: ...
    def visitFileFailed(self, path: typing.Union[java.nio.file.Path, jpype.protocol.SupportsPath], iOException: java.io.IOException) -> java.nio.file.FileVisitResult: ...

class LibPstParser(org.apache.tika.parser.Parser, org.apache.tika.config.Initializable):
    MS_OUTLOOK_PST_MIMETYPE: typing.ClassVar[org.apache.tika.mime.MediaType] = ...
    def __init__(self): ...
    def checkInitialization(self, initializableProblemHandler: typing.Union[org.apache.tika.config.InitializableProblemHandler, typing.Callable]) -> None: ...
    @staticmethod
    def checkQuietly() -> bool: ...
    def getSupportedTypes(self, parseContext: org.apache.tika.parser.ParseContext) -> java.util.Set[org.apache.tika.mime.MediaType]: ...
    def initialize(self, map: typing.Union[java.util.Map[str, org.apache.tika.config.Param], typing.Mapping[str, org.apache.tika.config.Param]]) -> None: ...
    def parse(self, inputStream: java.io.InputStream, contentHandler: org.xml.sax.ContentHandler, metadata: org.apache.tika.metadata.Metadata, parseContext: org.apache.tika.parser.ParseContext) -> None: ...
    def setIncludeDeleted(self, boolean: bool) -> None: ...
    def setMaxEmails(self, int: int) -> None: ...
    def setProcessEmailAsMsg(self, boolean: bool) -> None: ...
    def setTimeoutSeconds(self, long: int) -> None: ...

class LibPstParserConfig:
    def __init__(self): ...
    def getMaxEmails(self) -> int: ...
    def getTimeoutSeconds(self) -> int: ...
    def isDebug(self) -> bool: ...
    def isIncludeDeleted(self) -> bool: ...
    def isProcessEmailAsMsg(self) -> bool: ...
    def setDebug(self, boolean: bool) -> None: ...
    def setIncludeDeleted(self, boolean: bool) -> None: ...
    def setMaxEmails(self, int: int) -> None: ...
    def setProcessEmailAsMsg(self, boolean: bool) -> None: ...
    def setTimeoutSeconds(self, long: int) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.apache.tika.parser.microsoft.libpst")``.

    EmailVisitor: typing.Type[EmailVisitor]
    LibPstParser: typing.Type[LibPstParser]
    LibPstParserConfig: typing.Type[LibPstParserConfig]
