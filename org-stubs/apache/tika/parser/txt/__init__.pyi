
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.io
import java.lang
import java.nio.charset
import java.util
import jpype
import org.apache.tika.detect
import org.apache.tika.metadata
import org.apache.tika.mime
import org.apache.tika.parser
import org.xml.sax
import typing



class BOMDetector(org.apache.tika.detect.EncodingDetector):
    def __init__(self): ...
    def detect(self, inputStream: java.io.InputStream, metadata: org.apache.tika.metadata.Metadata) -> java.nio.charset.Charset: ...

class CharsetDetector:
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, int: int): ...
    def detect(self) -> 'CharsetMatch': ...
    def detectAll(self) -> typing.MutableSequence['CharsetMatch']: ...
    def enableInputFilter(self, boolean: bool) -> bool: ...
    @staticmethod
    def getAllDetectableCharsets() -> typing.MutableSequence[str]: ...
    def getDetectableCharsets(self) -> typing.MutableSequence[str]: ...
    def getReader(self, inputStream: java.io.InputStream, string: str) -> java.io.Reader: ...
    def getString(self, byteArray: typing.Union[typing.List[int], jpype.JArray, bytes], string: str) -> str: ...
    def inputFilterEnabled(self) -> bool: ...
    def setDeclaredEncoding(self, string: str) -> 'CharsetDetector': ...
    def setDetectableCharset(self, string: str, boolean: bool) -> 'CharsetDetector': ...
    @typing.overload
    def setText(self, byteArray: typing.Union[typing.List[int], jpype.JArray, bytes]) -> 'CharsetDetector': ...
    @typing.overload
    def setText(self, inputStream: java.io.InputStream) -> 'CharsetDetector': ...

class CharsetMatch(java.lang.Comparable['CharsetMatch']):
    def compareTo(self, charsetMatch: 'CharsetMatch') -> int: ...
    def equals(self, object: typing.Any) -> bool: ...
    def getConfidence(self) -> int: ...
    def getLanguage(self) -> str: ...
    def getName(self) -> str: ...
    def getNormalizedName(self) -> str: ...
    def getReader(self) -> java.io.Reader: ...
    @typing.overload
    def getString(self) -> str: ...
    @typing.overload
    def getString(self, int: int) -> str: ...
    def hashCode(self) -> int: ...
    def toString(self) -> str: ...

class Icu4jEncodingDetector(org.apache.tika.detect.EncodingDetector):
    def __init__(self): ...
    def detect(self, inputStream: java.io.InputStream, metadata: org.apache.tika.metadata.Metadata) -> java.nio.charset.Charset: ...
    def getIgnoreCharsets(self) -> java.util.List[str]: ...
    def getMarkLimit(self) -> int: ...
    def getMarkLimt(self) -> int: ...
    def isStripMarkup(self) -> bool: ...
    def setIgnoreCharsets(self, list: java.util.List[str]) -> None: ...
    def setMarkLimit(self, int: int) -> None: ...
    def setStripMarkup(self, boolean: bool) -> None: ...

class TXTParser(org.apache.tika.parser.AbstractEncodingDetectorParser):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, encodingDetector: typing.Union[org.apache.tika.detect.EncodingDetector, typing.Callable]): ...
    def getSupportedTypes(self, parseContext: org.apache.tika.parser.ParseContext) -> java.util.Set[org.apache.tika.mime.MediaType]: ...
    def parse(self, inputStream: java.io.InputStream, contentHandler: org.xml.sax.ContentHandler, metadata: org.apache.tika.metadata.Metadata, parseContext: org.apache.tika.parser.ParseContext) -> None: ...

class UniversalEncodingDetector(org.apache.tika.detect.EncodingDetector):
    def __init__(self): ...
    def detect(self, inputStream: java.io.InputStream, metadata: org.apache.tika.metadata.Metadata) -> java.nio.charset.Charset: ...
    def getMarkLimit(self) -> int: ...
    def setMarkLimit(self, int: int) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.apache.tika.parser.txt")``.

    BOMDetector: typing.Type[BOMDetector]
    CharsetDetector: typing.Type[CharsetDetector]
    CharsetMatch: typing.Type[CharsetMatch]
    Icu4jEncodingDetector: typing.Type[Icu4jEncodingDetector]
    TXTParser: typing.Type[TXTParser]
    UniversalEncodingDetector: typing.Type[UniversalEncodingDetector]
