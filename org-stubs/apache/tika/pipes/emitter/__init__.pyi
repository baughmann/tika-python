
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.io
import java.lang
import java.nio.file
import java.util
import jpype.protocol
import org.apache.tika.config
import org.apache.tika.exception
import org.apache.tika.metadata
import org.apache.tika.parser
import org.apache.tika.pipes.emitter.fs
import typing



class EmitData(java.io.Serializable):
    @typing.overload
    def __init__(self, emitKey: 'EmitKey', list: java.util.List[org.apache.tika.metadata.Metadata]): ...
    @typing.overload
    def __init__(self, emitKey: 'EmitKey', list: java.util.List[org.apache.tika.metadata.Metadata], string: str): ...
    @typing.overload
    def __init__(self, emitKey: 'EmitKey', list: java.util.List[org.apache.tika.metadata.Metadata], string: str, parseContext: org.apache.tika.parser.ParseContext): ...
    def getContainerStackTrace(self) -> str: ...
    def getEmitKey(self) -> 'EmitKey': ...
    def getEstimatedSizeBytes(self) -> int: ...
    def getMetadataList(self) -> java.util.List[org.apache.tika.metadata.Metadata]: ...
    def getParseContext(self) -> org.apache.tika.parser.ParseContext: ...
    def setParseContext(self, parseContext: org.apache.tika.parser.ParseContext) -> None: ...
    def toString(self) -> str: ...

class EmitKey(java.io.Serializable):
    NO_EMIT: typing.ClassVar['EmitKey'] = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, string: str, string2: str): ...
    def equals(self, object: typing.Any) -> bool: ...
    def getEmitKey(self) -> str: ...
    def getEmitterName(self) -> str: ...
    def hashCode(self) -> int: ...
    def toString(self) -> str: ...

class Emitter:
    @typing.overload
    def emit(self, string: str, list: java.util.List[org.apache.tika.metadata.Metadata], parseContext: org.apache.tika.parser.ParseContext) -> None: ...
    @typing.overload
    def emit(self, list: java.util.List[EmitData]) -> None: ...
    def getName(self) -> str: ...

class EmitterManager(org.apache.tika.config.ConfigBase):
    def __init__(self, list: java.util.List[Emitter]): ...
    @typing.overload
    def getEmitter(self) -> Emitter: ...
    @typing.overload
    def getEmitter(self, string: str) -> Emitter: ...
    def getSupported(self) -> java.util.Set[str]: ...
    @staticmethod
    def load(path: typing.Union[java.nio.file.Path, jpype.protocol.SupportsPath]) -> 'EmitterManager': ...

class TikaEmitterException(org.apache.tika.exception.TikaException):
    @typing.overload
    def __init__(self, string: str): ...
    @typing.overload
    def __init__(self, string: str, throwable: java.lang.Throwable): ...

class AbstractEmitter(Emitter):
    def __init__(self): ...
    @typing.overload
    def emit(self, string: str, list: java.util.List[org.apache.tika.metadata.Metadata], parseContext: org.apache.tika.parser.ParseContext) -> None: ...
    @typing.overload
    def emit(self, list: java.util.List[EmitData]) -> None: ...
    def getName(self) -> str: ...
    def setName(self, string: str) -> None: ...

class EmptyEmitter(Emitter):
    def __init__(self): ...
    @typing.overload
    def emit(self, string: str, list: java.util.List[org.apache.tika.metadata.Metadata], parseContext: org.apache.tika.parser.ParseContext) -> None: ...
    @typing.overload
    def emit(self, list: java.util.List[EmitData]) -> None: ...
    def getName(self) -> str: ...

class StreamEmitter(Emitter):
    @typing.overload
    def emit(self, string: str, list: java.util.List[org.apache.tika.metadata.Metadata], parseContext: org.apache.tika.parser.ParseContext) -> None: ...
    @typing.overload
    def emit(self, list: java.util.List[EmitData]) -> None: ...
    @typing.overload
    def emit(self, string: str, inputStream: java.io.InputStream, metadata: org.apache.tika.metadata.Metadata, parseContext: org.apache.tika.parser.ParseContext) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.apache.tika.pipes.emitter")``.

    AbstractEmitter: typing.Type[AbstractEmitter]
    EmitData: typing.Type[EmitData]
    EmitKey: typing.Type[EmitKey]
    Emitter: typing.Type[Emitter]
    EmitterManager: typing.Type[EmitterManager]
    EmptyEmitter: typing.Type[EmptyEmitter]
    StreamEmitter: typing.Type[StreamEmitter]
    TikaEmitterException: typing.Type[TikaEmitterException]
    fs: org.apache.tika.pipes.emitter.fs.__module_protocol__
