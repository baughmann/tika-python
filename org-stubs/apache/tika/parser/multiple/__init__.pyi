
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.io
import java.lang
import java.util
import org.apache.tika.config
import org.apache.tika.metadata
import org.apache.tika.mime
import org.apache.tika.parser
import org.apache.tika.sax
import org.xml.sax
import typing



class AbstractMultipleParser(org.apache.tika.parser.Parser):
    @typing.overload
    def __init__(self, mediaTypeRegistry: org.apache.tika.mime.MediaTypeRegistry, collection: typing.Union[java.util.Collection[org.apache.tika.parser.Parser], typing.Sequence[org.apache.tika.parser.Parser], typing.Set[org.apache.tika.parser.Parser]], map: typing.Union[java.util.Map[str, org.apache.tika.config.Param], typing.Mapping[str, org.apache.tika.config.Param]]): ...
    @typing.overload
    def __init__(self, mediaTypeRegistry: org.apache.tika.mime.MediaTypeRegistry, metadataPolicy: 'AbstractMultipleParser.MetadataPolicy', collection: typing.Union[java.util.Collection[org.apache.tika.parser.Parser], typing.Sequence[org.apache.tika.parser.Parser], typing.Set[org.apache.tika.parser.Parser]]): ...
    @typing.overload
    def __init__(self, mediaTypeRegistry: org.apache.tika.mime.MediaTypeRegistry, metadataPolicy: 'AbstractMultipleParser.MetadataPolicy', *parser: org.apache.tika.parser.Parser): ...
    def getAllParsers(self) -> java.util.List[org.apache.tika.parser.Parser]: ...
    def getMediaTypeRegistry(self) -> org.apache.tika.mime.MediaTypeRegistry: ...
    def getMetadataPolicy(self) -> 'AbstractMultipleParser.MetadataPolicy': ...
    def getSupportedTypes(self, parseContext: org.apache.tika.parser.ParseContext) -> java.util.Set[org.apache.tika.mime.MediaType]: ...
    @typing.overload
    def parse(self, inputStream: java.io.InputStream, contentHandlerFactory: org.apache.tika.sax.ContentHandlerFactory, metadata: org.apache.tika.metadata.Metadata, parseContext: org.apache.tika.parser.ParseContext) -> None: ...
    @typing.overload
    def parse(self, inputStream: java.io.InputStream, contentHandler: org.xml.sax.ContentHandler, metadata: org.apache.tika.metadata.Metadata, parseContext: org.apache.tika.parser.ParseContext) -> None: ...
    def setMediaTypeRegistry(self, mediaTypeRegistry: org.apache.tika.mime.MediaTypeRegistry) -> None: ...
    class MetadataPolicy(java.lang.Enum['AbstractMultipleParser.MetadataPolicy']):
        DISCARD_ALL: typing.ClassVar['AbstractMultipleParser.MetadataPolicy'] = ...
        FIRST_WINS: typing.ClassVar['AbstractMultipleParser.MetadataPolicy'] = ...
        LAST_WINS: typing.ClassVar['AbstractMultipleParser.MetadataPolicy'] = ...
        KEEP_ALL: typing.ClassVar['AbstractMultipleParser.MetadataPolicy'] = ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'AbstractMultipleParser.MetadataPolicy': ...
        @staticmethod
        def values() -> typing.MutableSequence['AbstractMultipleParser.MetadataPolicy']: ...

class FallbackParser(AbstractMultipleParser):
    allowedPolicies: typing.ClassVar[java.util.List] = ...
    @typing.overload
    def __init__(self, mediaTypeRegistry: org.apache.tika.mime.MediaTypeRegistry, collection: typing.Union[java.util.Collection[org.apache.tika.parser.Parser], typing.Sequence[org.apache.tika.parser.Parser], typing.Set[org.apache.tika.parser.Parser]], map: typing.Union[java.util.Map[str, org.apache.tika.config.Param], typing.Mapping[str, org.apache.tika.config.Param]]): ...
    @typing.overload
    def __init__(self, mediaTypeRegistry: org.apache.tika.mime.MediaTypeRegistry, metadataPolicy: AbstractMultipleParser.MetadataPolicy, collection: typing.Union[java.util.Collection[org.apache.tika.parser.Parser], typing.Sequence[org.apache.tika.parser.Parser], typing.Set[org.apache.tika.parser.Parser]]): ...
    @typing.overload
    def __init__(self, mediaTypeRegistry: org.apache.tika.mime.MediaTypeRegistry, metadataPolicy: AbstractMultipleParser.MetadataPolicy, *parser: org.apache.tika.parser.Parser): ...

class SupplementingParser(AbstractMultipleParser):
    allowedPolicies: typing.ClassVar[java.util.List] = ...
    @typing.overload
    def __init__(self, mediaTypeRegistry: org.apache.tika.mime.MediaTypeRegistry, collection: typing.Union[java.util.Collection[org.apache.tika.parser.Parser], typing.Sequence[org.apache.tika.parser.Parser], typing.Set[org.apache.tika.parser.Parser]], map: typing.Union[java.util.Map[str, org.apache.tika.config.Param], typing.Mapping[str, org.apache.tika.config.Param]]): ...
    @typing.overload
    def __init__(self, mediaTypeRegistry: org.apache.tika.mime.MediaTypeRegistry, metadataPolicy: AbstractMultipleParser.MetadataPolicy, collection: typing.Union[java.util.Collection[org.apache.tika.parser.Parser], typing.Sequence[org.apache.tika.parser.Parser], typing.Set[org.apache.tika.parser.Parser]]): ...
    @typing.overload
    def __init__(self, mediaTypeRegistry: org.apache.tika.mime.MediaTypeRegistry, metadataPolicy: AbstractMultipleParser.MetadataPolicy, *parser: org.apache.tika.parser.Parser): ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.apache.tika.parser.multiple")``.

    AbstractMultipleParser: typing.Type[AbstractMultipleParser]
    FallbackParser: typing.Type[FallbackParser]
    SupplementingParser: typing.Type[SupplementingParser]
