
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.io
import java.lang
import java.net
import java.nio.charset
import java.util
import jpype
import jpype.protocol
import org.apache.tika.detect
import org.apache.tika.exception
import org.apache.tika.metadata
import org.w3c.dom
import org.xml.sax
import org.xml.sax.helpers
import typing



class HexCoDec:
    def __init__(self): ...
    @typing.overload
    @staticmethod
    def decode(charArray: typing.Union[typing.List[str], jpype.JArray]) -> typing.MutableSequence[int]: ...
    @typing.overload
    @staticmethod
    def decode(charArray: typing.Union[typing.List[str], jpype.JArray], int: int, int2: int) -> typing.MutableSequence[int]: ...
    @typing.overload
    @staticmethod
    def decode(string: str) -> typing.MutableSequence[int]: ...
    @typing.overload
    @staticmethod
    def encode(byteArray: typing.Union[typing.List[int], jpype.JArray, bytes]) -> typing.MutableSequence[str]: ...
    @typing.overload
    @staticmethod
    def encode(byteArray: typing.Union[typing.List[int], jpype.JArray, bytes], int: int, int2: int) -> typing.MutableSequence[str]: ...

class MediaType(java.lang.Comparable['MediaType'], java.io.Serializable):
    OCTET_STREAM: typing.ClassVar['MediaType'] = ...
    EMPTY: typing.ClassVar['MediaType'] = ...
    TEXT_PLAIN: typing.ClassVar['MediaType'] = ...
    TEXT_HTML: typing.ClassVar['MediaType'] = ...
    APPLICATION_XML: typing.ClassVar['MediaType'] = ...
    APPLICATION_ZIP: typing.ClassVar['MediaType'] = ...
    @typing.overload
    def __init__(self, string: str, string2: str): ...
    @typing.overload
    def __init__(self, string: str, string2: str, map: typing.Union[java.util.Map[str, str], typing.Mapping[str, str]]): ...
    @typing.overload
    def __init__(self, mediaType: 'MediaType', string: str, string2: str): ...
    @typing.overload
    def __init__(self, mediaType: 'MediaType', charset: java.nio.charset.Charset): ...
    @typing.overload
    def __init__(self, mediaType: 'MediaType', map: typing.Union[java.util.Map[str, str], typing.Mapping[str, str]]): ...
    @staticmethod
    def application(string: str) -> 'MediaType': ...
    @staticmethod
    def audio(string: str) -> 'MediaType': ...
    def compareTo(self, mediaType: 'MediaType') -> int: ...
    def equals(self, object: typing.Any) -> bool: ...
    def getBaseType(self) -> 'MediaType': ...
    def getParameters(self) -> java.util.Map[str, str]: ...
    def getSubtype(self) -> str: ...
    def getType(self) -> str: ...
    def hasParameters(self) -> bool: ...
    def hashCode(self) -> int: ...
    @staticmethod
    def image(string: str) -> 'MediaType': ...
    @staticmethod
    def parse(string: str) -> 'MediaType': ...
    @typing.overload
    @staticmethod
    def set(*string: str) -> java.util.Set['MediaType']: ...
    @typing.overload
    @staticmethod
    def set(*mediaType: 'MediaType') -> java.util.Set['MediaType']: ...
    @staticmethod
    def text(string: str) -> 'MediaType': ...
    def toString(self) -> str: ...
    @staticmethod
    def video(string: str) -> 'MediaType': ...

class MediaTypeRegistry(java.io.Serializable):
    def __init__(self): ...
    def addAlias(self, mediaType: MediaType, mediaType2: MediaType) -> None: ...
    def addSuperType(self, mediaType: MediaType, mediaType2: MediaType) -> None: ...
    def addType(self, mediaType: MediaType) -> None: ...
    def getAliases(self, mediaType: MediaType) -> java.util.SortedSet[MediaType]: ...
    def getChildTypes(self, mediaType: MediaType) -> java.util.SortedSet[MediaType]: ...
    @staticmethod
    def getDefaultRegistry() -> 'MediaTypeRegistry': ...
    def getSupertype(self, mediaType: MediaType) -> MediaType: ...
    def getTypes(self) -> java.util.SortedSet[MediaType]: ...
    @typing.overload
    def isInstanceOf(self, string: str, mediaType: MediaType) -> bool: ...
    @typing.overload
    def isInstanceOf(self, mediaType: MediaType, mediaType2: MediaType) -> bool: ...
    def isSpecializationOf(self, mediaType: MediaType, mediaType2: MediaType) -> bool: ...
    def normalize(self, mediaType: MediaType) -> MediaType: ...

class MimeType(java.lang.Comparable['MimeType'], java.io.Serializable):
    def compareTo(self, mimeType: 'MimeType') -> int: ...
    def equals(self, object: typing.Any) -> bool: ...
    def getAcronym(self) -> str: ...
    def getDescription(self) -> str: ...
    def getExtension(self) -> str: ...
    def getExtensions(self) -> java.util.List[str]: ...
    def getLinks(self) -> java.util.List[java.net.URI]: ...
    def getName(self) -> str: ...
    def getType(self) -> MediaType: ...
    def getUniformTypeIdentifier(self) -> str: ...
    def hasMagic(self) -> bool: ...
    def hashCode(self) -> int: ...
    @staticmethod
    def isValid(string: str) -> bool: ...
    def matches(self, byteArray: typing.Union[typing.List[int], jpype.JArray, bytes]) -> bool: ...
    def matchesMagic(self, byteArray: typing.Union[typing.List[int], jpype.JArray, bytes]) -> bool: ...
    def setDescription(self, string: str) -> None: ...
    def toString(self) -> str: ...

class MimeTypeException(org.apache.tika.exception.TikaException):
    @typing.overload
    def __init__(self, string: str): ...
    @typing.overload
    def __init__(self, string: str, throwable: java.lang.Throwable): ...

class MimeTypes(org.apache.tika.detect.Detector, java.io.Serializable):
    OCTET_STREAM: typing.ClassVar[str] = ...
    PLAIN_TEXT: typing.ClassVar[str] = ...
    XML: typing.ClassVar[str] = ...
    def __init__(self): ...
    @typing.overload
    def addPattern(self, mimeType: MimeType, string: str) -> None: ...
    @typing.overload
    def addPattern(self, mimeType: MimeType, string: str, boolean: bool) -> None: ...
    def detect(self, inputStream: java.io.InputStream, metadata: org.apache.tika.metadata.Metadata) -> MediaType: ...
    def forName(self, string: str) -> MimeType: ...
    @typing.overload
    @staticmethod
    def getDefaultMimeTypes() -> 'MimeTypes': ...
    @typing.overload
    @staticmethod
    def getDefaultMimeTypes(classLoader: java.lang.ClassLoader) -> 'MimeTypes': ...
    def getMediaTypeRegistry(self) -> MediaTypeRegistry: ...
    @typing.overload
    def getMimeType(self, file: typing.Union[java.io.File, jpype.protocol.SupportsPath]) -> MimeType: ...
    @typing.overload
    def getMimeType(self, string: str) -> MimeType: ...
    def getMinLength(self) -> int: ...
    def getRegisteredMimeType(self, string: str) -> MimeType: ...
    def setSuperType(self, mimeType: MimeType, mediaType: MediaType) -> None: ...

class MimeTypesFactory:
    CUSTOM_MIMES_SYS_PROP: typing.ClassVar[str] = ...
    def __init__(self): ...
    @typing.overload
    @staticmethod
    def create() -> MimeTypes: ...
    @typing.overload
    @staticmethod
    def create(inputStream: java.io.InputStream) -> MimeTypes: ...
    @typing.overload
    @staticmethod
    def create(*inputStream: java.io.InputStream) -> MimeTypes: ...
    @typing.overload
    @staticmethod
    def create(string: str) -> MimeTypes: ...
    @typing.overload
    @staticmethod
    def create(string: str, string2: str) -> MimeTypes: ...
    @typing.overload
    @staticmethod
    def create(string: str, string2: str, classLoader: java.lang.ClassLoader) -> MimeTypes: ...
    @typing.overload
    @staticmethod
    def create(uRL: java.net.URL) -> MimeTypes: ...
    @typing.overload
    @staticmethod
    def create(*uRL: java.net.URL) -> MimeTypes: ...
    @typing.overload
    @staticmethod
    def create(document: org.w3c.dom.Document) -> MimeTypes: ...

class MimeTypesReaderMetKeys:
    MIME_INFO_TAG: typing.ClassVar[str] = ...
    MIME_TYPE_TAG: typing.ClassVar[str] = ...
    MIME_TYPE_TYPE_ATTR: typing.ClassVar[str] = ...
    INTERPRETED_ATTR: typing.ClassVar[str] = ...
    ACRONYM_TAG: typing.ClassVar[str] = ...
    COMMENT_TAG: typing.ClassVar[str] = ...
    GLOB_TAG: typing.ClassVar[str] = ...
    ISREGEX_ATTR: typing.ClassVar[str] = ...
    PATTERN_ATTR: typing.ClassVar[str] = ...
    MAGIC_TAG: typing.ClassVar[str] = ...
    ALIAS_TAG: typing.ClassVar[str] = ...
    ALIAS_TYPE_ATTR: typing.ClassVar[str] = ...
    ROOT_XML_TAG: typing.ClassVar[str] = ...
    SUB_CLASS_OF_TAG: typing.ClassVar[str] = ...
    SUB_CLASS_TYPE_ATTR: typing.ClassVar[str] = ...
    MAGIC_PRIORITY_ATTR: typing.ClassVar[str] = ...
    MATCH_TAG: typing.ClassVar[str] = ...
    MATCH_OFFSET_ATTR: typing.ClassVar[str] = ...
    MATCH_TYPE_ATTR: typing.ClassVar[str] = ...
    MATCH_VALUE_ATTR: typing.ClassVar[str] = ...
    MATCH_MASK_ATTR: typing.ClassVar[str] = ...
    MATCH_MINSHOULDMATCH_ATTR: typing.ClassVar[str] = ...
    NS_URI_ATTR: typing.ClassVar[str] = ...
    LOCAL_NAME_ATTR: typing.ClassVar[str] = ...
    TIKA_LINK_TAG: typing.ClassVar[str] = ...
    TIKA_UTI_TAG: typing.ClassVar[str] = ...

class ProbabilisticMimeDetectionSelector(org.apache.tika.detect.Detector):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, mimeTypes: MimeTypes): ...
    @typing.overload
    def __init__(self, mimeTypes: MimeTypes, builder: 'ProbabilisticMimeDetectionSelector.Builder'): ...
    @typing.overload
    def __init__(self, builder: 'ProbabilisticMimeDetectionSelector.Builder'): ...
    def detect(self, inputStream: java.io.InputStream, metadata: org.apache.tika.metadata.Metadata) -> MediaType: ...
    def getMediaTypeRegistry(self) -> MediaTypeRegistry: ...
    class Builder:
        def __init__(self): ...
        def build2(self) -> 'ProbabilisticMimeDetectionSelector': ...
        def extension_neg(self, float: float) -> 'ProbabilisticMimeDetectionSelector.Builder': ...
        def extension_trust(self, float: float) -> 'ProbabilisticMimeDetectionSelector.Builder': ...
        def magic_neg(self, float: float) -> 'ProbabilisticMimeDetectionSelector.Builder': ...
        def magic_trust(self, float: float) -> 'ProbabilisticMimeDetectionSelector.Builder': ...
        def meta_neg(self, float: float) -> 'ProbabilisticMimeDetectionSelector.Builder': ...
        def meta_trust(self, float: float) -> 'ProbabilisticMimeDetectionSelector.Builder': ...
        def priorExtensionFileType(self, float: float) -> 'ProbabilisticMimeDetectionSelector.Builder': ...
        def priorMagicFileType(self, float: float) -> 'ProbabilisticMimeDetectionSelector.Builder': ...
        def priorMetaFileType(self, float: float) -> 'ProbabilisticMimeDetectionSelector.Builder': ...
        def threshold(self, float: float) -> 'ProbabilisticMimeDetectionSelector.Builder': ...

class MimeTypesReader(org.xml.sax.helpers.DefaultHandler, MimeTypesReaderMetKeys):
    def characters(self, charArray: typing.Union[typing.List[str], jpype.JArray], int: int, int2: int) -> None: ...
    def endElement(self, string: str, string2: str, string3: str) -> None: ...
    @typing.overload
    def read(self, inputStream: java.io.InputStream) -> None: ...
    @typing.overload
    def read(self, document: org.w3c.dom.Document) -> None: ...
    def resolveEntity(self, string: str, string2: str) -> org.xml.sax.InputSource: ...
    @staticmethod
    def setPoolSize(int: int) -> None: ...
    def startElement(self, string: str, string2: str, string3: str, attributes: org.xml.sax.Attributes) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.apache.tika.mime")``.

    HexCoDec: typing.Type[HexCoDec]
    MediaType: typing.Type[MediaType]
    MediaTypeRegistry: typing.Type[MediaTypeRegistry]
    MimeType: typing.Type[MimeType]
    MimeTypeException: typing.Type[MimeTypeException]
    MimeTypes: typing.Type[MimeTypes]
    MimeTypesFactory: typing.Type[MimeTypesFactory]
    MimeTypesReader: typing.Type[MimeTypesReader]
    MimeTypesReaderMetKeys: typing.Type[MimeTypesReaderMetKeys]
    ProbabilisticMimeDetectionSelector: typing.Type[ProbabilisticMimeDetectionSelector]
