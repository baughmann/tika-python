
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.io
import java.lang
import java.nio.file
import java.util
import jpype.protocol
import org.apache.tika.metadata
import org.apache.tika.mime
import org.apache.tika.parser
import org.xml.sax
import typing



class ForkParser(org.apache.tika.parser.Parser, java.io.Closeable):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, classLoader: java.lang.ClassLoader): ...
    @typing.overload
    def __init__(self, classLoader: java.lang.ClassLoader, parser: org.apache.tika.parser.Parser): ...
    @typing.overload
    def __init__(self, path: typing.Union[java.nio.file.Path, jpype.protocol.SupportsPath], parserFactoryFactory: 'ParserFactoryFactory'): ...
    @typing.overload
    def __init__(self, path: typing.Union[java.nio.file.Path, jpype.protocol.SupportsPath], parserFactoryFactory: 'ParserFactoryFactory', classLoader: java.lang.ClassLoader): ...
    def close(self) -> None: ...
    def getJavaCommandAsList(self) -> java.util.List[str]: ...
    def getPoolSize(self) -> int: ...
    def getSupportedTypes(self, parseContext: org.apache.tika.parser.ParseContext) -> java.util.Set[org.apache.tika.mime.MediaType]: ...
    def parse(self, inputStream: java.io.InputStream, contentHandler: org.xml.sax.ContentHandler, metadata: org.apache.tika.metadata.Metadata, parseContext: org.apache.tika.parser.ParseContext) -> None: ...
    def setJavaCommand(self, list: java.util.List[str]) -> None: ...
    def setMaxFilesProcessedPerServer(self, int: int) -> None: ...
    def setPoolSize(self, int: int) -> None: ...
    def setServerParseTimeoutMillis(self, long: int) -> None: ...
    def setServerPulseMillis(self, long: int) -> None: ...
    def setServerWaitTimeoutMillis(self, long: int) -> None: ...

class ForkProxy(java.io.Serializable):
    def init(self, dataInputStream: java.io.DataInputStream, dataOutputStream: java.io.DataOutputStream) -> None: ...

class ForkResource:
    def process(self, dataInputStream: java.io.DataInputStream, dataOutputStream: java.io.DataOutputStream) -> java.lang.Throwable: ...

class ParserFactoryFactory(java.io.Serializable):
    def __init__(self, string: str, map: typing.Union[java.util.Map[str, str], typing.Mapping[str, str]]): ...
    def build(self) -> org.apache.tika.parser.ParserFactory: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.apache.tika.fork")``.

    ForkParser: typing.Type[ForkParser]
    ForkProxy: typing.Type[ForkProxy]
    ForkResource: typing.Type[ForkResource]
    ParserFactoryFactory: typing.Type[ParserFactoryFactory]
