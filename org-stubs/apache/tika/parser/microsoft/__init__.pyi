
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.io
import java.lang
import java.text
import java.util
import org
import org.apache.poi.hwpf
import org.apache.poi.hwpf.usermodel
import org.apache.poi.poifs.filesystem
import org.apache.poi.ss.usermodel
import org.apache.poi.wp.usermodel
import org.apache.tika.extractor
import org.apache.tika.metadata
import org.apache.tika.mime
import org.apache.tika.parser
import org.apache.tika.parser.microsoft.activemime
import org.apache.tika.parser.microsoft.chm
import org.apache.tika.parser.microsoft.libpst
import org.apache.tika.parser.microsoft.onenote
import org.apache.tika.parser.microsoft.ooxml
import org.apache.tika.parser.microsoft.pst
import org.apache.tika.parser.microsoft.rtf
import org.apache.tika.parser.microsoft.xml
import org.apache.tika.sax
import org.xml.sax
import typing



class AbstractListManager:
    def __init__(self): ...

class AbstractOfficeParser(org.apache.tika.parser.Parser):
    def __init__(self): ...
    def configure(self, parseContext: org.apache.tika.parser.ParseContext) -> None: ...
    def getByteArrayMaxOverride(self) -> int: ...
    def getDateFormatOverride(self) -> str: ...
    def isConcatenatePhoneticRuns(self) -> bool: ...
    def isExtractAllAlternativesFromMSG(self) -> bool: ...
    def isExtractMacros(self) -> bool: ...
    def isIncludeDeletedContent(self) -> bool: ...
    def isIncludeHeadersAndFooters(self) -> bool: ...
    def isIncludeMoveFromContent(self) -> bool: ...
    def isIncludeShapeBasedContent(self) -> bool: ...
    def isUseSAXDocxExtractor(self) -> bool: ...
    def isUseSAXPptxExtractor(self) -> bool: ...
    def setByteArrayMaxOverride(self, int: int) -> None: ...
    def setConcatenatePhoneticRuns(self, boolean: bool) -> None: ...
    def setDateFormatOverride(self, string: str) -> None: ...
    def setExtractAllAlternativesFromMSG(self, boolean: bool) -> None: ...
    def setExtractMacros(self, boolean: bool) -> None: ...
    def setIncludeDeletedContent(self, boolean: bool) -> None: ...
    def setIncludeHeadersAndFooters(self, boolean: bool) -> None: ...
    def setIncludeMoveFromContent(self, boolean: bool) -> None: ...
    def setIncludeShapeBasedContent(self, boolean: bool) -> None: ...
    def setUseSAXDocxExtractor(self, boolean: bool) -> None: ...
    def setUseSAXPptxExtractor(self, boolean: bool) -> None: ...

class Cell:
    def render(self, xHTMLContentHandler: org.apache.tika.sax.XHTMLContentHandler) -> None: ...

class EMFParser(org.apache.tika.parser.Parser):
    EMF_ICON_ONLY: typing.ClassVar[org.apache.tika.metadata.Property] = ...
    EMF_ICON_STRING: typing.ClassVar[org.apache.tika.metadata.Property] = ...
    def __init__(self): ...
    def getSupportedTypes(self, parseContext: org.apache.tika.parser.ParseContext) -> java.util.Set[org.apache.tika.mime.MediaType]: ...
    def parse(self, inputStream: java.io.InputStream, contentHandler: org.xml.sax.ContentHandler, metadata: org.apache.tika.metadata.Metadata, parseContext: org.apache.tika.parser.ParseContext) -> None: ...

class FormattingUtils:
    @staticmethod
    def closeStyleTags(xHTMLContentHandler: org.apache.tika.sax.XHTMLContentHandler, deque: java.util.Deque['FormattingUtils.Tag']) -> None: ...
    @staticmethod
    def ensureFormattingState(xHTMLContentHandler: org.apache.tika.sax.XHTMLContentHandler, enumSet: java.util.EnumSet['FormattingUtils.Tag'], deque: java.util.Deque['FormattingUtils.Tag']) -> None: ...
    @staticmethod
    def toTags(characterRun: org.apache.poi.wp.usermodel.CharacterRun) -> java.util.EnumSet['FormattingUtils.Tag']: ...
    class Tag(java.lang.Enum['FormattingUtils.Tag']):
        B: typing.ClassVar['FormattingUtils.Tag'] = ...
        I: typing.ClassVar['FormattingUtils.Tag'] = ...
        S: typing.ClassVar['FormattingUtils.Tag'] = ...
        U: typing.ClassVar['FormattingUtils.Tag'] = ...
        def tagName(self) -> str: ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'FormattingUtils.Tag': ...
        @staticmethod
        def values() -> typing.MutableSequence['FormattingUtils.Tag']: ...

class JackcessParser(org.apache.tika.parser.Parser):
    SUMMARY_PROPERTY_PREFIX: typing.ClassVar[str] = ...
    MDB_PROPERTY_PREFIX: typing.ClassVar[str] = ...
    USER_DEFINED_PROPERTY_PREFIX: typing.ClassVar[str] = ...
    MDB_PW: typing.ClassVar[org.apache.tika.metadata.Property] = ...
    def __init__(self): ...
    def getSupportedTypes(self, parseContext: org.apache.tika.parser.ParseContext) -> java.util.Set[org.apache.tika.mime.MediaType]: ...
    def parse(self, inputStream: java.io.InputStream, contentHandler: org.xml.sax.ContentHandler, metadata: org.apache.tika.metadata.Metadata, parseContext: org.apache.tika.parser.ParseContext) -> None: ...

class MSOwnerFileParser(org.apache.tika.parser.Parser):
    def __init__(self): ...
    def getSupportedTypes(self, parseContext: org.apache.tika.parser.ParseContext) -> java.util.Set[org.apache.tika.mime.MediaType]: ...
    def parse(self, inputStream: java.io.InputStream, contentHandler: org.xml.sax.ContentHandler, metadata: org.apache.tika.metadata.Metadata, parseContext: org.apache.tika.parser.ParseContext) -> None: ...

class OfficeParserConfig(java.io.Serializable):
    def __init__(self): ...
    def getDateFormatOverride(self) -> str: ...
    def getMaxOverride(self) -> int: ...
    def isConcatenatePhoneticRuns(self) -> bool: ...
    def isExtractAllAlternativesFromMSG(self) -> bool: ...
    def isExtractMacros(self) -> bool: ...
    def isIncludeDeletedContent(self) -> bool: ...
    def isIncludeHeadersAndFooters(self) -> bool: ...
    def isIncludeMissingRows(self) -> bool: ...
    def isIncludeMoveFromContent(self) -> bool: ...
    def isIncludeShapeBasedContent(self) -> bool: ...
    def isIncludeSlideMasterContent(self) -> bool: ...
    def isIncludeSlideNotes(self) -> bool: ...
    def isUseSAXDocxExtractor(self) -> bool: ...
    def isUseSAXPptxExtractor(self) -> bool: ...
    def setConcatenatePhoneticRuns(self, boolean: bool) -> None: ...
    def setDateOverrideFormat(self, string: str) -> None: ...
    def setExtractAllAlternativesFromMSG(self, boolean: bool) -> None: ...
    def setExtractMacros(self, boolean: bool) -> None: ...
    def setIncludeDeletedContent(self, boolean: bool) -> None: ...
    def setIncludeHeadersAndFooters(self, boolean: bool) -> None: ...
    def setIncludeMissingRows(self, boolean: bool) -> None: ...
    def setIncludeMoveFromContent(self, boolean: bool) -> None: ...
    def setIncludeShapeBasedContent(self, boolean: bool) -> None: ...
    def setIncludeSlideMasterContent(self, boolean: bool) -> None: ...
    def setIncludeSlideNotes(self, boolean: bool) -> None: ...
    def setMaxOverride(self, int: int) -> None: ...
    def setUseSAXDocxExtractor(self, boolean: bool) -> None: ...
    def setUseSAXPptxExtractor(self, boolean: bool) -> None: ...

class OldExcelParser(org.apache.tika.parser.Parser):
    def __init__(self): ...
    def getSupportedTypes(self, parseContext: org.apache.tika.parser.ParseContext) -> java.util.Set[org.apache.tika.mime.MediaType]: ...
    def parse(self, inputStream: java.io.InputStream, contentHandler: org.xml.sax.ContentHandler, metadata: org.apache.tika.metadata.Metadata, parseContext: org.apache.tika.parser.ParseContext) -> None: ...

class SummaryExtractor:
    def __init__(self, metadata: org.apache.tika.metadata.Metadata): ...
    @staticmethod
    def addMulti(metadata: org.apache.tika.metadata.Metadata, property: org.apache.tika.metadata.Property, string: str) -> None: ...
    @typing.overload
    def parseSummaries(self, directoryNode: org.apache.poi.poifs.filesystem.DirectoryNode) -> None: ...
    @typing.overload
    def parseSummaries(self, pOIFSFileSystem: org.apache.poi.poifs.filesystem.POIFSFileSystem) -> None: ...

class TNEFParser(org.apache.tika.parser.Parser):
    def __init__(self): ...
    def getSupportedTypes(self, parseContext: org.apache.tika.parser.ParseContext) -> java.util.Set[org.apache.tika.mime.MediaType]: ...
    def parse(self, inputStream: java.io.InputStream, contentHandler: org.xml.sax.ContentHandler, metadata: org.apache.tika.metadata.Metadata, parseContext: org.apache.tika.parser.ParseContext) -> None: ...

class TikaExcelDataFormatter(org.apache.poi.ss.usermodel.DataFormatter):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, locale: java.util.Locale): ...
    @typing.overload
    def formatRawCellContents(self, double: float, int: int, string: str) -> str: ...
    @typing.overload
    def formatRawCellContents(self, double: float, int: int, string: str, boolean: bool) -> str: ...
    def setDateFormatOverride(self, string: str) -> None: ...

class TikaExcelGeneralFormat(java.text.Format):
    def __init__(self, locale: java.util.Locale): ...
    @typing.overload
    def format(self, object: typing.Any) -> str: ...
    @typing.overload
    def format(self, object: typing.Any, stringBuffer: java.lang.StringBuffer, fieldPosition: java.text.FieldPosition) -> java.lang.StringBuffer: ...
    @typing.overload
    def parseObject(self, string: str) -> typing.Any: ...
    @typing.overload
    def parseObject(self, string: str, parsePosition: java.text.ParsePosition) -> typing.Any: ...

class WMFParser(org.apache.tika.parser.Parser):
    def __init__(self): ...
    def getSupportedTypes(self, parseContext: org.apache.tika.parser.ParseContext) -> java.util.Set[org.apache.tika.mime.MediaType]: ...
    def parse(self, inputStream: java.io.InputStream, contentHandler: org.xml.sax.ContentHandler, metadata: org.apache.tika.metadata.Metadata, parseContext: org.apache.tika.parser.ParseContext) -> None: ...

class CellDecorator(Cell):
    def __init__(self, cell: typing.Union[Cell, typing.Callable]): ...
    def render(self, xHTMLContentHandler: org.apache.tika.sax.XHTMLContentHandler) -> None: ...

class ListManager(AbstractListManager):
    def __init__(self, hWPFDocument: org.apache.poi.hwpf.HWPFDocument): ...
    def getFormattedNumber(self, paragraph: org.apache.poi.hwpf.usermodel.Paragraph) -> str: ...

class NumberCell(Cell):
    def __init__(self, double: float, numberFormat: java.text.NumberFormat): ...
    def render(self, xHTMLContentHandler: org.apache.tika.sax.XHTMLContentHandler) -> None: ...
    def toString(self) -> str: ...

class OfficeParser(AbstractOfficeParser):
    def __init__(self): ...
    @staticmethod
    def extractMacros(pOIFSFileSystem: org.apache.poi.poifs.filesystem.POIFSFileSystem, contentHandler: org.xml.sax.ContentHandler, embeddedDocumentExtractor: org.apache.tika.extractor.EmbeddedDocumentExtractor) -> None: ...
    def getSupportedTypes(self, parseContext: org.apache.tika.parser.ParseContext) -> java.util.Set[org.apache.tika.mime.MediaType]: ...
    @staticmethod
    def getUCEntry(directoryEntry: org.apache.poi.poifs.filesystem.DirectoryEntry, string: str) -> org.apache.poi.poifs.filesystem.Entry: ...
    def parse(self, inputStream: java.io.InputStream, contentHandler: org.xml.sax.ContentHandler, metadata: org.apache.tika.metadata.Metadata, parseContext: org.apache.tika.parser.ParseContext) -> None: ...
    class POIFSDocumentType(java.lang.Enum['OfficeParser.POIFSDocumentType']):
        WORKBOOK: typing.ClassVar['OfficeParser.POIFSDocumentType'] = ...
        OLE10_NATIVE: typing.ClassVar['OfficeParser.POIFSDocumentType'] = ...
        COMP_OBJ: typing.ClassVar['OfficeParser.POIFSDocumentType'] = ...
        WORDDOCUMENT: typing.ClassVar['OfficeParser.POIFSDocumentType'] = ...
        UNKNOWN: typing.ClassVar['OfficeParser.POIFSDocumentType'] = ...
        DRMENCRYPTED: typing.ClassVar['OfficeParser.POIFSDocumentType'] = ...
        ENCRYPTED: typing.ClassVar['OfficeParser.POIFSDocumentType'] = ...
        POWERPOINT: typing.ClassVar['OfficeParser.POIFSDocumentType'] = ...
        PUBLISHER: typing.ClassVar['OfficeParser.POIFSDocumentType'] = ...
        PROJECT: typing.ClassVar['OfficeParser.POIFSDocumentType'] = ...
        VISIO: typing.ClassVar['OfficeParser.POIFSDocumentType'] = ...
        WORKS: typing.ClassVar['OfficeParser.POIFSDocumentType'] = ...
        XLR: typing.ClassVar['OfficeParser.POIFSDocumentType'] = ...
        OUTLOOK: typing.ClassVar['OfficeParser.POIFSDocumentType'] = ...
        SOLIDWORKS_PART: typing.ClassVar['OfficeParser.POIFSDocumentType'] = ...
        SOLIDWORKS_ASSEMBLY: typing.ClassVar['OfficeParser.POIFSDocumentType'] = ...
        SOLIDWORKS_DRAWING: typing.ClassVar['OfficeParser.POIFSDocumentType'] = ...
        GRAPH: typing.ClassVar['OfficeParser.POIFSDocumentType'] = ...
        @typing.overload
        @staticmethod
        def detectType(directoryEntry: org.apache.poi.poifs.filesystem.DirectoryEntry) -> 'OfficeParser.POIFSDocumentType': ...
        @typing.overload
        @staticmethod
        def detectType(pOIFSFileSystem: org.apache.poi.poifs.filesystem.POIFSFileSystem) -> 'OfficeParser.POIFSDocumentType': ...
        def getExtension(self) -> str: ...
        def getType(self) -> org.apache.tika.mime.MediaType: ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'OfficeParser.POIFSDocumentType': ...
        @staticmethod
        def values() -> typing.MutableSequence['OfficeParser.POIFSDocumentType']: ...

class TextCell(Cell):
    def __init__(self, string: str): ...
    def render(self, xHTMLContentHandler: org.apache.tika.sax.XHTMLContentHandler) -> None: ...
    def toString(self) -> str: ...

class LinkedCell(CellDecorator):
    def __init__(self, cell: typing.Union[Cell, typing.Callable], string: str): ...
    def render(self, xHTMLContentHandler: org.apache.tika.sax.XHTMLContentHandler) -> None: ...

class ExcelExtractor(org.apache.tika.parser.microsoft.AbstractPOIFSExtractor):
    def __init__(self, parseContext: org.apache.tika.parser.ParseContext, metadata: org.apache.tika.metadata.Metadata): ...
    def isListenForAllRecords(self) -> bool: ...
    def setListenForAllRecords(self, boolean: bool) -> None: ...

class HSLFExtractor(org.apache.tika.parser.microsoft.AbstractPOIFSExtractor):
    def __init__(self, parseContext: org.apache.tika.parser.ParseContext, metadata: org.apache.tika.metadata.Metadata): ...

class OutlookExtractor(org.apache.tika.parser.microsoft.AbstractPOIFSExtractor):
    def __init__(self, directoryNode: org.apache.poi.poifs.filesystem.DirectoryNode, metadata: org.apache.tika.metadata.Metadata, parseContext: org.apache.tika.parser.ParseContext): ...
    @staticmethod
    def addEvenIfNull(property: org.apache.tika.metadata.Property, string: str, metadata: org.apache.tika.metadata.Metadata) -> None: ...
    @staticmethod
    def getMessageClass(string: str) -> str: ...
    def parse(self, xHTMLContentHandler: org.apache.tika.sax.XHTMLContentHandler) -> None: ...
    class RECIPIENT_TYPE(java.lang.Enum['OutlookExtractor.RECIPIENT_TYPE']):
        TO: typing.ClassVar['OutlookExtractor.RECIPIENT_TYPE'] = ...
        CC: typing.ClassVar['OutlookExtractor.RECIPIENT_TYPE'] = ...
        BCC: typing.ClassVar['OutlookExtractor.RECIPIENT_TYPE'] = ...
        UNRECOGNIZED: typing.ClassVar['OutlookExtractor.RECIPIENT_TYPE'] = ...
        UNSPECIFIED: typing.ClassVar['OutlookExtractor.RECIPIENT_TYPE'] = ...
        @staticmethod
        def getTypeFromVal(int: int) -> 'OutlookExtractor.RECIPIENT_TYPE': ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'OutlookExtractor.RECIPIENT_TYPE': ...
        @staticmethod
        def values() -> typing.MutableSequence['OutlookExtractor.RECIPIENT_TYPE']: ...

class WordExtractor(org.apache.tika.parser.microsoft.AbstractPOIFSExtractor):
    def __init__(self, parseContext: org.apache.tika.parser.ParseContext, metadata: org.apache.tika.metadata.Metadata): ...
    @staticmethod
    def buildParagraphTagAndStyle(string: str, boolean: bool) -> 'WordExtractor.TagAndStyle': ...
    class TagAndStyle:
        def __init__(self, string: str, string2: str): ...
        def getStyleClass(self) -> str: ...
        def getTag(self) -> str: ...
        def isHeading(self) -> bool: ...

class AbstractPOIFSExtractor: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.apache.tika.parser.microsoft")``.

    AbstractListManager: typing.Type[AbstractListManager]
    AbstractOfficeParser: typing.Type[AbstractOfficeParser]
    AbstractPOIFSExtractor: typing.Type[AbstractPOIFSExtractor]
    Cell: typing.Type[Cell]
    CellDecorator: typing.Type[CellDecorator]
    EMFParser: typing.Type[EMFParser]
    ExcelExtractor: typing.Type[ExcelExtractor]
    FormattingUtils: typing.Type[FormattingUtils]
    HSLFExtractor: typing.Type[HSLFExtractor]
    JackcessParser: typing.Type[JackcessParser]
    LinkedCell: typing.Type[LinkedCell]
    ListManager: typing.Type[ListManager]
    MSOwnerFileParser: typing.Type[MSOwnerFileParser]
    NumberCell: typing.Type[NumberCell]
    OfficeParser: typing.Type[OfficeParser]
    OfficeParserConfig: typing.Type[OfficeParserConfig]
    OldExcelParser: typing.Type[OldExcelParser]
    OutlookExtractor: typing.Type[OutlookExtractor]
    SummaryExtractor: typing.Type[SummaryExtractor]
    TNEFParser: typing.Type[TNEFParser]
    TextCell: typing.Type[TextCell]
    TikaExcelDataFormatter: typing.Type[TikaExcelDataFormatter]
    TikaExcelGeneralFormat: typing.Type[TikaExcelGeneralFormat]
    WMFParser: typing.Type[WMFParser]
    WordExtractor: typing.Type[WordExtractor]
    activemime: org.apache.tika.parser.microsoft.activemime.__module_protocol__
    chm: org.apache.tika.parser.microsoft.chm.__module_protocol__
    libpst: org.apache.tika.parser.microsoft.libpst.__module_protocol__
    onenote: org.apache.tika.parser.microsoft.onenote.__module_protocol__
    ooxml: org.apache.tika.parser.microsoft.ooxml.__module_protocol__
    pst: org.apache.tika.parser.microsoft.pst.__module_protocol__
    rtf: org.apache.tika.parser.microsoft.rtf.__module_protocol__
    xml: org.apache.tika.parser.microsoft.xml.__module_protocol__
