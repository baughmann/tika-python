
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.io
import java.lang
import java.util
import org
import org.apache.tika.config
import org.apache.tika.detect
import org.apache.tika.extractor.microsoft
import org.apache.tika.io
import org.apache.tika.metadata
import org.apache.tika.mime
import org.apache.tika.parser
import org.apache.tika.pipes.extractor
import org.xml.sax
import typing



class ContainerExtractor(java.io.Serializable):
    def extract(self, tikaInputStream: org.apache.tika.io.TikaInputStream, containerExtractor: 'ContainerExtractor', embeddedResourceHandler: typing.Union['EmbeddedResourceHandler', typing.Callable]) -> None: ...
    def isSupported(self, tikaInputStream: org.apache.tika.io.TikaInputStream) -> bool: ...

class DocumentSelector:
    def select(self, metadata: org.apache.tika.metadata.Metadata) -> bool: ...

class EmbeddedDocumentBytesHandler(java.io.Closeable):
    def add(self, int: int, metadata: org.apache.tika.metadata.Metadata, inputStream: java.io.InputStream) -> None: ...
    def getIds(self) -> java.util.List[int]: ...

class EmbeddedDocumentExtractor:
    def parseEmbedded(self, inputStream: java.io.InputStream, contentHandler: org.xml.sax.ContentHandler, metadata: org.apache.tika.metadata.Metadata, boolean: bool) -> None: ...
    def shouldParseEmbedded(self, metadata: org.apache.tika.metadata.Metadata) -> bool: ...

class EmbeddedDocumentExtractorFactory(java.io.Serializable):
    def newInstance(self, metadata: org.apache.tika.metadata.Metadata, parseContext: org.apache.tika.parser.ParseContext) -> EmbeddedDocumentExtractor: ...

class EmbeddedDocumentUtil(java.io.Serializable):
    def __init__(self, parseContext: org.apache.tika.parser.ParseContext): ...
    def getDetector(self) -> org.apache.tika.detect.Detector: ...
    @staticmethod
    def getEmbeddedDocumentExtractor(parseContext: org.apache.tika.parser.ParseContext) -> EmbeddedDocumentExtractor: ...
    def getExtension(self, tikaInputStream: org.apache.tika.io.TikaInputStream, metadata: org.apache.tika.metadata.Metadata) -> str: ...
    def getMimeTypes(self) -> org.apache.tika.mime.MimeTypes: ...
    def getPasswordProvider(self) -> org.apache.tika.parser.PasswordProvider: ...
    @staticmethod
    def getStatelessParser(parseContext: org.apache.tika.parser.ParseContext) -> org.apache.tika.parser.Parser: ...
    def getTikaConfig(self) -> org.apache.tika.config.TikaConfig: ...
    def parseEmbedded(self, inputStream: java.io.InputStream, contentHandler: org.xml.sax.ContentHandler, metadata: org.apache.tika.metadata.Metadata, boolean: bool) -> None: ...
    @staticmethod
    def recordEmbeddedStreamException(throwable: java.lang.Throwable, metadata: org.apache.tika.metadata.Metadata) -> None: ...
    @staticmethod
    def recordException(throwable: java.lang.Throwable, metadata: org.apache.tika.metadata.Metadata) -> None: ...
    def shouldParseEmbedded(self, metadata: org.apache.tika.metadata.Metadata) -> bool: ...
    @staticmethod
    def tryToFindExistingLeafParser(class_: typing.Type, parseContext: org.apache.tika.parser.ParseContext) -> org.apache.tika.parser.Parser: ...

class EmbeddedResourceHandler:
    def handle(self, string: str, mediaType: org.apache.tika.mime.MediaType, inputStream: java.io.InputStream) -> None: ...

class EmbeddedStreamTranslator:
    def shouldTranslate(self, inputStream: java.io.InputStream, metadata: org.apache.tika.metadata.Metadata) -> bool: ...
    def translate(self, inputStream: java.io.InputStream, metadata: org.apache.tika.metadata.Metadata) -> java.io.InputStream: ...

class ParentContentHandler:
    def __init__(self, contentHandler: org.xml.sax.ContentHandler): ...
    def getContentHandler(self) -> org.xml.sax.ContentHandler: ...

class AbstractEmbeddedDocumentBytesHandler(EmbeddedDocumentBytesHandler):
    def __init__(self): ...
    def add(self, int: int, metadata: org.apache.tika.metadata.Metadata, inputStream: java.io.InputStream) -> None: ...
    def getEmitKey(self, string: str, int: int, embeddedDocumentBytesConfig: org.apache.tika.pipes.extractor.EmbeddedDocumentBytesConfig, metadata: org.apache.tika.metadata.Metadata) -> str: ...
    def getIds(self) -> java.util.List[int]: ...

class DefaultEmbeddedStreamTranslator(EmbeddedStreamTranslator):
    def __init__(self): ...
    def shouldTranslate(self, inputStream: java.io.InputStream, metadata: org.apache.tika.metadata.Metadata) -> bool: ...
    def translate(self, inputStream: java.io.InputStream, metadata: org.apache.tika.metadata.Metadata) -> java.io.InputStream: ...

class EmbeddedDocumentByteStoreExtractorFactory(EmbeddedDocumentExtractorFactory): ...

class ParserContainerExtractor(ContainerExtractor):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, tikaConfig: org.apache.tika.config.TikaConfig): ...
    @typing.overload
    def __init__(self, parser: org.apache.tika.parser.Parser, detector: typing.Union[org.apache.tika.detect.Detector, typing.Callable]): ...
    def extract(self, tikaInputStream: org.apache.tika.io.TikaInputStream, containerExtractor: ContainerExtractor, embeddedResourceHandler: typing.Union[EmbeddedResourceHandler, typing.Callable]) -> None: ...
    def isSupported(self, tikaInputStream: org.apache.tika.io.TikaInputStream) -> bool: ...

class ParsingEmbeddedDocumentExtractor(EmbeddedDocumentExtractor):
    def __init__(self, parseContext: org.apache.tika.parser.ParseContext): ...
    def getDelegatingParser(self) -> org.apache.tika.parser.Parser: ...
    def isWriteFileNameToContent(self) -> bool: ...
    def parseEmbedded(self, inputStream: java.io.InputStream, contentHandler: org.xml.sax.ContentHandler, metadata: org.apache.tika.metadata.Metadata, boolean: bool) -> None: ...
    def setWriteFileNameToContent(self, boolean: bool) -> None: ...
    def shouldParseEmbedded(self, metadata: org.apache.tika.metadata.Metadata) -> bool: ...

class ParsingEmbeddedDocumentExtractorFactory(EmbeddedDocumentExtractorFactory):
    def __init__(self): ...
    def newInstance(self, metadata: org.apache.tika.metadata.Metadata, parseContext: org.apache.tika.parser.ParseContext) -> EmbeddedDocumentExtractor: ...
    def setWriteFileNameToContent(self, boolean: bool) -> None: ...

class BasicEmbeddedDocumentBytesHandler(AbstractEmbeddedDocumentBytesHandler):
    def __init__(self, embeddedDocumentBytesConfig: org.apache.tika.pipes.extractor.EmbeddedDocumentBytesConfig): ...
    def add(self, int: int, metadata: org.apache.tika.metadata.Metadata, inputStream: java.io.InputStream) -> None: ...
    def close(self) -> None: ...
    def getDocument(self, int: int) -> java.io.InputStream: ...

class RUnpackExtractor(ParsingEmbeddedDocumentExtractor):
    def __init__(self, parseContext: org.apache.tika.parser.ParseContext, long: int): ...
    def getEmbeddedBytesSelector(self) -> 'EmbeddedBytesSelector': ...
    def parseEmbedded(self, inputStream: java.io.InputStream, contentHandler: org.xml.sax.ContentHandler, metadata: org.apache.tika.metadata.Metadata, boolean: bool) -> None: ...
    def setEmbeddedBytesSelector(self, embeddedBytesSelector: typing.Union['EmbeddedBytesSelector', typing.Callable]) -> None: ...

class RUnpackExtractorFactory(EmbeddedDocumentByteStoreExtractorFactory):
    DEFAULT_MAX_EMBEDDED_BYTES_FOR_EXTRACTION: typing.ClassVar[int] = ...
    def __init__(self): ...
    def newInstance(self, metadata: org.apache.tika.metadata.Metadata, parseContext: org.apache.tika.parser.ParseContext) -> EmbeddedDocumentExtractor: ...
    def setEmbeddedBytesExcludeEmbeddedResourceTypes(self, list: java.util.List[str]) -> None: ...
    def setEmbeddedBytesExcludeMimeTypes(self, list: java.util.List[str]) -> None: ...
    def setEmbeddedBytesIncludeEmbeddedResourceTypes(self, list: java.util.List[str]) -> None: ...
    def setEmbeddedBytesIncludeMimeTypes(self, list: java.util.List[str]) -> None: ...
    def setMaxEmbeddedBytesForExtraction(self, long: int) -> None: ...
    def setWriteFileNameToContent(self, boolean: bool) -> None: ...

class BasicEmbeddedBytesSelector(org.apache.tika.extractor.EmbeddedBytesSelector):
    def __init__(self, set: java.util.Set[str], set2: java.util.Set[str], set3: java.util.Set[str], set4: java.util.Set[str]): ...
    def select(self, metadata: org.apache.tika.metadata.Metadata) -> bool: ...

class EmbeddedBytesSelector:
    ACCEPT_ALL: typing.ClassVar['EmbeddedBytesSelector'] = ...
    def select(self, metadata: org.apache.tika.metadata.Metadata) -> bool: ...
    class AcceptAll(org.apache.tika.extractor.EmbeddedBytesSelector):
        def __init__(self): ...
        def select(self, metadata: org.apache.tika.metadata.Metadata) -> bool: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.apache.tika.extractor")``.

    AbstractEmbeddedDocumentBytesHandler: typing.Type[AbstractEmbeddedDocumentBytesHandler]
    BasicEmbeddedBytesSelector: typing.Type[BasicEmbeddedBytesSelector]
    BasicEmbeddedDocumentBytesHandler: typing.Type[BasicEmbeddedDocumentBytesHandler]
    ContainerExtractor: typing.Type[ContainerExtractor]
    DefaultEmbeddedStreamTranslator: typing.Type[DefaultEmbeddedStreamTranslator]
    DocumentSelector: typing.Type[DocumentSelector]
    EmbeddedBytesSelector: typing.Type[EmbeddedBytesSelector]
    EmbeddedDocumentByteStoreExtractorFactory: typing.Type[EmbeddedDocumentByteStoreExtractorFactory]
    EmbeddedDocumentBytesHandler: typing.Type[EmbeddedDocumentBytesHandler]
    EmbeddedDocumentExtractor: typing.Type[EmbeddedDocumentExtractor]
    EmbeddedDocumentExtractorFactory: typing.Type[EmbeddedDocumentExtractorFactory]
    EmbeddedDocumentUtil: typing.Type[EmbeddedDocumentUtil]
    EmbeddedResourceHandler: typing.Type[EmbeddedResourceHandler]
    EmbeddedStreamTranslator: typing.Type[EmbeddedStreamTranslator]
    ParentContentHandler: typing.Type[ParentContentHandler]
    ParserContainerExtractor: typing.Type[ParserContainerExtractor]
    ParsingEmbeddedDocumentExtractor: typing.Type[ParsingEmbeddedDocumentExtractor]
    ParsingEmbeddedDocumentExtractorFactory: typing.Type[ParsingEmbeddedDocumentExtractorFactory]
    RUnpackExtractor: typing.Type[RUnpackExtractor]
    RUnpackExtractorFactory: typing.Type[RUnpackExtractorFactory]
    microsoft: org.apache.tika.extractor.microsoft.__module_protocol__
