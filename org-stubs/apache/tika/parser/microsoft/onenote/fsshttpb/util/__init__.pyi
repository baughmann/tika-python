
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.util
import java.util.concurrent.atomic
import jpype
import org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj
import org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.basic
import typing



class Bit:
    def __init__(self): ...
    @staticmethod
    def clearBit(byteArray: typing.Union[typing.List[int], jpype.JArray, bytes], long: int) -> None: ...
    @staticmethod
    def isBitSet(byteArray: typing.Union[typing.List[int], jpype.JArray, bytes], long: int) -> bool: ...
    @staticmethod
    def setBit(byteArray: typing.Union[typing.List[int], jpype.JArray, bytes], long: int) -> None: ...

class BitConverter:
    def __init__(self): ...
    @staticmethod
    def doubleToInt64Bits(double: float) -> int: ...
    @typing.overload
    @staticmethod
    def getBytes(boolean: bool) -> typing.MutableSequence[int]: ...
    @typing.overload
    @staticmethod
    def getBytes(char: str) -> typing.MutableSequence[int]: ...
    @typing.overload
    @staticmethod
    def getBytes(double: float) -> typing.MutableSequence[int]: ...
    @typing.overload
    @staticmethod
    def getBytes(float: float) -> typing.MutableSequence[int]: ...
    @typing.overload
    @staticmethod
    def getBytes(int: int) -> typing.MutableSequence[int]: ...
    @typing.overload
    @staticmethod
    def getBytes(string: str) -> typing.MutableSequence[int]: ...
    @typing.overload
    @staticmethod
    def getBytes(long: int) -> typing.MutableSequence[int]: ...
    @typing.overload
    @staticmethod
    def getBytes(short: int) -> typing.MutableSequence[int]: ...
    @staticmethod
    def int64BitsToDouble(long: int) -> float: ...
    def toBoolean(self, byteArray: typing.Union[typing.List[int], jpype.JArray, bytes], int: int) -> bool: ...
    def toChar(self, byteArray: typing.Union[typing.List[int], jpype.JArray, bytes], int: int) -> str: ...
    def toDouble(self, byteArray: typing.Union[typing.List[int], jpype.JArray, bytes], int: int) -> float: ...
    @staticmethod
    def toInt16(byteArray: typing.Union[typing.List[int], jpype.JArray, bytes], int: int) -> int: ...
    @staticmethod
    def toInt32(byteArray: typing.Union[typing.List[int], jpype.JArray, bytes], int: int) -> int: ...
    @staticmethod
    def toInt64(byteArray: typing.Union[typing.List[int], jpype.JArray, bytes], int: int) -> int: ...
    @staticmethod
    def toSingle(byteArray: typing.Union[typing.List[int], jpype.JArray, bytes], int: int) -> float: ...
    @typing.overload
    def toString(self) -> str: ...
    @typing.overload
    @staticmethod
    def toString(byteArray: typing.Union[typing.List[int], jpype.JArray, bytes]) -> str: ...
    @staticmethod
    def toUInt32(byteArray: typing.Union[typing.List[int], jpype.JArray, bytes], int: int) -> int: ...

class BitReader:
    def __init__(self, byteArray: typing.Union[typing.List[int], jpype.JArray, bytes], int: int): ...
    def dispose(self) -> None: ...
    def getCurrent(self) -> bool: ...
    def moveNext(self) -> bool: ...
    def readBytes(self, int: int) -> typing.MutableSequence[int]: ...
    def readGuid(self) -> java.util.UUID: ...
    def readInt16(self, int: int) -> int: ...
    def readInt32(self, int: int) -> int: ...
    def readUInt16(self, int: int) -> int: ...
    def readUInt32(self, int: int) -> int: ...
    def readUInt64(self, int: int) -> int: ...
    def reset(self) -> None: ...

class BitWriter:
    def __init__(self, int: int): ...
    def appendGUID(self, uUID: java.util.UUID) -> None: ...
    def appendInit32(self, int: int, int2: int) -> None: ...
    def appendUInit32(self, int: int, int2: int) -> None: ...
    def appendUInt64(self, long: int, int: int) -> None: ...
    def getByteList(self) -> java.util.List[int]: ...
    def getBytes(self) -> typing.MutableSequence[int]: ...

class ByteUtil:
    def __init__(self): ...
    @staticmethod
    def appendByteArrayToListOfByte(list: java.util.List[int], byteArray: typing.Union[typing.List[int], jpype.JArray, bytes]) -> None: ...
    @staticmethod
    def toByteArray(list: java.util.List[int]) -> typing.MutableSequence[int]: ...
    @staticmethod
    def toListOfByte(byteArray: typing.Union[typing.List[int], jpype.JArray, bytes]) -> java.util.List[int]: ...

class DataElementUtils:
    RootExGuid: typing.ClassVar[java.util.UUID] = ...
    CellSecondExGuid: typing.ClassVar[java.util.UUID] = ...
    SchemaGuid: typing.ClassVar[java.util.UUID] = ...
    def __init__(self): ...
    @staticmethod
    def analyzeStorageIndexDataElement(list: java.util.List[org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.DataElement], exGuid: org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.basic.ExGuid, atomicReference: java.util.concurrent.atomic.AtomicReference[org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.basic.ExGuid], atomicReference2: java.util.concurrent.atomic.AtomicReference[java.util.HashMap[org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.basic.CellID, org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.basic.ExGuid]], atomicReference3: java.util.concurrent.atomic.AtomicReference[java.util.HashMap[org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.basic.ExGuid, org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.basic.ExGuid]]) -> bool: ...
    @staticmethod
    def buildDataElements(byteArray: typing.Union[typing.List[int], jpype.JArray, bytes], atomicReference: java.util.concurrent.atomic.AtomicReference[org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.basic.ExGuid]) -> java.util.List[org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.DataElement]: ...
    @staticmethod
    def createCellMainifestDataElement(exGuid: org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.basic.ExGuid, map: typing.Union[java.util.Map[org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.basic.CellID, org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.basic.ExGuid], typing.Mapping[org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.basic.CellID, org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.basic.ExGuid]]) -> org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.DataElement: ...
    @staticmethod
    def createObjectGroupDataElement(byteArray: typing.Union[typing.List[int], jpype.JArray, bytes], atomicReference: java.util.concurrent.atomic.AtomicReference[org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.basic.ExGuid], list: java.util.List[org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.basic.ExGuid]) -> java.util.List[org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.DataElement]: ...
    @staticmethod
    def createRevisionManifestDataElement(exGuid: org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.basic.ExGuid, exGuid2: org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.basic.ExGuid, list: java.util.List[org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.basic.ExGuid], map: typing.Union[java.util.Map[org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.basic.ExGuid, org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.basic.ExGuid], typing.Mapping[org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.basic.ExGuid, org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.basic.ExGuid]], atomicReference: java.util.concurrent.atomic.AtomicReference[org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.basic.ExGuid]) -> org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.DataElement: ...
    @staticmethod
    def createStorageIndexDataElement(exGuid: org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.basic.ExGuid, map: typing.Union[java.util.Map[org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.basic.CellID, org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.basic.ExGuid], typing.Mapping[org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.basic.CellID, org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.basic.ExGuid]], map2: typing.Union[java.util.Map[org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.basic.ExGuid, org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.basic.ExGuid], typing.Mapping[org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.basic.ExGuid, org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.basic.ExGuid]]) -> org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.DataElement: ...
    @staticmethod
    def createStorageManifestDataElement(map: typing.Union[java.util.Map[org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.basic.CellID, org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.basic.ExGuid], typing.Mapping[org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.basic.CellID, org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.basic.ExGuid]]) -> org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.DataElement: ...
    @staticmethod
    def getCellManifestDataElementData(list: java.util.List[org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.DataElement], storageManifestDataElementData: org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.StorageManifestDataElementData, hashMap: java.util.HashMap[org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.basic.CellID, org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.basic.ExGuid]) -> org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.CellManifestDataElementData: ...
    @typing.overload
    @staticmethod
    def getDataObjectDataElementData(list: java.util.List[org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.DataElement], revisionManifestDataElementData: org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.RevisionManifestDataElementData, atomicReference: java.util.concurrent.atomic.AtomicReference[org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.basic.ExGuid]) -> java.util.List[org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.ObjectGroupDataElementData]: ...
    @typing.overload
    @staticmethod
    def getDataObjectDataElementData(list: java.util.List[org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.DataElement], exGuid: org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.basic.ExGuid, atomicReference: java.util.concurrent.atomic.AtomicReference[org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.basic.ExGuid]) -> java.util.List[org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.ObjectGroupDataElementData]: ...
    @staticmethod
    def getRevisionManifestDataElementData(list: java.util.List[org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.DataElement], cellManifestDataElementData: org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.CellManifestDataElementData, hashMap: java.util.HashMap[org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.basic.ExGuid, org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.basic.ExGuid]) -> org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.RevisionManifestDataElementData: ...
    @staticmethod
    def getStorageManifestDataElementData(list: java.util.List[org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.DataElement], exGuid: org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.basic.ExGuid) -> org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.StorageManifestDataElementData: ...
    @staticmethod
    def tryAnalyzeWhetherConfirmSchema(list: java.util.List[org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.DataElement], exGuid: org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.basic.ExGuid) -> bool: ...
    @staticmethod
    def tryAnalyzeWhetherFullDataElementList(list: java.util.List[org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.DataElement], exGuid: org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.basic.ExGuid) -> bool: ...

class GuidUtil:
    def __init__(self): ...
    @staticmethod
    def emptyGuid() -> java.util.UUID: ...

class LittleEndianBitConverter:
    @staticmethod
    def ToUInt16(byteArray: typing.Union[typing.List[int], jpype.JArray, bytes], int: int) -> int: ...
    @typing.overload
    @staticmethod
    def getBytes(int: int) -> typing.MutableSequence[int]: ...
    @typing.overload
    @staticmethod
    def getBytes(long: int) -> typing.MutableSequence[int]: ...
    @staticmethod
    def toInt16(byteArray: typing.Union[typing.List[int], jpype.JArray, bytes], int: int) -> int: ...
    @staticmethod
    def toInt32(byteArray: typing.Union[typing.List[int], jpype.JArray, bytes], int: int) -> int: ...
    @staticmethod
    def toUInt32(byteArray: typing.Union[typing.List[int], jpype.JArray, bytes], int: int) -> int: ...
    @staticmethod
    def toUInt64(byteArray: typing.Union[typing.List[int], jpype.JArray, bytes], int: int) -> int: ...

class SequenceNumberGenerator:
    MAXTOKENVALUE: typing.ClassVar[float] = ...
    MAXSUBREQUESTID: typing.ClassVar[int] = ...
    def __init__(self): ...
    @staticmethod
    def GetCurrentSerialNumber() -> int: ...
    @staticmethod
    def getCurrentFSSHTTPBSubRequestID() -> int: ...
    @staticmethod
    def getCurrentToken() -> int: ...

class UuidUtils:
    def __init__(self): ...
    @staticmethod
    def asBytes(uUID: java.util.UUID) -> typing.MutableSequence[int]: ...
    @staticmethod
    def asUuid(byteArray: typing.Union[typing.List[int], jpype.JArray, bytes]) -> java.util.UUID: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.apache.tika.parser.microsoft.onenote.fsshttpb.util")``.

    Bit: typing.Type[Bit]
    BitConverter: typing.Type[BitConverter]
    BitReader: typing.Type[BitReader]
    BitWriter: typing.Type[BitWriter]
    ByteUtil: typing.Type[ByteUtil]
    DataElementUtils: typing.Type[DataElementUtils]
    GuidUtil: typing.Type[GuidUtil]
    LittleEndianBitConverter: typing.Type[LittleEndianBitConverter]
    SequenceNumberGenerator: typing.Type[SequenceNumberGenerator]
    UuidUtils: typing.Type[UuidUtils]
