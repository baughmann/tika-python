
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.io
import java.lang
import java.util
import jpype
import org.apache.tika.config
import org.apache.tika.sax
import typing



class LanguageConfidence(java.lang.Enum['LanguageConfidence']):
    HIGH: typing.ClassVar['LanguageConfidence'] = ...
    MEDIUM: typing.ClassVar['LanguageConfidence'] = ...
    LOW: typing.ClassVar['LanguageConfidence'] = ...
    NONE: typing.ClassVar['LanguageConfidence'] = ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'LanguageConfidence': ...
    @staticmethod
    def values() -> typing.MutableSequence['LanguageConfidence']: ...

class LanguageDetector:
    def __init__(self): ...
    @typing.overload
    def addText(self, charArray: typing.Union[typing.List[str], jpype.JArray], int: int, int2: int) -> None: ...
    @typing.overload
    def addText(self, charSequence: typing.Union[java.lang.CharSequence, str]) -> None: ...
    @typing.overload
    def detect(self) -> 'LanguageResult': ...
    @typing.overload
    def detect(self, charSequence: typing.Union[java.lang.CharSequence, str]) -> 'LanguageResult': ...
    @typing.overload
    def detectAll(self) -> java.util.List['LanguageResult']: ...
    @typing.overload
    def detectAll(self, string: str) -> java.util.List['LanguageResult']: ...
    @staticmethod
    def getDefaultLanguageDetector() -> 'LanguageDetector': ...
    @typing.overload
    @staticmethod
    def getLanguageDetectors() -> java.util.List['LanguageDetector']: ...
    @typing.overload
    @staticmethod
    def getLanguageDetectors(serviceLoader: org.apache.tika.config.ServiceLoader) -> java.util.List['LanguageDetector']: ...
    def hasEnoughText(self) -> bool: ...
    def hasModel(self, string: str) -> bool: ...
    def isMixedLanguages(self) -> bool: ...
    def isShortText(self) -> bool: ...
    @typing.overload
    def loadModels(self) -> 'LanguageDetector': ...
    @typing.overload
    def loadModels(self, set: java.util.Set[str]) -> 'LanguageDetector': ...
    def reset(self) -> None: ...
    def setMixedLanguages(self, boolean: bool) -> 'LanguageDetector': ...
    def setPriors(self, map: typing.Union[java.util.Map[str, float], typing.Mapping[str, float]]) -> 'LanguageDetector': ...
    def setShortText(self, boolean: bool) -> 'LanguageDetector': ...

class LanguageHandler(org.apache.tika.sax.WriteOutContentHandler):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, languageDetector: LanguageDetector): ...
    @typing.overload
    def __init__(self, languageWriter: 'LanguageWriter'): ...
    def getDetector(self) -> LanguageDetector: ...
    def getLanguage(self) -> 'LanguageResult': ...

class LanguageNames:
    def __init__(self): ...
    @typing.overload
    def equals(self, object: typing.Any) -> bool: ...
    @typing.overload
    @staticmethod
    def equals(string: str, string2: str) -> bool: ...
    @staticmethod
    def getMacroLanguage(string: str) -> str: ...
    @staticmethod
    def hasMacroLanguage(string: str) -> bool: ...
    @staticmethod
    def isMacroLanguage(string: str) -> bool: ...
    @staticmethod
    def makeName(string: str, string2: str, string3: str) -> str: ...
    @staticmethod
    def normalizeName(string: str) -> str: ...

class LanguageResult:
    NULL: typing.ClassVar['LanguageResult'] = ...
    def __init__(self, string: str, languageConfidence: LanguageConfidence, float: float): ...
    def getConfidence(self) -> LanguageConfidence: ...
    def getLanguage(self) -> str: ...
    def getRawScore(self) -> float: ...
    def isLanguage(self, string: str) -> bool: ...
    def isReasonablyCertain(self) -> bool: ...
    def isUnknown(self) -> bool: ...
    def toString(self) -> str: ...

class LanguageWriter(java.io.Writer):
    def __init__(self, languageDetector: LanguageDetector): ...
    def close(self) -> None: ...
    def flush(self) -> None: ...
    def getDetector(self) -> LanguageDetector: ...
    def getLanguage(self) -> LanguageResult: ...
    def reset(self) -> None: ...
    @typing.overload
    def write(self, charArray: typing.Union[typing.List[str], jpype.JArray]) -> None: ...
    @typing.overload
    def write(self, int: int) -> None: ...
    @typing.overload
    def write(self, string: str) -> None: ...
    @typing.overload
    def write(self, string: str, int: int, int2: int) -> None: ...
    @typing.overload
    def write(self, charArray: typing.Union[typing.List[str], jpype.JArray], int: int, int2: int) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.apache.tika.language.detect")``.

    LanguageConfidence: typing.Type[LanguageConfidence]
    LanguageDetector: typing.Type[LanguageDetector]
    LanguageHandler: typing.Type[LanguageHandler]
    LanguageNames: typing.Type[LanguageNames]
    LanguageResult: typing.Type[LanguageResult]
    LanguageWriter: typing.Type[LanguageWriter]
