
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.io
import java.util
import org
import org.apache.commons.compress.archivers.zip
import org.apache.tika.config
import org.apache.tika.detect
import org.apache.tika.io
import org.apache.tika.metadata
import org.apache.tika.mime
import typing



class CompressorConstants:
    BROTLI: typing.ClassVar[org.apache.tika.mime.MediaType] = ...
    LZ4_BLOCK: typing.ClassVar[org.apache.tika.mime.MediaType] = ...
    SNAPPY_RAW: typing.ClassVar[org.apache.tika.mime.MediaType] = ...
    BZIP: typing.ClassVar[org.apache.tika.mime.MediaType] = ...
    BZIP2: typing.ClassVar[org.apache.tika.mime.MediaType] = ...
    GZIP: typing.ClassVar[org.apache.tika.mime.MediaType] = ...
    GZIP_ALT: typing.ClassVar[org.apache.tika.mime.MediaType] = ...
    COMPRESS: typing.ClassVar[org.apache.tika.mime.MediaType] = ...
    XZ: typing.ClassVar[org.apache.tika.mime.MediaType] = ...
    PACK: typing.ClassVar[org.apache.tika.mime.MediaType] = ...
    SNAPPY_FRAMED: typing.ClassVar[org.apache.tika.mime.MediaType] = ...
    ZLIB: typing.ClassVar[org.apache.tika.mime.MediaType] = ...
    LZMA: typing.ClassVar[org.apache.tika.mime.MediaType] = ...
    LZ4_FRAMED: typing.ClassVar[org.apache.tika.mime.MediaType] = ...
    ZSTD: typing.ClassVar[org.apache.tika.mime.MediaType] = ...
    DEFLATE64: typing.ClassVar[org.apache.tika.mime.MediaType] = ...
    def __init__(self): ...
    @staticmethod
    def getMediaType(string: str) -> org.apache.tika.mime.MediaType: ...

class DefaultZipContainerDetector(org.apache.tika.detect.Detector):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, list: java.util.List['ZipContainerDetector']): ...
    @typing.overload
    def __init__(self, serviceLoader: org.apache.tika.config.ServiceLoader): ...
    def detect(self, inputStream: java.io.InputStream, metadata: org.apache.tika.metadata.Metadata) -> org.apache.tika.mime.MediaType: ...
    def getMarkLimit(self) -> int: ...
    def setMarkLimit(self, int: int) -> None: ...

class DeprecatedZipContainerDetector:
    def __init__(self): ...

class PackageConstants:
    ZIP: typing.ClassVar[org.apache.tika.mime.MediaType] = ...
    JAR: typing.ClassVar[org.apache.tika.mime.MediaType] = ...
    AR: typing.ClassVar[org.apache.tika.mime.MediaType] = ...
    ARJ: typing.ClassVar[org.apache.tika.mime.MediaType] = ...
    CPIO: typing.ClassVar[org.apache.tika.mime.MediaType] = ...
    DUMP: typing.ClassVar[org.apache.tika.mime.MediaType] = ...
    TAR: typing.ClassVar[org.apache.tika.mime.MediaType] = ...
    SEVENZ: typing.ClassVar[org.apache.tika.mime.MediaType] = ...
    TIKA_OOXML: typing.ClassVar[org.apache.tika.mime.MediaType] = ...
    GTAR: typing.ClassVar[org.apache.tika.mime.MediaType] = ...
    KMZ: typing.ClassVar[org.apache.tika.mime.MediaType] = ...
    def __init__(self): ...
    @staticmethod
    def getMediaType(string: str) -> org.apache.tika.mime.MediaType: ...

class StreamingDetectContext:
    def __init__(self): ...
    _get_0__T = typing.TypeVar('_get_0__T')  # <T>
    _get_1__T = typing.TypeVar('_get_1__T')  # <T>
    @typing.overload
    def get(self, class_: typing.Type[_get_0__T]) -> _get_0__T: ...
    @typing.overload
    def get(self, class_: typing.Type[_get_1__T], t: _get_1__T) -> _get_1__T: ...
    def remove(self, class_: typing.Type) -> None: ...
    _set__T = typing.TypeVar('_set__T')  # <T>
    def set(self, class_: typing.Type[_set__T], t: _set__T) -> None: ...

class ZipContainerDetector(java.io.Serializable):
    def detect(self, zipFile: org.apache.commons.compress.archivers.zip.ZipFile, tikaInputStream: org.apache.tika.io.TikaInputStream) -> org.apache.tika.mime.MediaType: ...
    def streamingDetectFinal(self, streamingDetectContext: StreamingDetectContext) -> org.apache.tika.mime.MediaType: ...
    def streamingDetectUpdate(self, zipArchiveEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry, inputStream: java.io.InputStream, streamingDetectContext: StreamingDetectContext) -> org.apache.tika.mime.MediaType: ...

class FrictionlessPackageDetector(ZipContainerDetector):
    def __init__(self): ...
    def detect(self, zipFile: org.apache.commons.compress.archivers.zip.ZipFile, tikaInputStream: org.apache.tika.io.TikaInputStream) -> org.apache.tika.mime.MediaType: ...
    def streamingDetectFinal(self, streamingDetectContext: StreamingDetectContext) -> org.apache.tika.mime.MediaType: ...
    def streamingDetectUpdate(self, zipArchiveEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry, inputStream: java.io.InputStream, streamingDetectContext: StreamingDetectContext) -> org.apache.tika.mime.MediaType: ...

class IPADetector(ZipContainerDetector):
    def __init__(self): ...
    def detect(self, zipFile: org.apache.commons.compress.archivers.zip.ZipFile, tikaInputStream: org.apache.tika.io.TikaInputStream) -> org.apache.tika.mime.MediaType: ...
    def streamingDetectFinal(self, streamingDetectContext: StreamingDetectContext) -> org.apache.tika.mime.MediaType: ...
    def streamingDetectUpdate(self, zipArchiveEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry, inputStream: java.io.InputStream, streamingDetectContext: StreamingDetectContext) -> org.apache.tika.mime.MediaType: ...

class JarDetector(ZipContainerDetector):
    def __init__(self): ...
    def detect(self, zipFile: org.apache.commons.compress.archivers.zip.ZipFile, tikaInputStream: org.apache.tika.io.TikaInputStream) -> org.apache.tika.mime.MediaType: ...
    def streamingDetectFinal(self, streamingDetectContext: StreamingDetectContext) -> org.apache.tika.mime.MediaType: ...
    def streamingDetectUpdate(self, zipArchiveEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry, inputStream: java.io.InputStream, streamingDetectContext: StreamingDetectContext) -> org.apache.tika.mime.MediaType: ...

class KMZDetector(ZipContainerDetector):
    def __init__(self): ...
    def detect(self, zipFile: org.apache.commons.compress.archivers.zip.ZipFile, tikaInputStream: org.apache.tika.io.TikaInputStream) -> org.apache.tika.mime.MediaType: ...
    def streamingDetectFinal(self, streamingDetectContext: StreamingDetectContext) -> org.apache.tika.mime.MediaType: ...
    def streamingDetectUpdate(self, zipArchiveEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry, inputStream: java.io.InputStream, streamingDetectContext: StreamingDetectContext) -> org.apache.tika.mime.MediaType: ...

class OpenDocumentDetector(ZipContainerDetector):
    def __init__(self): ...
    def detect(self, zipFile: org.apache.commons.compress.archivers.zip.ZipFile, tikaInputStream: org.apache.tika.io.TikaInputStream) -> org.apache.tika.mime.MediaType: ...
    def streamingDetectFinal(self, streamingDetectContext: StreamingDetectContext) -> org.apache.tika.mime.MediaType: ...
    def streamingDetectUpdate(self, zipArchiveEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry, inputStream: java.io.InputStream, streamingDetectContext: StreamingDetectContext) -> org.apache.tika.mime.MediaType: ...

class StarOfficeDetector(ZipContainerDetector):
    def __init__(self): ...
    def detect(self, zipFile: org.apache.commons.compress.archivers.zip.ZipFile, tikaInputStream: org.apache.tika.io.TikaInputStream) -> org.apache.tika.mime.MediaType: ...
    def streamingDetectFinal(self, streamingDetectContext: StreamingDetectContext) -> org.apache.tika.mime.MediaType: ...
    def streamingDetectUpdate(self, zipArchiveEntry: org.apache.commons.compress.archivers.zip.ZipArchiveEntry, inputStream: java.io.InputStream, streamingDetectContext: StreamingDetectContext) -> org.apache.tika.mime.MediaType: ...

class StreamingZipContainerDetector(DefaultZipContainerDetector):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, list: java.util.List[ZipContainerDetector]): ...
    @typing.overload
    def __init__(self, serviceLoader: org.apache.tika.config.ServiceLoader): ...
    def detect(self, inputStream: java.io.InputStream, metadata: org.apache.tika.metadata.Metadata) -> org.apache.tika.mime.MediaType: ...

class DeprecatedStreamingZipContainerDetector(org.apache.tika.detect.zip.ZipContainerDetectorBase, org.apache.tika.detect.Detector):
    def __init__(self): ...
    def detect(self, inputStream: java.io.InputStream, metadata: org.apache.tika.metadata.Metadata) -> org.apache.tika.mime.MediaType: ...

class ZipContainerDetectorBase: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.apache.tika.detect.zip")``.

    CompressorConstants: typing.Type[CompressorConstants]
    DefaultZipContainerDetector: typing.Type[DefaultZipContainerDetector]
    DeprecatedStreamingZipContainerDetector: typing.Type[DeprecatedStreamingZipContainerDetector]
    DeprecatedZipContainerDetector: typing.Type[DeprecatedZipContainerDetector]
    FrictionlessPackageDetector: typing.Type[FrictionlessPackageDetector]
    IPADetector: typing.Type[IPADetector]
    JarDetector: typing.Type[JarDetector]
    KMZDetector: typing.Type[KMZDetector]
    OpenDocumentDetector: typing.Type[OpenDocumentDetector]
    PackageConstants: typing.Type[PackageConstants]
    StarOfficeDetector: typing.Type[StarOfficeDetector]
    StreamingDetectContext: typing.Type[StreamingDetectContext]
    StreamingZipContainerDetector: typing.Type[StreamingZipContainerDetector]
    ZipContainerDetector: typing.Type[ZipContainerDetector]
    ZipContainerDetectorBase: typing.Type[ZipContainerDetectorBase]
