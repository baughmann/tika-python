
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.awt
import java.io
import java.lang
import java.util
import org.apache.tika.config
import org.apache.tika.metadata
import org.apache.tika.mime
import org.apache.tika.parser
import org.apache.tika.parser.ocr.tess4j
import org.xml.sax
import typing



class TesseractOCRConfig(java.io.Serializable):
    def __init__(self): ...
    def addOtherTesseractConfig(self, string: str, string2: str) -> None: ...
    def cloneAndUpdate(self, tesseractOCRConfig: 'TesseractOCRConfig') -> 'TesseractOCRConfig': ...
    def getColorspace(self) -> str: ...
    def getDensity(self) -> int: ...
    def getDepth(self) -> int: ...
    def getFilter(self) -> str: ...
    @staticmethod
    def getLangs(string: str, set: java.util.Set[str], set2: java.util.Set[str]) -> None: ...
    def getLanguage(self) -> str: ...
    def getMaxFileSizeToOcr(self) -> int: ...
    def getMinFileSizeToOcr(self) -> int: ...
    def getOtherTesseractConfig(self) -> java.util.Map[str, str]: ...
    def getOutputType(self) -> 'TesseractOCRConfig.OUTPUT_TYPE': ...
    def getPageSegMode(self) -> str: ...
    def getPageSeparator(self) -> str: ...
    def getResize(self) -> int: ...
    def getTimeoutSeconds(self) -> int: ...
    def isApplyRotation(self) -> bool: ...
    def isEnableImagePreprocessing(self) -> bool: ...
    def isInlineContent(self) -> bool: ...
    def isPreserveInterwordSpacing(self) -> bool: ...
    def isSkipOcr(self) -> bool: ...
    def setApplyRotation(self, boolean: bool) -> None: ...
    def setColorspace(self, string: str) -> None: ...
    def setDensity(self, int: int) -> None: ...
    def setDepth(self, int: int) -> None: ...
    def setEnableImagePreprocessing(self, boolean: bool) -> None: ...
    def setFilter(self, string: str) -> None: ...
    def setInlineContent(self, boolean: bool) -> None: ...
    def setLanguage(self, string: str) -> None: ...
    def setMaxFileSizeToOcr(self, long: int) -> None: ...
    def setMinFileSizeToOcr(self, long: int) -> None: ...
    @typing.overload
    def setOutputType(self, string: str) -> None: ...
    @typing.overload
    def setOutputType(self, oUTPUT_TYPE: 'TesseractOCRConfig.OUTPUT_TYPE') -> None: ...
    def setPageSegMode(self, string: str) -> None: ...
    def setPageSeparator(self, string: str) -> None: ...
    def setPreserveInterwordSpacing(self, boolean: bool) -> None: ...
    def setResize(self, int: int) -> None: ...
    def setSkipOcr(self, boolean: bool) -> None: ...
    def setTimeoutSeconds(self, int: int) -> None: ...
    def setTrustedPageSeparator(self, string: str) -> None: ...
    class OUTPUT_TYPE(java.lang.Enum['TesseractOCRConfig.OUTPUT_TYPE']):
        TXT: typing.ClassVar['TesseractOCRConfig.OUTPUT_TYPE'] = ...
        HOCR: typing.ClassVar['TesseractOCRConfig.OUTPUT_TYPE'] = ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'TesseractOCRConfig.OUTPUT_TYPE': ...
        @staticmethod
        def values() -> typing.MutableSequence['TesseractOCRConfig.OUTPUT_TYPE']: ...

class TesseractOCRParser(org.apache.tika.parser.AbstractExternalProcessParser, org.apache.tika.config.Initializable):
    TESS_META: typing.ClassVar[str] = ...
    IMAGE_ROTATION: typing.ClassVar[org.apache.tika.metadata.Property] = ...
    IMAGE_MAGICK: typing.ClassVar[org.apache.tika.metadata.Property] = ...
    PSM0_PAGE_NUMBER: typing.ClassVar[org.apache.tika.metadata.Property] = ...
    PSM0_ORIENTATION: typing.ClassVar[org.apache.tika.metadata.Property] = ...
    PSM0_ROTATE: typing.ClassVar[org.apache.tika.metadata.Property] = ...
    PSM0_ORIENTATION_CONFIDENCE: typing.ClassVar[org.apache.tika.metadata.Property] = ...
    PSM0_SCRIPT: typing.ClassVar[org.apache.tika.metadata.Property] = ...
    PSM0_SCRIPT_CONFIDENCE: typing.ClassVar[org.apache.tika.metadata.Property] = ...
    def __init__(self): ...
    def checkInitialization(self, initializableProblemHandler: typing.Union[org.apache.tika.config.InitializableProblemHandler, typing.Callable]) -> None: ...
    def getColorspace(self) -> str: ...
    def getDefaultConfig(self) -> TesseractOCRConfig: ...
    def getDensity(self) -> int: ...
    def getDepth(self) -> int: ...
    def getFilter(self) -> str: ...
    def getImageMagickPath(self) -> str: ...
    @staticmethod
    def getImageMagickProg() -> str: ...
    def getLangs(self) -> java.util.Set[str]: ...
    def getLanguage(self) -> str: ...
    def getMaxFileSizeToOcr(self) -> int: ...
    def getMinFileSizeToOcr(self) -> int: ...
    def getOtherTesseractSettings(self) -> java.util.List[str]: ...
    def getOutputType(self) -> str: ...
    def getPageSegMode(self) -> str: ...
    def getResize(self) -> int: ...
    def getSupportedTypes(self, parseContext: org.apache.tika.parser.ParseContext) -> java.util.Set[org.apache.tika.mime.MediaType]: ...
    def getTessdataPath(self) -> str: ...
    def getTesseractPath(self) -> str: ...
    @staticmethod
    def getTesseractProg() -> str: ...
    def getTimeout(self) -> int: ...
    def hasTesseract(self) -> bool: ...
    def initialize(self, map: typing.Union[java.util.Map[str, org.apache.tika.config.Param], typing.Mapping[str, org.apache.tika.config.Param]]) -> None: ...
    def isApplyRotation(self) -> bool: ...
    def isEnableImagePreprocessing(self) -> bool: ...
    def isInlineContent(self) -> bool: ...
    def isPreloadLangs(self) -> bool: ...
    def isPreserveInterwordSpacing(self) -> bool: ...
    def isSkipOCR(self) -> bool: ...
    @typing.overload
    def parse(self, image: java.awt.Image, contentHandler: org.xml.sax.ContentHandler, metadata: org.apache.tika.metadata.Metadata, parseContext: org.apache.tika.parser.ParseContext) -> None: ...
    @typing.overload
    def parse(self, inputStream: java.io.InputStream, contentHandler: org.xml.sax.ContentHandler, metadata: org.apache.tika.metadata.Metadata, parseContext: org.apache.tika.parser.ParseContext) -> None: ...
    def setApplyRotation(self, boolean: bool) -> None: ...
    def setColorspace(self, string: str) -> None: ...
    def setDensity(self, int: int) -> None: ...
    def setDepth(self, int: int) -> None: ...
    def setEnableImagePreprocessing(self, boolean: bool) -> None: ...
    def setFilter(self, string: str) -> None: ...
    def setImageMagickPath(self, string: str) -> None: ...
    def setInlineContent(self, boolean: bool) -> None: ...
    def setLanguage(self, string: str) -> None: ...
    def setMaxFileSizeToOcr(self, long: int) -> None: ...
    def setMinFileSizeToOcr(self, long: int) -> None: ...
    def setOtherTesseractSettings(self, list: java.util.List[str]) -> None: ...
    def setOutputType(self, string: str) -> None: ...
    def setPageSegMode(self, string: str) -> None: ...
    def setPreloadLangs(self, boolean: bool) -> None: ...
    def setPreserveInterwordSpacing(self, boolean: bool) -> None: ...
    def setResize(self, int: int) -> None: ...
    def setSkipOCR(self, boolean: bool) -> None: ...
    def setTessdataPath(self, string: str) -> None: ...
    def setTesseractPath(self, string: str) -> None: ...
    def setTimeout(self, int: int) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.apache.tika.parser.ocr")``.

    TesseractOCRConfig: typing.Type[TesseractOCRConfig]
    TesseractOCRParser: typing.Type[TesseractOCRParser]
    tess4j: org.apache.tika.parser.ocr.tess4j.__module_protocol__
