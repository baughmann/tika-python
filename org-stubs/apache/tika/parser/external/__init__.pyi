
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.io
import java.net
import java.util
import java.util.regex
import jpype
import org.apache.tika.config
import org.apache.tika.metadata
import org.apache.tika.mime
import org.apache.tika.parser
import org.w3c.dom
import org.xml.sax
import typing



class CompositeExternalParser(org.apache.tika.parser.CompositeParser):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, mediaTypeRegistry: org.apache.tika.mime.MediaTypeRegistry): ...

class ExternalParser(org.apache.tika.parser.Parser):
    INPUT_FILE_TOKEN: typing.ClassVar[str] = ...
    OUTPUT_FILE_TOKEN: typing.ClassVar[str] = ...
    def __init__(self): ...
    @typing.overload
    @staticmethod
    def check(string: str, *int: int) -> bool: ...
    @typing.overload
    @staticmethod
    def check(stringArray: typing.Union[typing.List[str], jpype.JArray], *int: int) -> bool: ...
    def getCommand(self) -> typing.MutableSequence[str]: ...
    def getIgnoredLineConsumer(self) -> 'ExternalParser.LineConsumer': ...
    def getMetadataExtractionPatterns(self) -> java.util.Map[java.util.regex.Pattern, str]: ...
    @typing.overload
    def getSupportedTypes(self) -> java.util.Set[org.apache.tika.mime.MediaType]: ...
    @typing.overload
    def getSupportedTypes(self, parseContext: org.apache.tika.parser.ParseContext) -> java.util.Set[org.apache.tika.mime.MediaType]: ...
    def parse(self, inputStream: java.io.InputStream, contentHandler: org.xml.sax.ContentHandler, metadata: org.apache.tika.metadata.Metadata, parseContext: org.apache.tika.parser.ParseContext) -> None: ...
    def setCommand(self, *string: str) -> None: ...
    def setIgnoredLineConsumer(self, lineConsumer: typing.Union['ExternalParser.LineConsumer', typing.Callable]) -> None: ...
    def setMetadataExtractionPatterns(self, map: typing.Union[java.util.Map[java.util.regex.Pattern, str], typing.Mapping[java.util.regex.Pattern, str]]) -> None: ...
    def setSupportedTypes(self, set: java.util.Set[org.apache.tika.mime.MediaType]) -> None: ...
    class LineConsumer(java.io.Serializable):
        NULL: typing.ClassVar['ExternalParser.LineConsumer'] = ...
        def consume(self, string: str) -> None: ...

class ExternalParsersConfigReaderMetKeys:
    EXTERNAL_PARSERS_TAG: typing.ClassVar[str] = ...
    PARSER_TAG: typing.ClassVar[str] = ...
    COMMAND_TAG: typing.ClassVar[str] = ...
    CHECK_TAG: typing.ClassVar[str] = ...
    ERROR_CODES_TAG: typing.ClassVar[str] = ...
    MIMETYPES_TAG: typing.ClassVar[str] = ...
    MIMETYPE_TAG: typing.ClassVar[str] = ...
    METADATA_TAG: typing.ClassVar[str] = ...
    METADATA_MATCH_TAG: typing.ClassVar[str] = ...
    METADATA_KEY_ATTR: typing.ClassVar[str] = ...

class ExternalParsersFactory:
    def __init__(self): ...
    @typing.overload
    @staticmethod
    def attachExternalParsers(list: java.util.List[ExternalParser], tikaConfig: org.apache.tika.config.TikaConfig) -> None: ...
    @typing.overload
    @staticmethod
    def attachExternalParsers(tikaConfig: org.apache.tika.config.TikaConfig) -> None: ...
    @typing.overload
    @staticmethod
    def create() -> java.util.List[ExternalParser]: ...
    @typing.overload
    @staticmethod
    def create(string: str, serviceLoader: org.apache.tika.config.ServiceLoader) -> java.util.List[ExternalParser]: ...
    @typing.overload
    @staticmethod
    def create(*uRL: java.net.URL) -> java.util.List[ExternalParser]: ...
    @typing.overload
    @staticmethod
    def create(serviceLoader: org.apache.tika.config.ServiceLoader) -> java.util.List[ExternalParser]: ...

class ExternalParsersConfigReader(ExternalParsersConfigReaderMetKeys):
    def __init__(self): ...
    @typing.overload
    @staticmethod
    def read(inputStream: java.io.InputStream) -> java.util.List[ExternalParser]: ...
    @typing.overload
    @staticmethod
    def read(document: org.w3c.dom.Document) -> java.util.List[ExternalParser]: ...
    @typing.overload
    @staticmethod
    def read(element: org.w3c.dom.Element) -> java.util.List[ExternalParser]: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.apache.tika.parser.external")``.

    CompositeExternalParser: typing.Type[CompositeExternalParser]
    ExternalParser: typing.Type[ExternalParser]
    ExternalParsersConfigReader: typing.Type[ExternalParsersConfigReader]
    ExternalParsersConfigReaderMetKeys: typing.Type[ExternalParsersConfigReaderMetKeys]
    ExternalParsersFactory: typing.Type[ExternalParsersFactory]
