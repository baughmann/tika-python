
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import com.fasterxml.jackson.core
import com.fasterxml.jackson.databind
import java.io
import java.lang
import java.util
import org.apache.tika.exception
import org.apache.tika.metadata
import org.apache.tika.parser
import org.apache.tika.serialization.pipes
import typing



class JsonMetadata:
    def __init__(self): ...
    @staticmethod
    def fromJson(reader: java.io.Reader) -> org.apache.tika.metadata.Metadata: ...
    @staticmethod
    def readMetadataObject(jsonParser: com.fasterxml.jackson.core.JsonParser) -> org.apache.tika.metadata.Metadata: ...
    @staticmethod
    def setPrettyPrinting(boolean: bool) -> None: ...
    @staticmethod
    def toJson(metadata: org.apache.tika.metadata.Metadata, writer: java.io.Writer) -> None: ...
    @staticmethod
    def writeMetadataObject(metadata: org.apache.tika.metadata.Metadata, jsonGenerator: com.fasterxml.jackson.core.JsonGenerator, boolean: bool) -> None: ...

class JsonMetadataList:
    def __init__(self): ...
    @staticmethod
    def fromJson(reader: java.io.Reader) -> java.util.List[org.apache.tika.metadata.Metadata]: ...
    @staticmethod
    def setPrettyPrinting(boolean: bool) -> None: ...
    @typing.overload
    @staticmethod
    def toJson(list: java.util.List[org.apache.tika.metadata.Metadata], writer: java.io.Writer) -> None: ...
    @typing.overload
    @staticmethod
    def toJson(list: java.util.List[org.apache.tika.metadata.Metadata], writer: java.io.Writer, boolean: bool) -> None: ...

class JsonStreamingSerializer(java.lang.AutoCloseable):
    def __init__(self, writer: java.io.Writer): ...
    def add(self, metadata: org.apache.tika.metadata.Metadata) -> None: ...
    def close(self) -> None: ...

class ParseContextDeserializer(com.fasterxml.jackson.databind.JsonDeserializer[org.apache.tika.parser.ParseContext]):
    def __init__(self): ...
    @typing.overload
    def deserialize(self, jsonParser: com.fasterxml.jackson.core.JsonParser, deserializationContext: com.fasterxml.jackson.databind.DeserializationContext, t: typing.Any) -> typing.Any: ...
    @typing.overload
    def deserialize(self, jsonParser: com.fasterxml.jackson.core.JsonParser, deserializationContext: com.fasterxml.jackson.databind.DeserializationContext) -> org.apache.tika.parser.ParseContext: ...
    @staticmethod
    def readParseContext(jsonNode: com.fasterxml.jackson.databind.JsonNode) -> org.apache.tika.parser.ParseContext: ...

class ParseContextSerializer(com.fasterxml.jackson.databind.JsonSerializer[org.apache.tika.parser.ParseContext]):
    PARSE_CONTEXT: typing.ClassVar[str] = ...
    def __init__(self): ...
    def serialize(self, parseContext: org.apache.tika.parser.ParseContext, jsonGenerator: com.fasterxml.jackson.core.JsonGenerator, serializerProvider: com.fasterxml.jackson.databind.SerializerProvider) -> None: ...

class PrettyMetadataKeyComparator(java.util.Comparator[str]):
    def __init__(self): ...
    def compare(self, string: str, string2: str) -> int: ...

class TikaJsonDeserializer:
    def __init__(self): ...
    _deserialize__T = typing.TypeVar('_deserialize__T')  # <T>
    @staticmethod
    def deserialize(class_: typing.Type[_deserialize__T], jsonNode: com.fasterxml.jackson.databind.JsonNode) -> _deserialize__T: ...
    @staticmethod
    def deserializeObject(jsonNode: com.fasterxml.jackson.databind.JsonNode) -> java.util.Optional: ...

class TikaJsonSerializer:
    INSTANTIATED_CLASS_KEY: typing.ClassVar[str] = ...
    def __init__(self): ...
    @typing.overload
    @staticmethod
    def serialize(object: typing.Any, jsonGenerator: com.fasterxml.jackson.core.JsonGenerator) -> None: ...
    @typing.overload
    @staticmethod
    def serialize(string: str, object: typing.Any, jsonGenerator: com.fasterxml.jackson.core.JsonGenerator) -> None: ...
    @staticmethod
    def serializeObject(string: str, object: typing.Any, jsonGenerator: com.fasterxml.jackson.core.JsonGenerator) -> None: ...

class TikaSerializationException(org.apache.tika.exception.TikaException):
    @typing.overload
    def __init__(self, string: str): ...
    @typing.overload
    def __init__(self, string: str, throwable: java.lang.Throwable): ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.apache.tika.serialization")``.

    JsonMetadata: typing.Type[JsonMetadata]
    JsonMetadataList: typing.Type[JsonMetadataList]
    JsonStreamingSerializer: typing.Type[JsonStreamingSerializer]
    ParseContextDeserializer: typing.Type[ParseContextDeserializer]
    ParseContextSerializer: typing.Type[ParseContextSerializer]
    PrettyMetadataKeyComparator: typing.Type[PrettyMetadataKeyComparator]
    TikaJsonDeserializer: typing.Type[TikaJsonDeserializer]
    TikaJsonSerializer: typing.Type[TikaJsonSerializer]
    TikaSerializationException: typing.Type[TikaSerializationException]
    pipes: org.apache.tika.serialization.pipes.__module_protocol__
