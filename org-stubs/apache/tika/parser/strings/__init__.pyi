
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.io
import java.lang
import java.util
import org.apache.tika.config
import org.apache.tika.metadata
import org.apache.tika.mime
import org.apache.tika.parser
import org.xml.sax
import typing



class Latin1StringsParser(org.apache.tika.parser.Parser):
    def __init__(self): ...
    def getMinSize(self) -> int: ...
    def getSupportedTypes(self, parseContext: org.apache.tika.parser.ParseContext) -> java.util.Set[org.apache.tika.mime.MediaType]: ...
    def parse(self, inputStream: java.io.InputStream, contentHandler: org.xml.sax.ContentHandler, metadata: org.apache.tika.metadata.Metadata, parseContext: org.apache.tika.parser.ParseContext) -> None: ...
    def setMinSize(self, int: int) -> None: ...

class StringsConfig(java.io.Serializable):
    def __init__(self): ...
    def getEncoding(self) -> 'StringsEncoding': ...
    def getMinLength(self) -> int: ...
    def getTimeoutSeconds(self) -> int: ...
    def setEncoding(self, stringsEncoding: 'StringsEncoding') -> None: ...
    def setMinLength(self, int: int) -> None: ...
    def setTimeoutSeconds(self, int: int) -> None: ...

class StringsEncoding(java.lang.Enum['StringsEncoding']):
    SINGLE_7_BIT: typing.ClassVar['StringsEncoding'] = ...
    SINGLE_8_BIT: typing.ClassVar['StringsEncoding'] = ...
    BIGENDIAN_16_BIT: typing.ClassVar['StringsEncoding'] = ...
    LITTLEENDIAN_16_BIT: typing.ClassVar['StringsEncoding'] = ...
    BIGENDIAN_32_BIT: typing.ClassVar['StringsEncoding'] = ...
    LITTLEENDIAN_32_BIT: typing.ClassVar['StringsEncoding'] = ...
    def get(self) -> str: ...
    def toString(self) -> str: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'StringsEncoding': ...
    @staticmethod
    def values() -> typing.MutableSequence['StringsEncoding']: ...

class StringsParser(org.apache.tika.parser.Parser, org.apache.tika.config.Initializable):
    def __init__(self): ...
    def checkInitialization(self, initializableProblemHandler: typing.Union[org.apache.tika.config.InitializableProblemHandler, typing.Callable]) -> None: ...
    def getMinLength(self) -> int: ...
    def getStringsEncoding(self) -> StringsEncoding: ...
    def getStringsPath(self) -> str: ...
    @staticmethod
    def getStringsProg() -> str: ...
    def getSupportedTypes(self, parseContext: org.apache.tika.parser.ParseContext) -> java.util.Set[org.apache.tika.mime.MediaType]: ...
    def getTimeoutSeconds(self) -> int: ...
    def initialize(self, map: typing.Union[java.util.Map[str, org.apache.tika.config.Param], typing.Mapping[str, org.apache.tika.config.Param]]) -> None: ...
    def parse(self, inputStream: java.io.InputStream, contentHandler: org.xml.sax.ContentHandler, metadata: org.apache.tika.metadata.Metadata, parseContext: org.apache.tika.parser.ParseContext) -> None: ...
    def setEncoding(self, string: str) -> None: ...
    def setMinLength(self, int: int) -> None: ...
    def setStringsPath(self, string: str) -> None: ...
    def setTimeoutSeconds(self, int: int) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.apache.tika.parser.strings")``.

    Latin1StringsParser: typing.Type[Latin1StringsParser]
    StringsConfig: typing.Type[StringsConfig]
    StringsEncoding: typing.Type[StringsEncoding]
    StringsParser: typing.Type[StringsParser]
