
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.io
import java.util
import org.apache.tika.config
import org.apache.tika.metadata
import org.w3c.dom
import typing



class MetadataFilter(org.apache.tika.config.ConfigBase, java.io.Serializable):
    def __init__(self): ...
    def filter(self, metadata: org.apache.tika.metadata.Metadata) -> None: ...
    @staticmethod
    def load(element: org.w3c.dom.Element, boolean: bool) -> 'MetadataFilter': ...

class CaptureGroupMetadataFilter(MetadataFilter, org.apache.tika.config.Initializable):
    def __init__(self): ...
    def checkInitialization(self, initializableProblemHandler: typing.Union[org.apache.tika.config.InitializableProblemHandler, typing.Callable]) -> None: ...
    def filter(self, metadata: org.apache.tika.metadata.Metadata) -> None: ...
    def getRegex(self) -> str: ...
    def getSourceField(self) -> str: ...
    def getTargetField(self) -> str: ...
    def initialize(self, map: typing.Union[java.util.Map[str, org.apache.tika.config.Param], typing.Mapping[str, org.apache.tika.config.Param]]) -> None: ...
    def setRegex(self, string: str) -> None: ...
    def setSourceField(self, string: str) -> None: ...
    def setTargetField(self, string: str) -> None: ...

class ClearByAttachmentTypeMetadataFilter(MetadataFilter):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, set: java.util.Set[str]): ...
    def filter(self, metadata: org.apache.tika.metadata.Metadata) -> None: ...
    def getTypes(self) -> java.util.List[str]: ...
    def setTypes(self, list: java.util.List[str]) -> None: ...

class ClearByMimeMetadataFilter(MetadataFilter):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, set: java.util.Set[str]): ...
    def filter(self, metadata: org.apache.tika.metadata.Metadata) -> None: ...
    def getMimes(self) -> java.util.List[str]: ...
    def setMimes(self, list: java.util.List[str]) -> None: ...

class CompositeMetadataFilter(MetadataFilter):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, list: java.util.List[MetadataFilter]): ...
    def filter(self, metadata: org.apache.tika.metadata.Metadata) -> None: ...
    def getFilters(self) -> java.util.List[MetadataFilter]: ...
    def setFilters(self, list: java.util.List[MetadataFilter]) -> None: ...
    def toString(self) -> str: ...

class DateNormalizingMetadataFilter(MetadataFilter):
    def __init__(self): ...
    def filter(self, metadata: org.apache.tika.metadata.Metadata) -> None: ...
    def getDefaultTimeZone(self) -> str: ...
    def setDefaultTimeZone(self, string: str) -> None: ...

class ExcludeFieldMetadataFilter(MetadataFilter):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, set: java.util.Set[str]): ...
    def filter(self, metadata: org.apache.tika.metadata.Metadata) -> None: ...
    def getExclude(self) -> java.util.List[str]: ...
    def setExclude(self, list: java.util.List[str]) -> None: ...

class FieldNameMappingFilter(MetadataFilter):
    def __init__(self): ...
    def filter(self, metadata: org.apache.tika.metadata.Metadata) -> None: ...
    def getMappins(self) -> java.util.Map[str, str]: ...
    def setExcludeUnmapped(self, boolean: bool) -> None: ...
    def setMappings(self, map: typing.Union[java.util.Map[str, str], typing.Mapping[str, str]]) -> None: ...
    def toString(self) -> str: ...

class GeoPointMetadataFilter(MetadataFilter):
    def __init__(self): ...
    def filter(self, metadata: org.apache.tika.metadata.Metadata) -> None: ...
    def getGeoPointFieldName(self) -> str: ...
    def setGeoPointFieldName(self, string: str) -> None: ...

class IncludeFieldMetadataFilter(MetadataFilter):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, set: java.util.Set[str]): ...
    def filter(self, metadata: org.apache.tika.metadata.Metadata) -> None: ...
    def getInclude(self) -> java.util.List[str]: ...
    def setInclude(self, list: java.util.List[str]) -> None: ...

class NoOpFilter(MetadataFilter):
    NOOP_FILTER: typing.ClassVar['NoOpFilter'] = ...
    def __init__(self): ...
    def filter(self, metadata: org.apache.tika.metadata.Metadata) -> None: ...

class DefaultMetadataFilter(CompositeMetadataFilter):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, list: java.util.List[MetadataFilter]): ...
    @typing.overload
    def __init__(self, serviceLoader: org.apache.tika.config.ServiceLoader): ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.apache.tika.metadata.filter")``.

    CaptureGroupMetadataFilter: typing.Type[CaptureGroupMetadataFilter]
    ClearByAttachmentTypeMetadataFilter: typing.Type[ClearByAttachmentTypeMetadataFilter]
    ClearByMimeMetadataFilter: typing.Type[ClearByMimeMetadataFilter]
    CompositeMetadataFilter: typing.Type[CompositeMetadataFilter]
    DateNormalizingMetadataFilter: typing.Type[DateNormalizingMetadataFilter]
    DefaultMetadataFilter: typing.Type[DefaultMetadataFilter]
    ExcludeFieldMetadataFilter: typing.Type[ExcludeFieldMetadataFilter]
    FieldNameMappingFilter: typing.Type[FieldNameMappingFilter]
    GeoPointMetadataFilter: typing.Type[GeoPointMetadataFilter]
    IncludeFieldMetadataFilter: typing.Type[IncludeFieldMetadataFilter]
    MetadataFilter: typing.Type[MetadataFilter]
    NoOpFilter: typing.Type[NoOpFilter]
