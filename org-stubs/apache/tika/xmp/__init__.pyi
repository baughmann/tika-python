
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import com.adobe.internal.xmp
import java.util
import jpype
import org.apache.tika.metadata
import org.apache.tika.xmp.convert
import typing



class XMPMetadata(org.apache.tika.metadata.Metadata):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, metadata: org.apache.tika.metadata.Metadata): ...
    @typing.overload
    def __init__(self, metadata: org.apache.tika.metadata.Metadata, string: str): ...
    @typing.overload
    def add(self, property: org.apache.tika.metadata.Property, int: int) -> None: ...
    @typing.overload
    def add(self, property: org.apache.tika.metadata.Property, string: str) -> None: ...
    @typing.overload
    def add(self, property: org.apache.tika.metadata.Property, calendar: java.util.Calendar) -> None: ...
    @typing.overload
    def add(self, string: str, string2: str) -> None: ...
    @staticmethod
    def deleteNamespace(string: str) -> None: ...
    def equals(self, object: typing.Any) -> bool: ...
    @typing.overload
    def get(self, string: str) -> str: ...
    @typing.overload
    def get(self, property: org.apache.tika.metadata.Property) -> str: ...
    def getDate(self, property: org.apache.tika.metadata.Property) -> java.util.Date: ...
    def getInt(self, property: org.apache.tika.metadata.Property) -> int: ...
    @staticmethod
    def getNamespacePrefix(string: str) -> str: ...
    @staticmethod
    def getNamespaceURI(string: str) -> str: ...
    @staticmethod
    def getNamespaces() -> java.util.Map[str, str]: ...
    @staticmethod
    def getPrefixes() -> java.util.Map[str, str]: ...
    @typing.overload
    def getValues(self, string: str) -> typing.MutableSequence[str]: ...
    @typing.overload
    def getValues(self, property: org.apache.tika.metadata.Property) -> typing.MutableSequence[str]: ...
    def getXMPData(self) -> com.adobe.internal.xmp.XMPMeta: ...
    def hashCode(self) -> int: ...
    @typing.overload
    def isMultiValued(self, string: str) -> bool: ...
    @typing.overload
    def isMultiValued(self, property: org.apache.tika.metadata.Property) -> bool: ...
    def names(self) -> typing.MutableSequence[str]: ...
    @typing.overload
    def process(self, metadata: org.apache.tika.metadata.Metadata) -> None: ...
    @typing.overload
    def process(self, metadata: org.apache.tika.metadata.Metadata, string: str) -> None: ...
    @staticmethod
    def registerNamespace(string: str, string2: str) -> str: ...
    @typing.overload
    def remove(self, string: str) -> None: ...
    @typing.overload
    def remove(self, property: org.apache.tika.metadata.Property) -> None: ...
    @typing.overload
    def set(self, property: org.apache.tika.metadata.Property, boolean: bool) -> None: ...
    @typing.overload
    def set(self, property: org.apache.tika.metadata.Property, calendar: java.util.Calendar) -> None: ...
    @typing.overload
    def set(self, property: org.apache.tika.metadata.Property, long: int) -> None: ...
    @typing.overload
    def set(self, string: str, string2: str) -> None: ...
    @typing.overload
    def set(self, property: org.apache.tika.metadata.Property, double: float) -> None: ...
    @typing.overload
    def set(self, property: org.apache.tika.metadata.Property, int: int) -> None: ...
    @typing.overload
    def set(self, property: org.apache.tika.metadata.Property, string: str) -> None: ...
    @typing.overload
    def set(self, property: org.apache.tika.metadata.Property, stringArray: typing.Union[typing.List[str], jpype.JArray]) -> None: ...
    @typing.overload
    def set(self, property: org.apache.tika.metadata.Property, date: java.util.Date) -> None: ...
    def setAll(self, properties: java.util.Properties) -> None: ...
    def size(self) -> int: ...
    def toString(self) -> str: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.apache.tika.xmp")``.

    XMPMetadata: typing.Type[XMPMetadata]
    convert: org.apache.tika.xmp.convert.__module_protocol__
