
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.io
import java.nio.charset
import java.util
import org.apache.tika.detect
import org.apache.tika.exception
import org.apache.tika.metadata
import org.apache.tika.mime
import org.apache.tika.parser
import org.apache.tika.parser.html.charsetdetector
import org.xml.sax
import typing



class DataURIScheme:
    def equals(self, object: typing.Any) -> bool: ...
    def getInputStream(self) -> java.io.InputStream: ...
    def getMediaType(self) -> org.apache.tika.mime.MediaType: ...
    def hashCode(self) -> int: ...
    def isBase64(self) -> bool: ...

class DataURISchemeParseException(org.apache.tika.exception.TikaException):
    def __init__(self, string: str): ...

class DataURISchemeUtil:
    UNSPECIFIED_MEDIA_TYPE: typing.ClassVar[str] = ...
    def __init__(self): ...
    def extract(self, string: str) -> java.util.List[DataURIScheme]: ...
    def parse(self, string: str) -> DataURIScheme: ...

class HtmlEncodingDetector(org.apache.tika.detect.EncodingDetector):
    def __init__(self): ...
    def detect(self, inputStream: java.io.InputStream, metadata: org.apache.tika.metadata.Metadata) -> java.nio.charset.Charset: ...
    def getMarkLimit(self) -> int: ...
    def setMarkLimit(self, int: int) -> None: ...

class HtmlMapper:
    def isDiscardElement(self, string: str) -> bool: ...
    def mapSafeAttribute(self, string: str, string2: str) -> str: ...
    def mapSafeElement(self, string: str) -> str: ...

class JSoupParser(org.apache.tika.parser.AbstractEncodingDetectorParser):
    DEFAULT_CHARSET: typing.ClassVar[java.nio.charset.Charset] = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, encodingDetector: typing.Union[org.apache.tika.detect.EncodingDetector, typing.Callable]): ...
    def getSupportedTypes(self, parseContext: org.apache.tika.parser.ParseContext) -> java.util.Set[org.apache.tika.mime.MediaType]: ...
    def isExtractScripts(self) -> bool: ...
    def parse(self, inputStream: java.io.InputStream, contentHandler: org.xml.sax.ContentHandler, metadata: org.apache.tika.metadata.Metadata, parseContext: org.apache.tika.parser.ParseContext) -> None: ...
    def parseString(self, string: str, contentHandler: org.xml.sax.ContentHandler, metadata: org.apache.tika.metadata.Metadata, parseContext: org.apache.tika.parser.ParseContext) -> None: ...
    def setExtractScripts(self, boolean: bool) -> None: ...

class DefaultHtmlMapper(HtmlMapper):
    INSTANCE: typing.ClassVar[HtmlMapper] = ...
    def __init__(self): ...
    def isDiscardElement(self, string: str) -> bool: ...
    def mapSafeAttribute(self, string: str, string2: str) -> str: ...
    def mapSafeElement(self, string: str) -> str: ...

class IdentityHtmlMapper(HtmlMapper):
    INSTANCE: typing.ClassVar[HtmlMapper] = ...
    def __init__(self): ...
    def isDiscardElement(self, string: str) -> bool: ...
    def mapSafeAttribute(self, string: str, string2: str) -> str: ...
    def mapSafeElement(self, string: str) -> str: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.apache.tika.parser.html")``.

    DataURIScheme: typing.Type[DataURIScheme]
    DataURISchemeParseException: typing.Type[DataURISchemeParseException]
    DataURISchemeUtil: typing.Type[DataURISchemeUtil]
    DefaultHtmlMapper: typing.Type[DefaultHtmlMapper]
    HtmlEncodingDetector: typing.Type[HtmlEncodingDetector]
    HtmlMapper: typing.Type[HtmlMapper]
    IdentityHtmlMapper: typing.Type[IdentityHtmlMapper]
    JSoupParser: typing.Type[JSoupParser]
    charsetdetector: org.apache.tika.parser.html.charsetdetector.__module_protocol__
