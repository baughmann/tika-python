
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.io
import java.util
import jpype
import org
import org.apache.tika.metadata
import org.apache.tika.mime
import org.apache.tika.parser
import org.xml.sax
import org.xml.sax.helpers
import typing



class AttributeDependantMetadataHandler(org.xml.sax.helpers.DefaultHandler):
    def __init__(self, metadata: org.apache.tika.metadata.Metadata, string: str, string2: str): ...
    def addMetadata(self, string: str) -> None: ...
    def characters(self, charArray: typing.Union[typing.List[str], jpype.JArray], int: int, int2: int) -> None: ...
    def endElement(self, string: str, string2: str, string3: str) -> None: ...
    def startElement(self, string: str, string2: str, string3: str, attributes: org.xml.sax.Attributes) -> None: ...

class MetadataHandler(org.xml.sax.helpers.DefaultHandler):
    @typing.overload
    def __init__(self, metadata: org.apache.tika.metadata.Metadata, string: str): ...
    @typing.overload
    def __init__(self, metadata: org.apache.tika.metadata.Metadata, property: org.apache.tika.metadata.Property): ...
    def addMetadata(self, string: str) -> None: ...
    def characters(self, charArray: typing.Union[typing.List[str], jpype.JArray], int: int, int2: int) -> None: ...
    def endElement(self, string: str, string2: str, string3: str) -> None: ...
    def startElement(self, string: str, string2: str, string3: str, attributes: org.xml.sax.Attributes) -> None: ...

class XMLParser(org.apache.tika.parser.Parser):
    def __init__(self): ...
    def getSupportedTypes(self, parseContext: org.apache.tika.parser.ParseContext) -> java.util.Set[org.apache.tika.mime.MediaType]: ...
    def parse(self, inputStream: java.io.InputStream, contentHandler: org.xml.sax.ContentHandler, metadata: org.apache.tika.metadata.Metadata, parseContext: org.apache.tika.parser.ParseContext) -> None: ...

class XMLProfiler(org.apache.tika.parser.Parser):
    ROOT_ENTITY: typing.ClassVar[org.apache.tika.metadata.Property] = ...
    ENTITY_URIS: typing.ClassVar[org.apache.tika.metadata.Property] = ...
    ENTITY_LOCAL_NAMES: typing.ClassVar[org.apache.tika.metadata.Property] = ...
    def __init__(self): ...
    def getSupportedTypes(self, parseContext: org.apache.tika.parser.ParseContext) -> java.util.Set[org.apache.tika.mime.MediaType]: ...
    def parse(self, inputStream: java.io.InputStream, contentHandler: org.xml.sax.ContentHandler, metadata: org.apache.tika.metadata.Metadata, parseContext: org.apache.tika.parser.ParseContext) -> None: ...

class DcXMLParser(XMLParser):
    def __init__(self): ...

class FictionBookParser(XMLParser):
    def __init__(self): ...
    def getSupportedTypes(self, parseContext: org.apache.tika.parser.ParseContext) -> java.util.Set[org.apache.tika.mime.MediaType]: ...

class TextAndAttributeXMLParser(XMLParser):
    def __init__(self): ...

class AttributeMetadataHandler(org.apache.tika.parser.xml.AbstractMetadataHandler):
    @typing.overload
    def __init__(self, string: str, string2: str, metadata: org.apache.tika.metadata.Metadata, string3: str): ...
    @typing.overload
    def __init__(self, string: str, string2: str, metadata: org.apache.tika.metadata.Metadata, property: org.apache.tika.metadata.Property): ...
    def startElement(self, string: str, string2: str, string3: str, attributes: org.xml.sax.Attributes) -> None: ...

class ElementMetadataHandler(org.apache.tika.parser.xml.AbstractMetadataHandler):
    @typing.overload
    def __init__(self, string: str, string2: str, metadata: org.apache.tika.metadata.Metadata, string3: str): ...
    @typing.overload
    def __init__(self, string: str, string2: str, metadata: org.apache.tika.metadata.Metadata, string3: str, boolean: bool, boolean2: bool): ...
    @typing.overload
    def __init__(self, string: str, string2: str, metadata: org.apache.tika.metadata.Metadata, property: org.apache.tika.metadata.Property): ...
    @typing.overload
    def __init__(self, string: str, string2: str, metadata: org.apache.tika.metadata.Metadata, property: org.apache.tika.metadata.Property, boolean: bool, boolean2: bool): ...
    def characters(self, charArray: typing.Union[typing.List[str], jpype.JArray], int: int, int2: int) -> None: ...
    def endElement(self, string: str, string2: str, string3: str) -> None: ...
    def ignorableWhitespace(self, charArray: typing.Union[typing.List[str], jpype.JArray], int: int, int2: int) -> None: ...
    def startElement(self, string: str, string2: str, string3: str, attributes: org.xml.sax.Attributes) -> None: ...

class AbstractMetadataHandler: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.apache.tika.parser.xml")``.

    AbstractMetadataHandler: typing.Type[AbstractMetadataHandler]
    AttributeDependantMetadataHandler: typing.Type[AttributeDependantMetadataHandler]
    AttributeMetadataHandler: typing.Type[AttributeMetadataHandler]
    DcXMLParser: typing.Type[DcXMLParser]
    ElementMetadataHandler: typing.Type[ElementMetadataHandler]
    FictionBookParser: typing.Type[FictionBookParser]
    MetadataHandler: typing.Type[MetadataHandler]
    TextAndAttributeXMLParser: typing.Type[TextAndAttributeXMLParser]
    XMLParser: typing.Type[XMLParser]
    XMLProfiler: typing.Type[XMLProfiler]
