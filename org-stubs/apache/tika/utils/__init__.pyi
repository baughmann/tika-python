
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.io
import java.lang
import java.nio.charset
import java.nio.file
import java.util
import java.util.concurrent
import javax.xml.parsers
import javax.xml.stream
import javax.xml.transform
import jpype
import jpype.protocol
import org.apache.tika.config
import org.apache.tika.io
import org.apache.tika.metadata
import org.apache.tika.parser
import org.w3c.dom
import org.xml.sax
import typing



class AnnotationUtils:
    def __init__(self): ...
    @staticmethod
    def assignFieldParams(object: typing.Any, map: typing.Union[java.util.Map[str, org.apache.tika.config.Param], typing.Mapping[str, org.apache.tika.config.Param]]) -> None: ...

class CharsetUtils:
    def __init__(self): ...
    @staticmethod
    def clean(string: str) -> str: ...
    @staticmethod
    def forName(string: str) -> java.nio.charset.Charset: ...
    @staticmethod
    def isSupported(string: str) -> bool: ...

class CompareUtils:
    def __init__(self): ...
    @staticmethod
    def compareClassName(object: typing.Any, object2: typing.Any) -> int: ...

class ConcurrentUtils:
    def __init__(self): ...
    @staticmethod
    def execute(parseContext: org.apache.tika.parser.ParseContext, runnable: typing.Union[java.lang.Runnable, typing.Callable]) -> java.util.concurrent.Future: ...

class DateUtils:
    UTC: typing.ClassVar[java.util.TimeZone] = ...
    MIDDAY: typing.ClassVar[java.util.TimeZone] = ...
    def __init__(self): ...
    @typing.overload
    @staticmethod
    def formatDate(calendar: java.util.Calendar) -> str: ...
    @typing.overload
    @staticmethod
    def formatDate(date: java.util.Date) -> str: ...
    @staticmethod
    def formatDateUnknownTimezone(date: java.util.Date) -> str: ...
    def tryToParse(self, string: str) -> java.util.Date: ...

class ExceptionUtils:
    def __init__(self): ...
    @staticmethod
    def getFilteredStackTrace(throwable: java.lang.Throwable) -> str: ...
    @staticmethod
    def getStackTrace(throwable: java.lang.Throwable) -> str: ...
    @staticmethod
    def trimMessage(string: str) -> str: ...

class FileProcessResult:
    def __init__(self): ...
    def getExitValue(self) -> int: ...
    def getProcessTimeMillis(self) -> int: ...
    def getStderr(self) -> str: ...
    def getStderrLength(self) -> int: ...
    def getStdout(self) -> str: ...
    def getStdoutLength(self) -> int: ...
    def isStderrTruncated(self) -> bool: ...
    def isStdoutTruncated(self) -> bool: ...
    def isTimeout(self) -> bool: ...
    def setExitValue(self, int: int) -> None: ...
    def setProcessTimeMillis(self, long: int) -> None: ...
    def setStderr(self, string: str) -> None: ...
    def setStderrLength(self, long: int) -> None: ...
    def setStderrTruncated(self, boolean: bool) -> None: ...
    def setStdout(self, string: str) -> None: ...
    def setStdoutLength(self, long: int) -> None: ...
    def setStdoutTruncated(self, boolean: bool) -> None: ...
    def setTimeout(self, boolean: bool) -> None: ...
    def toString(self) -> str: ...

class ParserUtils:
    EMBEDDED_PARSER: typing.ClassVar[org.apache.tika.metadata.Property] = ...
    def __init__(self): ...
    @staticmethod
    def cloneMetadata(metadata: org.apache.tika.metadata.Metadata) -> org.apache.tika.metadata.Metadata: ...
    @staticmethod
    def ensureStreamReReadable(inputStream: java.io.InputStream, temporaryResources: org.apache.tika.io.TemporaryResources, metadata: org.apache.tika.metadata.Metadata) -> java.io.InputStream: ...
    @staticmethod
    def getParserClassname(parser: org.apache.tika.parser.Parser) -> str: ...
    @typing.overload
    @staticmethod
    def recordParserDetails(string: str, metadata: org.apache.tika.metadata.Metadata) -> None: ...
    @typing.overload
    @staticmethod
    def recordParserDetails(parser: org.apache.tika.parser.Parser, metadata: org.apache.tika.metadata.Metadata) -> None: ...
    @staticmethod
    def recordParserFailure(parser: org.apache.tika.parser.Parser, throwable: java.lang.Throwable, metadata: org.apache.tika.metadata.Metadata) -> None: ...
    @staticmethod
    def streamResetForReRead(inputStream: java.io.InputStream, temporaryResources: org.apache.tika.io.TemporaryResources) -> java.io.InputStream: ...

class ProcessUtils:
    def __init__(self): ...
    @staticmethod
    def escapeCommandLine(string: str) -> str: ...
    @typing.overload
    @staticmethod
    def execute(processBuilder: java.lang.ProcessBuilder, long: int, int: int, int2: int) -> FileProcessResult: ...
    @typing.overload
    @staticmethod
    def execute(processBuilder: java.lang.ProcessBuilder, long: int, path: typing.Union[java.nio.file.Path, jpype.protocol.SupportsPath], int: int) -> FileProcessResult: ...
    @staticmethod
    def unescapeCommandLine(string: str) -> str: ...

class RegexUtils:
    def __init__(self): ...
    @staticmethod
    def extractLinks(string: str) -> java.util.List[str]: ...

class RereadableInputStream(java.io.InputStream):
    @typing.overload
    def __init__(self, inputStream: java.io.InputStream): ...
    @typing.overload
    def __init__(self, inputStream: java.io.InputStream, boolean: bool): ...
    @typing.overload
    def __init__(self, inputStream: java.io.InputStream, int: int): ...
    @typing.overload
    def __init__(self, inputStream: java.io.InputStream, int: int, boolean: bool): ...
    def close(self) -> None: ...
    @typing.overload
    def read(self, byteArray: typing.Union[typing.List[int], jpype.JArray, bytes]) -> int: ...
    @typing.overload
    def read(self, byteArray: typing.Union[typing.List[int], jpype.JArray, bytes], int: int, int2: int) -> int: ...
    @typing.overload
    def read(self) -> int: ...
    def rewind(self) -> None: ...

class ServiceLoaderUtils:
    def __init__(self): ...
    _newInstance_0__T = typing.TypeVar('_newInstance_0__T')  # <T>
    _newInstance_1__T = typing.TypeVar('_newInstance_1__T')  # <T>
    _newInstance_2__T = typing.TypeVar('_newInstance_2__T')  # <T>
    @typing.overload
    @staticmethod
    def newInstance(class_: typing.Type, serviceLoader: org.apache.tika.config.ServiceLoader) -> _newInstance_0__T: ...
    @typing.overload
    @staticmethod
    def newInstance(string: str) -> _newInstance_1__T: ...
    @typing.overload
    @staticmethod
    def newInstance(string: str, classLoader: java.lang.ClassLoader) -> _newInstance_2__T: ...
    _sortLoadedClasses__T = typing.TypeVar('_sortLoadedClasses__T')  # <T>
    @staticmethod
    def sortLoadedClasses(list: java.util.List[_sortLoadedClasses__T]) -> None: ...

class StreamGobbler(java.lang.Runnable):
    def __init__(self, inputStream: java.io.InputStream, int: int): ...
    def getIsTruncated(self) -> bool: ...
    def getLines(self) -> java.util.List[str]: ...
    def getStreamLength(self) -> int: ...
    def run(self) -> None: ...

class StringUtils:
    EMPTY: typing.ClassVar[str] = ...
    SPACE: typing.ClassVar[str] = ...
    def __init__(self): ...
    @staticmethod
    def isBlank(string: str) -> bool: ...
    @staticmethod
    def isEmpty(charSequence: typing.Union[java.lang.CharSequence, str]) -> bool: ...
    @staticmethod
    def joinWith(string: str, list: java.util.List[str]) -> str: ...
    @typing.overload
    @staticmethod
    def leftPad(string: str, int: int, char: str) -> str: ...
    @typing.overload
    @staticmethod
    def leftPad(string: str, int: int, string2: str) -> str: ...
    @typing.overload
    @staticmethod
    def repeat(char: str, int: int) -> str: ...
    @typing.overload
    @staticmethod
    def repeat(string: str, int: int) -> str: ...

class SystemUtils:
    OS_NAME: typing.ClassVar[str] = ...
    OS_VERSION: typing.ClassVar[str] = ...
    IS_OS_AIX: typing.ClassVar[bool] = ...
    IS_OS_HP_UX: typing.ClassVar[bool] = ...
    IS_OS_IRIX: typing.ClassVar[bool] = ...
    IS_OS_LINUX: typing.ClassVar[bool] = ...
    IS_OS_MAC: typing.ClassVar[bool] = ...
    IS_OS_MAC_OSX: typing.ClassVar[bool] = ...
    IS_OS_OS2: typing.ClassVar[bool] = ...
    IS_OS_SOLARIS: typing.ClassVar[bool] = ...
    IS_OS_SUN_OS: typing.ClassVar[bool] = ...
    IS_OS_UNIX: typing.ClassVar[bool] = ...
    IS_OS_WINDOWS: typing.ClassVar[bool] = ...
    IS_OS_VERSION_WSL: typing.ClassVar[bool] = ...
    def __init__(self): ...

class XMLReaderUtils(java.io.Serializable):
    DEFAULT_POOL_SIZE: typing.ClassVar[int] = ...
    DEFAULT_MAX_ENTITY_EXPANSIONS: typing.ClassVar[int] = ...
    def __init__(self): ...
    @typing.overload
    @staticmethod
    def buildDOM(inputStream: java.io.InputStream) -> org.w3c.dom.Document: ...
    @typing.overload
    @staticmethod
    def buildDOM(inputStream: java.io.InputStream, parseContext: org.apache.tika.parser.ParseContext) -> org.w3c.dom.Document: ...
    @typing.overload
    @staticmethod
    def buildDOM(reader: java.io.Reader, parseContext: org.apache.tika.parser.ParseContext) -> org.w3c.dom.Document: ...
    @typing.overload
    @staticmethod
    def buildDOM(string: str) -> org.w3c.dom.Document: ...
    @typing.overload
    @staticmethod
    def buildDOM(path: typing.Union[java.nio.file.Path, jpype.protocol.SupportsPath]) -> org.w3c.dom.Document: ...
    @staticmethod
    def getAttrValue(string: str, attributes: org.xml.sax.Attributes) -> str: ...
    @typing.overload
    @staticmethod
    def getDocumentBuilder() -> javax.xml.parsers.DocumentBuilder: ...
    @typing.overload
    @staticmethod
    def getDocumentBuilder(parseContext: org.apache.tika.parser.ParseContext) -> javax.xml.parsers.DocumentBuilder: ...
    @staticmethod
    def getDocumentBuilderFactory() -> javax.xml.parsers.DocumentBuilderFactory: ...
    @staticmethod
    def getMaxEntityExpansions() -> int: ...
    @staticmethod
    def getPoolSize() -> int: ...
    @staticmethod
    def getSAXParser() -> javax.xml.parsers.SAXParser: ...
    @staticmethod
    def getSAXParserFactory() -> javax.xml.parsers.SAXParserFactory: ...
    @typing.overload
    @staticmethod
    def getTransformer() -> javax.xml.transform.Transformer: ...
    @typing.overload
    @staticmethod
    def getTransformer(parseContext: org.apache.tika.parser.ParseContext) -> javax.xml.transform.Transformer: ...
    @typing.overload
    @staticmethod
    def getXMLInputFactory() -> javax.xml.stream.XMLInputFactory: ...
    @typing.overload
    @staticmethod
    def getXMLInputFactory(parseContext: org.apache.tika.parser.ParseContext) -> javax.xml.stream.XMLInputFactory: ...
    @staticmethod
    def getXMLReader() -> org.xml.sax.XMLReader: ...
    @typing.overload
    @staticmethod
    def parseSAX(inputStream: java.io.InputStream, contentHandler: org.xml.sax.ContentHandler, parseContext: org.apache.tika.parser.ParseContext) -> None: ...
    @typing.overload
    @staticmethod
    def parseSAX(reader: java.io.Reader, contentHandler: org.xml.sax.ContentHandler, parseContext: org.apache.tika.parser.ParseContext) -> None: ...
    @staticmethod
    def setMaxEntityExpansions(int: int) -> None: ...
    @staticmethod
    def setPoolSize(int: int) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.apache.tika.utils")``.

    AnnotationUtils: typing.Type[AnnotationUtils]
    CharsetUtils: typing.Type[CharsetUtils]
    CompareUtils: typing.Type[CompareUtils]
    ConcurrentUtils: typing.Type[ConcurrentUtils]
    DateUtils: typing.Type[DateUtils]
    ExceptionUtils: typing.Type[ExceptionUtils]
    FileProcessResult: typing.Type[FileProcessResult]
    ParserUtils: typing.Type[ParserUtils]
    ProcessUtils: typing.Type[ProcessUtils]
    RegexUtils: typing.Type[RegexUtils]
    RereadableInputStream: typing.Type[RereadableInputStream]
    ServiceLoaderUtils: typing.Type[ServiceLoaderUtils]
    StreamGobbler: typing.Type[StreamGobbler]
    StringUtils: typing.Type[StringUtils]
    SystemUtils: typing.Type[SystemUtils]
    XMLReaderUtils: typing.Type[XMLReaderUtils]
