
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.awt.geom
import java.io
import java.util
import java.util.concurrent.atomic
import org.apache.pdfbox.contentstream
import org.apache.pdfbox.cos
import org.apache.pdfbox.pdmodel
import org.apache.pdfbox.pdmodel.graphics.image
import org.apache.tika.extractor
import org.apache.tika.metadata
import org.apache.tika.parser
import org.apache.tika.parser.pdf
import org.apache.tika.sax
import typing



class ImageGraphicsEngine(org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine):
    def appendRectangle(self, point2D: java.awt.geom.Point2D, point2D2: java.awt.geom.Point2D, point2D3: java.awt.geom.Point2D, point2D4: java.awt.geom.Point2D) -> None: ...
    def clip(self, int: int) -> None: ...
    def closePath(self) -> None: ...
    def curveTo(self, float: float, float2: float, float3: float, float4: float, float5: float, float6: float) -> None: ...
    def drawImage(self, pDImage: org.apache.pdfbox.pdmodel.graphics.image.PDImage) -> None: ...
    def endPath(self) -> None: ...
    def fillAndStrokePath(self, int: int) -> None: ...
    def fillPath(self, int: int) -> None: ...
    def getCurrentPoint(self) -> java.awt.geom.Point2D: ...
    def getExceptions(self) -> java.util.List[java.io.IOException]: ...
    def lineTo(self, float: float, float2: float) -> None: ...
    def moveTo(self, float: float, float2: float) -> None: ...
    def run(self) -> None: ...
    def shadingFill(self, cOSName: org.apache.pdfbox.cos.COSName) -> None: ...
    def strokePath(self) -> None: ...

class ImageGraphicsEngineFactory(java.io.Serializable):
    def __init__(self): ...
    def newEngine(self, pDPage: org.apache.pdfbox.pdmodel.PDPage, int: int, embeddedDocumentExtractor: org.apache.tika.extractor.EmbeddedDocumentExtractor, pDFParserConfig: org.apache.tika.parser.pdf.PDFParserConfig, map: typing.Union[java.util.Map[org.apache.pdfbox.cos.COSStream, int], typing.Mapping[org.apache.pdfbox.cos.COSStream, int]], atomicInteger: java.util.concurrent.atomic.AtomicInteger, xHTMLContentHandler: org.apache.tika.sax.XHTMLContentHandler, metadata: org.apache.tika.metadata.Metadata, parseContext: org.apache.tika.parser.ParseContext) -> ImageGraphicsEngine: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.apache.tika.parser.pdf.image")``.

    ImageGraphicsEngine: typing.Type[ImageGraphicsEngine]
    ImageGraphicsEngineFactory: typing.Type[ImageGraphicsEngineFactory]
