
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.io
import java.util
import org.apache.tika.detect
import org.apache.tika.metadata
import org.apache.tika.mime
import org.apache.tika.parser
import org.xml.sax
import typing



class CompressorParser(org.apache.tika.parser.Parser):
    def __init__(self): ...
    def getMemoryLimitInKb(self) -> int: ...
    def getSupportedTypes(self, parseContext: org.apache.tika.parser.ParseContext) -> java.util.Set[org.apache.tika.mime.MediaType]: ...
    def isDecompressConcatenated(self) -> bool: ...
    def parse(self, inputStream: java.io.InputStream, contentHandler: org.xml.sax.ContentHandler, metadata: org.apache.tika.metadata.Metadata, parseContext: org.apache.tika.parser.ParseContext) -> None: ...
    def setDecompressConcatenated(self, boolean: bool) -> None: ...
    def setMemoryLimitInKb(self, int: int) -> None: ...

class CompressorParserOptions:
    def decompressConcatenated(self, metadata: org.apache.tika.metadata.Metadata) -> bool: ...

class PackageParser(org.apache.tika.parser.AbstractEncodingDetectorParser):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, encodingDetector: typing.Union[org.apache.tika.detect.EncodingDetector, typing.Callable]): ...
    def getSupportedTypes(self, parseContext: org.apache.tika.parser.ParseContext) -> java.util.Set[org.apache.tika.mime.MediaType]: ...
    def isDetectCharsetsInEntryNames(self) -> bool: ...
    def parse(self, inputStream: java.io.InputStream, contentHandler: org.xml.sax.ContentHandler, metadata: org.apache.tika.metadata.Metadata, parseContext: org.apache.tika.parser.ParseContext) -> None: ...
    def setDetectCharsetsInEntryNames(self, boolean: bool) -> None: ...

class RarParser(org.apache.tika.parser.Parser):
    def __init__(self): ...
    def getSupportedTypes(self, parseContext: org.apache.tika.parser.ParseContext) -> java.util.Set[org.apache.tika.mime.MediaType]: ...
    def parse(self, inputStream: java.io.InputStream, contentHandler: org.xml.sax.ContentHandler, metadata: org.apache.tika.metadata.Metadata, parseContext: org.apache.tika.parser.ParseContext) -> None: ...

class UnrarParser(org.apache.tika.parser.Parser):
    def __init__(self): ...
    def getSupportedTypes(self, parseContext: org.apache.tika.parser.ParseContext) -> java.util.Set[org.apache.tika.mime.MediaType]: ...
    def parse(self, inputStream: java.io.InputStream, contentHandler: org.xml.sax.ContentHandler, metadata: org.apache.tika.metadata.Metadata, parseContext: org.apache.tika.parser.ParseContext) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.apache.tika.parser.pkg")``.

    CompressorParser: typing.Type[CompressorParser]
    CompressorParserOptions: typing.Type[CompressorParserOptions]
    PackageParser: typing.Type[PackageParser]
    RarParser: typing.Type[RarParser]
    UnrarParser: typing.Type[UnrarParser]
