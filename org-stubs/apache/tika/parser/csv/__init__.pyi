
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.io
import java.lang
import java.nio.charset
import java.util
import org.apache.tika.detect
import org.apache.tika.metadata
import org.apache.tika.mime
import org.apache.tika.parser
import org.xml.sax
import typing



class CSVParams:
    def getCharset(self) -> java.nio.charset.Charset: ...
    def getDelimiter(self) -> str: ...
    def getMediaType(self) -> org.apache.tika.mime.MediaType: ...
    def isComplete(self) -> bool: ...
    def isEmpty(self) -> bool: ...
    def setCharset(self, charset: java.nio.charset.Charset) -> None: ...
    def setDelimiter(self, character: str) -> None: ...
    def setMediaType(self, mediaType: org.apache.tika.mime.MediaType) -> None: ...

class CSVResult(java.lang.Comparable['CSVResult']):
    def __init__(self, double: float, mediaType: org.apache.tika.mime.MediaType, character: str): ...
    def compareTo(self, cSVResult: 'CSVResult') -> int: ...
    def equals(self, object: typing.Any) -> bool: ...
    def getConfidence(self) -> float: ...
    def getDelimiter(self) -> str: ...
    def getMediaType(self) -> org.apache.tika.mime.MediaType: ...
    def hashCode(self) -> int: ...
    def toString(self) -> str: ...

class TextAndCSVConfig(java.io.Serializable):
    def __init__(self): ...
    def getDelimiterToNameMap(self) -> java.util.Map[str, str]: ...
    def getNameToDelimiterMap(self) -> java.util.Map[str, str]: ...
    def setNameToDelimiterMap(self, map: typing.Union[java.util.Map[str, str], typing.Mapping[str, str]]) -> None: ...

class TextAndCSVParser(org.apache.tika.parser.AbstractEncodingDetectorParser):
    DELIMITER_PROPERTY: typing.ClassVar[org.apache.tika.metadata.Property] = ...
    NUM_COLUMNS: typing.ClassVar[org.apache.tika.metadata.Property] = ...
    NUM_ROWS: typing.ClassVar[org.apache.tika.metadata.Property] = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, encodingDetector: typing.Union[org.apache.tika.detect.EncodingDetector, typing.Callable]): ...
    def getSupportedTypes(self, parseContext: org.apache.tika.parser.ParseContext) -> java.util.Set[org.apache.tika.mime.MediaType]: ...
    def parse(self, inputStream: java.io.InputStream, contentHandler: org.xml.sax.ContentHandler, metadata: org.apache.tika.metadata.Metadata, parseContext: org.apache.tika.parser.ParseContext) -> None: ...
    def setNameToDelimiterMap(self, map: typing.Union[java.util.Map[str, str], typing.Mapping[str, str]]) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.apache.tika.parser.csv")``.

    CSVParams: typing.Type[CSVParams]
    CSVResult: typing.Type[CSVResult]
    TextAndCSVConfig: typing.Type[TextAndCSVConfig]
    TextAndCSVParser: typing.Type[TextAndCSVParser]
