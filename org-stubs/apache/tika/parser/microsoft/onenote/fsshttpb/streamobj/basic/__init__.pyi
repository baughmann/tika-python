
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.lang
import java.util
import java.util.concurrent.atomic
import jpype
import org.apache.tika.parser.microsoft.onenote
import org.apache.tika.parser.microsoft.onenote.fsshttpb
import org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj
import org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.space
import typing



class AdapterHelper:
    def __init__(self): ...
    @staticmethod
    def readGuid(byteArray: typing.Union[typing.List[int], jpype.JArray, bytes], int: int) -> java.util.UUID: ...
    @staticmethod
    def xorExtendedGUID(extendedGUID: org.apache.tika.parser.microsoft.onenote.ExtendedGUID, extendedGUID2: org.apache.tika.parser.microsoft.onenote.ExtendedGUID) -> 'ExGuid': ...

class AlternativePackaging:
    guidFileType: java.util.UUID = ...
    guidFile: java.util.UUID = ...
    guidLegacyFileVersion: java.util.UUID = ...
    guidFileFormat: java.util.UUID = ...
    rgbReserved: int = ...
    packagingStart: org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.StreamObjectHeaderStart32bit = ...
    storageIndexExtendedGUID: 'ExGuid' = ...
    guidCellSchemaId: java.util.UUID = ...
    dataElementPackage: org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.DataElementPackage = ...
    packagingEnd: org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.StreamObjectHeaderEnd = ...
    def __init__(self): ...
    def doDeserializeFromByteArray(self, byteArray: typing.Union[typing.List[int], jpype.JArray, bytes], int: int) -> int: ...

class BasicObject(org.apache.tika.parser.microsoft.onenote.fsshttpb.IFSSHTTPBSerializable):
    def __init__(self): ...
    def deserializeFromByteArray(self, byteArray: typing.Union[typing.List[int], jpype.JArray, bytes], int: int) -> int: ...
    _parse__T = typing.TypeVar('_parse__T', bound='BasicObject')  # <T>
    @staticmethod
    def parse(byteArray: typing.Union[typing.List[int], jpype.JArray, bytes], atomicInteger: java.util.concurrent.atomic.AtomicInteger, class_: typing.Type[_parse__T]) -> _parse__T: ...
    def serializeToByteList(self) -> java.util.List[int]: ...

class CompactID:
    n: int = ...
    guidIndex: int = ...
    def __init__(self): ...
    def doDeserializeFromByteArray(self, byteArray: typing.Union[typing.List[int], jpype.JArray, bytes], int: int) -> int: ...
    def serializeToByteList(self) -> java.util.List[int]: ...

class DataElementType(java.lang.Enum['DataElementType']):
    None_: typing.ClassVar['DataElementType'] = ...
    StorageIndexDataElementData: typing.ClassVar['DataElementType'] = ...
    StorageManifestDataElementData: typing.ClassVar['DataElementType'] = ...
    CellManifestDataElementData: typing.ClassVar['DataElementType'] = ...
    RevisionManifestDataElementData: typing.ClassVar['DataElementType'] = ...
    ObjectGroupDataElementData: typing.ClassVar['DataElementType'] = ...
    FragmentDataElementData: typing.ClassVar['DataElementType'] = ...
    ObjectDataBLOBDataElementData: typing.ClassVar['DataElementType'] = ...
    @staticmethod
    def fromIntVal(int: int) -> 'DataElementType': ...
    def getIntVal(self) -> int: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'DataElementType': ...
    @staticmethod
    def values() -> typing.MutableSequence['DataElementType']: ...

class DataNodeObjectData:
    exGuid: 'ExGuid' = ...
    objectData: typing.MutableSequence[int] = ...
    def __init__(self, byteArray: typing.Union[typing.List[int], jpype.JArray, bytes], int: int, int2: int): ...

class HeaderCell:
    objectDeclaration: org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.ObjectGroupObjectDeclare = ...
    objectData: org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.space.ObjectSpaceObjectPropSet = ...
    def __init__(self): ...
    @staticmethod
    def createInstance(objectGroupDataElementData: org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.ObjectGroupDataElementData) -> 'HeaderCell': ...

class JCID:
    index: int = ...
    isBinary: int = ...
    isPropertySet: int = ...
    isGraphNode: int = ...
    isFileData: int = ...
    isReadOnly: int = ...
    reserved: int = ...
    def __init__(self): ...
    def doDeserializeFromByteArray(self, byteArray: typing.Union[typing.List[int], jpype.JArray, bytes], int: int) -> int: ...
    def serializeToByteList(self) -> java.util.List[int]: ...

class PropertyID:
    id: int = ...
    type: int = ...
    boolValue: int = ...
    value: int = ...
    def __init__(self): ...
    def doDeserializeFromByteArray(self, byteArray: typing.Union[typing.List[int], jpype.JArray, bytes], int: int) -> int: ...
    def serializeToByteList(self) -> java.util.List[int]: ...

class PropertyType(java.lang.Enum['PropertyType']):
    NoData: typing.ClassVar['PropertyType'] = ...
    Bool: typing.ClassVar['PropertyType'] = ...
    OneByteOfData: typing.ClassVar['PropertyType'] = ...
    TwoBytesOfData: typing.ClassVar['PropertyType'] = ...
    FourBytesOfData: typing.ClassVar['PropertyType'] = ...
    EightBytesOfData: typing.ClassVar['PropertyType'] = ...
    FourBytesOfLengthFollowedByData: typing.ClassVar['PropertyType'] = ...
    ObjectID: typing.ClassVar['PropertyType'] = ...
    ArrayOfObjectIDs: typing.ClassVar['PropertyType'] = ...
    ObjectSpaceID: typing.ClassVar['PropertyType'] = ...
    ArrayOfObjectSpaceIDs: typing.ClassVar['PropertyType'] = ...
    ContextID: typing.ClassVar['PropertyType'] = ...
    ArrayOfContextIDs: typing.ClassVar['PropertyType'] = ...
    ArrayOfPropertyValues: typing.ClassVar['PropertyType'] = ...
    PropertySet: typing.ClassVar['PropertyType'] = ...
    @staticmethod
    def fromIntVal(int: int) -> 'PropertyType': ...
    def getIntVal(self) -> int: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'PropertyType': ...
    @staticmethod
    def values() -> typing.MutableSequence['PropertyType']: ...

class RequestTypes(java.lang.Enum['RequestTypes']):
    QueryAccess: typing.ClassVar['RequestTypes'] = ...
    QueryChanges: typing.ClassVar['RequestTypes'] = ...
    QueryKnowledge: typing.ClassVar['RequestTypes'] = ...
    PutChanges: typing.ClassVar['RequestTypes'] = ...
    QueryRawStorage: typing.ClassVar['RequestTypes'] = ...
    PutRawStorage: typing.ClassVar['RequestTypes'] = ...
    QueryDiagnosticStoreInfo: typing.ClassVar['RequestTypes'] = ...
    AllocateExtendedGuidRange: typing.ClassVar['RequestTypes'] = ...
    def getIntVal(self) -> int: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @typing.overload
    @staticmethod
    def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
    @typing.overload
    @staticmethod
    def valueOf(string: str) -> 'RequestTypes': ...
    @staticmethod
    def values() -> typing.MutableSequence['RequestTypes']: ...

class ZipHeader:
    LOCAL_FILE_HEADER: typing.ClassVar[typing.MutableSequence[int]] = ...
    @staticmethod
    def isFileHeader(byteArray: typing.Union[typing.List[int], jpype.JArray, bytes], int: int) -> bool: ...

class BinaryItem(BasicObject):
    length: 'Compact64bitInt' = ...
    content: java.util.List = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, collection: typing.Union[java.util.Collection[int], typing.Sequence[int], typing.Set[int]]): ...
    def serializeToByteList(self) -> java.util.List[int]: ...

class CellID(BasicObject):
    extendGUID1: 'ExGuid' = ...
    extendGUID2: 'ExGuid' = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, cellID: 'CellID'): ...
    @typing.overload
    def __init__(self, exGuid: 'ExGuid', exGuid2: 'ExGuid'): ...
    def equals(self, object: typing.Any) -> bool: ...
    def hashCode(self) -> int: ...
    def serializeToByteList(self) -> java.util.List[int]: ...

class CellIDArray(BasicObject):
    count: int = ...
    content: java.util.List = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, long: int, list: java.util.List[CellID]): ...
    @typing.overload
    def __init__(self, cellIDArray: 'CellIDArray'): ...
    def serializeToByteList(self) -> java.util.List[int]: ...

class Compact64bitInt(BasicObject):
    CompactUintNullType: typing.ClassVar[int] = ...
    CompactUint7bitType: typing.ClassVar[int] = ...
    CompactUint14bitType: typing.ClassVar[int] = ...
    CompactUint21bitType: typing.ClassVar[int] = ...
    CompactUint28bitType: typing.ClassVar[int] = ...
    CompactUint35bitType: typing.ClassVar[int] = ...
    CompactUint42bitType: typing.ClassVar[int] = ...
    CompactUint49bitType: typing.ClassVar[int] = ...
    CompactUint64bitType: typing.ClassVar[int] = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, long: int): ...
    def getDecodedValue(self) -> int: ...
    def getType(self) -> int: ...
    def serializeToByteList(self) -> java.util.List[int]: ...
    def setDecodedValue(self, long: int) -> 'Compact64bitInt': ...
    def setType(self, int: int) -> 'Compact64bitInt': ...

class ExGUIDArray(BasicObject):
    count: Compact64bitInt = ...
    content: java.util.List = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, list: java.util.List['ExGuid']): ...
    @typing.overload
    def __init__(self, exGUIDArray: 'ExGUIDArray'): ...
    def getContent(self) -> java.util.List['ExGuid']: ...
    def serializeToByteList(self) -> java.util.List[int]: ...
    def setContent(self, list: java.util.List['ExGuid']) -> None: ...

class ExGuid(BasicObject):
    ExtendedGUIDNullType: typing.ClassVar[int] = ...
    ExtendedGUID5BitUintType: typing.ClassVar[int] = ...
    ExtendedGUID10BitUintType: typing.ClassVar[int] = ...
    ExtendedGUID17BitUintType: typing.ClassVar[int] = ...
    ExtendedGUID32BitUintType: typing.ClassVar[int] = ...
    type: int = ...
    value: int = ...
    guid: java.util.UUID = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, int: int, uUID: java.util.UUID): ...
    @typing.overload
    def __init__(self, exGuid: 'ExGuid'): ...
    def equals(self, object: typing.Any) -> bool: ...
    def hashCode(self) -> int: ...
    def serializeToByteList(self) -> java.util.List[int]: ...

class SerialNumber(BasicObject):
    type: int = ...
    guid: java.util.UUID = ...
    value: int = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, uUID: java.util.UUID, long: int): ...
    @typing.overload
    def __init__(self, serialNumber: 'SerialNumber'): ...
    def serializeToByteList(self) -> java.util.List[int]: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.apache.tika.parser.microsoft.onenote.fsshttpb.streamobj.basic")``.

    AdapterHelper: typing.Type[AdapterHelper]
    AlternativePackaging: typing.Type[AlternativePackaging]
    BasicObject: typing.Type[BasicObject]
    BinaryItem: typing.Type[BinaryItem]
    CellID: typing.Type[CellID]
    CellIDArray: typing.Type[CellIDArray]
    Compact64bitInt: typing.Type[Compact64bitInt]
    CompactID: typing.Type[CompactID]
    DataElementType: typing.Type[DataElementType]
    DataNodeObjectData: typing.Type[DataNodeObjectData]
    ExGUIDArray: typing.Type[ExGUIDArray]
    ExGuid: typing.Type[ExGuid]
    HeaderCell: typing.Type[HeaderCell]
    JCID: typing.Type[JCID]
    PropertyID: typing.Type[PropertyID]
    PropertyType: typing.Type[PropertyType]
    RequestTypes: typing.Type[RequestTypes]
    SerialNumber: typing.Type[SerialNumber]
    ZipHeader: typing.Type[ZipHeader]
