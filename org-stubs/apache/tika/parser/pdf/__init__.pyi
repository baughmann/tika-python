
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.io
import java.lang
import java.util
import org.apache.jempbox.xmp
import org.apache.pdfbox.pdmodel
import org.apache.pdfbox.pdmodel.common
import org.apache.pdfbox.rendering
import org.apache.tika.config
import org.apache.tika.metadata
import org.apache.tika.mime
import org.apache.tika.parser
import org.apache.tika.parser.pdf.image
import org.apache.tika.parser.pdf.updates
import org.apache.tika.parser.pdf.xmpschemas
import org.apache.tika.renderer
import org.xml.sax
import typing



class AccessChecker(java.io.Serializable):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, boolean: bool): ...
    def check(self, metadata: org.apache.tika.metadata.Metadata) -> None: ...
    def equals(self, object: typing.Any) -> bool: ...
    def hashCode(self) -> int: ...
    def isAllowExtractionForAccessibility(self) -> bool: ...

class OCRPageCounter:
    def __init__(self): ...
    def getCount(self) -> int: ...
    def increment(self) -> None: ...

class PDFParser(org.apache.tika.parser.Parser, org.apache.tika.parser.RenderingParser, org.apache.tika.config.Initializable):
    MEDIA_TYPE: typing.ClassVar[org.apache.tika.mime.MediaType] = ...
    def __init__(self): ...
    def checkInitialization(self, initializableProblemHandler: typing.Union[org.apache.tika.config.InitializableProblemHandler, typing.Callable]) -> None: ...
    def getAverageCharTolerance(self) -> float: ...
    def getDropThreshold(self) -> float: ...
    def getImageGraphicsEngineFactory(self) -> org.apache.tika.parser.pdf.image.ImageGraphicsEngineFactory: ...
    def getImageStrategy(self) -> str: ...
    def getMaxIncrementalUpdates(self) -> int: ...
    def getMaxMainMemoryBytes(self) -> int: ...
    def getOcrDPI(self) -> int: ...
    def getOcrImageFormatName(self) -> str: ...
    def getOcrImageQuality(self) -> float: ...
    def getOcrImageType(self) -> str: ...
    def getOcrRenderingStrategy(self) -> str: ...
    def getOcrStrategy(self) -> str: ...
    def getOcrStrategyAuto(self) -> str: ...
    def getPDFParserConfig(self) -> 'PDFParserConfig': ...
    def getRenderer(self) -> org.apache.tika.renderer.Renderer: ...
    def getSpacingTolerance(self) -> float: ...
    def getSupportedTypes(self, parseContext: org.apache.tika.parser.ParseContext) -> java.util.Set[org.apache.tika.mime.MediaType]: ...
    def initialize(self, map: typing.Union[java.util.Map[str, org.apache.tika.config.Param], typing.Mapping[str, org.apache.tika.config.Param]]) -> None: ...
    def isAllowExtractionForAccessibility(self) -> bool: ...
    def isCatchIntermediateExceptions(self) -> bool: ...
    def isDetectAngles(self) -> bool: ...
    def isEnableAutoSpace(self) -> bool: ...
    def isExtractAcroFormContent(self) -> bool: ...
    def isExtractActions(self) -> bool: ...
    def isExtractAnnotationText(self) -> bool: ...
    def isExtractBookmarksText(self) -> bool: ...
    def isExtractFontNames(self) -> bool: ...
    def isExtractIncrementalUpdateInfo(self) -> bool: ...
    def isExtractInlineImageMetadataOnly(self) -> bool: ...
    def isExtractInlineImages(self) -> bool: ...
    def isExtractMarkedContent(self) -> bool: ...
    def isExtractUniqueInlineImagesOnly(self) -> bool: ...
    def isIfXFAExtractOnlyXFA(self) -> bool: ...
    def isParseIncrementalUpdates(self) -> bool: ...
    def isSetKCMS(self) -> bool: ...
    def isSortByPosition(self) -> bool: ...
    def isSuppressDuplicateOverlappingText(self) -> bool: ...
    def isThrowOnEncryptedPayload(self) -> bool: ...
    def parse(self, inputStream: java.io.InputStream, contentHandler: org.xml.sax.ContentHandler, metadata: org.apache.tika.metadata.Metadata, parseContext: org.apache.tika.parser.ParseContext) -> None: ...
    def setAllowExtractionForAccessibility(self, boolean: bool) -> None: ...
    def setAverageCharTolerance(self, float: float) -> None: ...
    def setCatchIntermediateExceptions(self, boolean: bool) -> None: ...
    def setDetectAngles(self, boolean: bool) -> None: ...
    def setDropThreshold(self, float: float) -> None: ...
    def setEnableAutoSpace(self, boolean: bool) -> None: ...
    def setExtractAcroFormContent(self, boolean: bool) -> None: ...
    def setExtractActions(self, boolean: bool) -> None: ...
    def setExtractAnnotationText(self, boolean: bool) -> None: ...
    def setExtractBookmarksText(self, boolean: bool) -> None: ...
    def setExtractFontNames(self, boolean: bool) -> None: ...
    def setExtractIncrementalUpdateInfo(self, boolean: bool) -> None: ...
    def setExtractInlineImageMetadataOnly(self, boolean: bool) -> None: ...
    def setExtractInlineImages(self, boolean: bool) -> None: ...
    def setExtractMarkedContent(self, boolean: bool) -> None: ...
    def setExtractUniqueInlineImagesOnly(self, boolean: bool) -> None: ...
    def setIfXFAExtractOnlyXFA(self, boolean: bool) -> None: ...
    def setImageGraphicsEngineFactory(self, imageGraphicsEngineFactory: org.apache.tika.parser.pdf.image.ImageGraphicsEngineFactory) -> None: ...
    def setImageStrategy(self, string: str) -> None: ...
    def setMaxIncrementalUpdates(self, int: int) -> None: ...
    def setMaxMainMemoryBytes(self, long: int) -> None: ...
    def setOcrDPI(self, int: int) -> None: ...
    def setOcrImageFormatName(self, string: str) -> None: ...
    def setOcrImageQuality(self, float: float) -> None: ...
    def setOcrImageType(self, string: str) -> None: ...
    def setOcrRenderingStrategy(self, string: str) -> None: ...
    def setOcrStrategy(self, string: str) -> None: ...
    def setOcrStrategyAuto(self, string: str) -> None: ...
    def setPDFParserConfig(self, pDFParserConfig: 'PDFParserConfig') -> None: ...
    def setParseIncrementalUpdates(self, boolean: bool) -> None: ...
    def setRenderer(self, renderer: org.apache.tika.renderer.Renderer) -> None: ...
    def setSetKCMS(self, boolean: bool) -> None: ...
    def setSortByPosition(self, boolean: bool) -> None: ...
    def setSpacingTolerance(self, float: float) -> None: ...
    def setSuppressDuplicateOverlappingText(self, boolean: bool) -> None: ...
    def setThrowOnEncryptedPayload(self, boolean: bool) -> None: ...

class PDFParserConfig(java.io.Serializable):
    def __init__(self): ...
    def cloneAndUpdate(self, pDFParserConfig: 'PDFParserConfig') -> 'PDFParserConfig': ...
    def configure(self, pDF2XHTML: 'PDF2XHTML') -> None: ...
    def getAccessChecker(self) -> AccessChecker: ...
    def getAverageCharTolerance(self) -> float: ...
    def getDropThreshold(self) -> float: ...
    def getImageGraphicsEngineFactory(self) -> org.apache.tika.parser.pdf.image.ImageGraphicsEngineFactory: ...
    def getImageStrategy(self) -> 'PDFParserConfig.IMAGE_STRATEGY': ...
    def getMaxIncrementalUpdates(self) -> int: ...
    def getMaxMainMemoryBytes(self) -> int: ...
    def getOcrDPI(self) -> int: ...
    def getOcrImageFormatName(self) -> str: ...
    def getOcrImageQuality(self) -> float: ...
    def getOcrImageType(self) -> 'PDFParserConfig.TikaImageType': ...
    def getOcrRenderingStrategy(self) -> 'PDFParserConfig.OCR_RENDERING_STRATEGY': ...
    def getOcrStrategy(self) -> 'PDFParserConfig.OCR_STRATEGY': ...
    def getOcrStrategyAuto(self) -> 'PDFParserConfig.OCRStrategyAuto': ...
    def getRenderer(self) -> org.apache.tika.renderer.Renderer: ...
    def getSpacingTolerance(self) -> float: ...
    def isCatchIntermediateIOExceptions(self) -> bool: ...
    def isDetectAngles(self) -> bool: ...
    def isEnableAutoSpace(self) -> bool: ...
    def isExtractAcroFormContent(self) -> bool: ...
    def isExtractActions(self) -> bool: ...
    def isExtractAnnotationText(self) -> bool: ...
    def isExtractBookmarksText(self) -> bool: ...
    def isExtractFontNames(self) -> bool: ...
    def isExtractIncrementalUpdateInfo(self) -> bool: ...
    def isExtractInlineImageMetadataOnly(self) -> bool: ...
    def isExtractInlineImages(self) -> bool: ...
    def isExtractMarkedContent(self) -> bool: ...
    def isExtractUniqueInlineImagesOnly(self) -> bool: ...
    def isIfXFAExtractOnlyXFA(self) -> bool: ...
    def isParseIncrementalUpdates(self) -> bool: ...
    def isSetKCMS(self) -> bool: ...
    def isSortByPosition(self) -> bool: ...
    def isSuppressDuplicateOverlappingText(self) -> bool: ...
    def isThrowOnEncryptedPayload(self) -> bool: ...
    def setAccessChecker(self, accessChecker: AccessChecker) -> None: ...
    def setAverageCharTolerance(self, float: float) -> None: ...
    def setCatchIntermediateIOExceptions(self, boolean: bool) -> None: ...
    def setDetectAngles(self, boolean: bool) -> None: ...
    def setDropThreshold(self, float: float) -> None: ...
    def setEnableAutoSpace(self, boolean: bool) -> None: ...
    def setExtractAcroFormContent(self, boolean: bool) -> None: ...
    def setExtractActions(self, boolean: bool) -> None: ...
    def setExtractAnnotationText(self, boolean: bool) -> None: ...
    def setExtractBookmarksText(self, boolean: bool) -> None: ...
    def setExtractFontNames(self, boolean: bool) -> None: ...
    def setExtractIncrementalUpdateInfo(self, boolean: bool) -> None: ...
    def setExtractInlineImageMetadataOnly(self, boolean: bool) -> None: ...
    def setExtractInlineImages(self, boolean: bool) -> None: ...
    def setExtractMarkedContent(self, boolean: bool) -> None: ...
    def setExtractUniqueInlineImagesOnly(self, boolean: bool) -> None: ...
    def setIfXFAExtractOnlyXFA(self, boolean: bool) -> None: ...
    def setImageGraphicsEngineFactory(self, imageGraphicsEngineFactory: org.apache.tika.parser.pdf.image.ImageGraphicsEngineFactory) -> None: ...
    @typing.overload
    def setImageStrategy(self, string: str) -> None: ...
    @typing.overload
    def setImageStrategy(self, iMAGE_STRATEGY: 'PDFParserConfig.IMAGE_STRATEGY') -> None: ...
    def setMaxIncrementalUpdates(self, int: int) -> None: ...
    def setMaxMainMemoryBytes(self, long: int) -> None: ...
    def setOcrDPI(self, int: int) -> None: ...
    def setOcrImageFormatName(self, string: str) -> None: ...
    def setOcrImageQuality(self, float: float) -> None: ...
    @typing.overload
    def setOcrImageType(self, string: str) -> None: ...
    @typing.overload
    def setOcrImageType(self, tikaImageType: 'PDFParserConfig.TikaImageType') -> None: ...
    @typing.overload
    def setOcrRenderingStrategy(self, string: str) -> None: ...
    @typing.overload
    def setOcrRenderingStrategy(self, oCR_RENDERING_STRATEGY: 'PDFParserConfig.OCR_RENDERING_STRATEGY') -> None: ...
    @typing.overload
    def setOcrStrategy(self, string: str) -> None: ...
    @typing.overload
    def setOcrStrategy(self, oCR_STRATEGY: 'PDFParserConfig.OCR_STRATEGY') -> None: ...
    def setOcrStrategyAuto(self, string: str) -> None: ...
    def setParseIncrementalUpdates(self, boolean: bool) -> None: ...
    def setRenderer(self, renderer: org.apache.tika.renderer.Renderer) -> None: ...
    def setSetKCMS(self, boolean: bool) -> None: ...
    def setSortByPosition(self, boolean: bool) -> None: ...
    def setSpacingTolerance(self, float: float) -> None: ...
    def setSuppressDuplicateOverlappingText(self, boolean: bool) -> None: ...
    def setThrowOnEncryptedPayload(self, boolean: bool) -> None: ...
    class IMAGE_STRATEGY(java.lang.Enum['PDFParserConfig.IMAGE_STRATEGY']):
        NONE: typing.ClassVar['PDFParserConfig.IMAGE_STRATEGY'] = ...
        RAW_IMAGES: typing.ClassVar['PDFParserConfig.IMAGE_STRATEGY'] = ...
        RENDER_PAGES_BEFORE_PARSE: typing.ClassVar['PDFParserConfig.IMAGE_STRATEGY'] = ...
        RENDER_PAGES_AT_PAGE_END: typing.ClassVar['PDFParserConfig.IMAGE_STRATEGY'] = ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'PDFParserConfig.IMAGE_STRATEGY': ...
        @staticmethod
        def values() -> typing.MutableSequence['PDFParserConfig.IMAGE_STRATEGY']: ...
    class OCRStrategyAuto(java.io.Serializable):
        def __init__(self, float: float, int: int): ...
        def getTotalCharsPerPage(self) -> int: ...
        def getUnmappedUnicodeCharsPerPage(self) -> float: ...
        def toString(self) -> str: ...
    class OCR_RENDERING_STRATEGY(java.lang.Enum['PDFParserConfig.OCR_RENDERING_STRATEGY']):
        NO_TEXT: typing.ClassVar['PDFParserConfig.OCR_RENDERING_STRATEGY'] = ...
        TEXT_ONLY: typing.ClassVar['PDFParserConfig.OCR_RENDERING_STRATEGY'] = ...
        VECTOR_GRAPHICS_ONLY: typing.ClassVar['PDFParserConfig.OCR_RENDERING_STRATEGY'] = ...
        ALL: typing.ClassVar['PDFParserConfig.OCR_RENDERING_STRATEGY'] = ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'PDFParserConfig.OCR_RENDERING_STRATEGY': ...
        @staticmethod
        def values() -> typing.MutableSequence['PDFParserConfig.OCR_RENDERING_STRATEGY']: ...
    class OCR_STRATEGY(java.lang.Enum['PDFParserConfig.OCR_STRATEGY']):
        AUTO: typing.ClassVar['PDFParserConfig.OCR_STRATEGY'] = ...
        NO_OCR: typing.ClassVar['PDFParserConfig.OCR_STRATEGY'] = ...
        OCR_ONLY: typing.ClassVar['PDFParserConfig.OCR_STRATEGY'] = ...
        OCR_AND_TEXT_EXTRACTION: typing.ClassVar['PDFParserConfig.OCR_STRATEGY'] = ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'PDFParserConfig.OCR_STRATEGY': ...
        @staticmethod
        def values() -> typing.MutableSequence['PDFParserConfig.OCR_STRATEGY']: ...
    class TikaImageType(java.lang.Enum['PDFParserConfig.TikaImageType']):
        RGB: typing.ClassVar['PDFParserConfig.TikaImageType'] = ...
        GRAY: typing.ClassVar['PDFParserConfig.TikaImageType'] = ...
        def getImageType(self) -> org.apache.pdfbox.rendering.ImageType: ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'PDFParserConfig.TikaImageType': ...
        @staticmethod
        def values() -> typing.MutableSequence['PDFParserConfig.TikaImageType']: ...

class PDMetadataExtractor:
    def __init__(self): ...
    @typing.overload
    @staticmethod
    def extract(xMPMetadata: org.apache.jempbox.xmp.XMPMetadata, metadata: org.apache.tika.metadata.Metadata, parseContext: org.apache.tika.parser.ParseContext) -> None: ...
    @typing.overload
    @staticmethod
    def extract(pDMetadata: org.apache.pdfbox.pdmodel.common.PDMetadata, metadata: org.apache.tika.metadata.Metadata, parseContext: org.apache.tika.parser.ParseContext) -> None: ...

class PDF2XHTML: ...

class PDFMarkedContent2XHTML(PDF2XHTML):
    @staticmethod
    def process(pDDocument: org.apache.pdfbox.pdmodel.PDDocument, contentHandler: org.xml.sax.ContentHandler, parseContext: org.apache.tika.parser.ParseContext, metadata: org.apache.tika.metadata.Metadata, pDFParserConfig: PDFParserConfig) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.apache.tika.parser.pdf")``.

    AccessChecker: typing.Type[AccessChecker]
    OCRPageCounter: typing.Type[OCRPageCounter]
    PDF2XHTML: typing.Type[PDF2XHTML]
    PDFMarkedContent2XHTML: typing.Type[PDFMarkedContent2XHTML]
    PDFParser: typing.Type[PDFParser]
    PDFParserConfig: typing.Type[PDFParserConfig]
    PDMetadataExtractor: typing.Type[PDMetadataExtractor]
    image: org.apache.tika.parser.pdf.image.__module_protocol__
    updates: org.apache.tika.parser.pdf.updates.__module_protocol__
    xmpschemas: org.apache.tika.parser.pdf.xmpschemas.__module_protocol__
