
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.io
import java.lang
import java.util
import org.apache.tika.config
import org.apache.tika.io
import org.apache.tika.metadata
import org.apache.tika.mime
import org.apache.tika.parser
import org.apache.tika.renderer.pdf
import typing



class RenderRequest: ...

class RenderResult(java.io.Closeable):
    def __init__(self, sTATUS: 'RenderResult.STATUS', int: int, object: typing.Any, metadata: org.apache.tika.metadata.Metadata): ...
    def close(self) -> None: ...
    def getId(self) -> int: ...
    def getInputStream(self) -> java.io.InputStream: ...
    def getMetadata(self) -> org.apache.tika.metadata.Metadata: ...
    def getStatus(self) -> 'RenderResult.STATUS': ...
    class STATUS(java.lang.Enum['RenderResult.STATUS']):
        SUCCESS: typing.ClassVar['RenderResult.STATUS'] = ...
        EXCEPTION: typing.ClassVar['RenderResult.STATUS'] = ...
        TIMEOUT: typing.ClassVar['RenderResult.STATUS'] = ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'RenderResult.STATUS': ...
        @staticmethod
        def values() -> typing.MutableSequence['RenderResult.STATUS']: ...

class RenderResults(java.io.Closeable):
    def __init__(self, temporaryResources: org.apache.tika.io.TemporaryResources): ...
    def add(self, renderResult: RenderResult) -> None: ...
    def close(self) -> None: ...
    def getResults(self) -> java.util.List[RenderResult]: ...

class Renderer(java.io.Serializable):
    def getSupportedTypes(self, parseContext: org.apache.tika.parser.ParseContext) -> java.util.Set[org.apache.tika.mime.MediaType]: ...
    def render(self, inputStream: java.io.InputStream, metadata: org.apache.tika.metadata.Metadata, parseContext: org.apache.tika.parser.ParseContext, *renderRequest: RenderRequest) -> RenderResults: ...

class RenderingState:
    def __init__(self): ...

class RenderingTracker:
    def __init__(self): ...
    def getNextId(self) -> int: ...

class CompositeRenderer(Renderer, org.apache.tika.config.Initializable):
    @typing.overload
    def __init__(self, list: java.util.List[Renderer]): ...
    @typing.overload
    def __init__(self, serviceLoader: org.apache.tika.config.ServiceLoader): ...
    def checkInitialization(self, initializableProblemHandler: typing.Union[org.apache.tika.config.InitializableProblemHandler, typing.Callable]) -> None: ...
    def getLeafRenderer(self, mediaType: org.apache.tika.mime.MediaType) -> Renderer: ...
    def getSupportedTypes(self, parseContext: org.apache.tika.parser.ParseContext) -> java.util.Set[org.apache.tika.mime.MediaType]: ...
    def initialize(self, map: typing.Union[java.util.Map[str, org.apache.tika.config.Param], typing.Mapping[str, org.apache.tika.config.Param]]) -> None: ...
    def render(self, inputStream: java.io.InputStream, metadata: org.apache.tika.metadata.Metadata, parseContext: org.apache.tika.parser.ParseContext, *renderRequest: RenderRequest) -> RenderResults: ...

class PageBasedRenderResults(RenderResults):
    def __init__(self, temporaryResources: org.apache.tika.io.TemporaryResources): ...
    def add(self, renderResult: RenderResult) -> None: ...
    def getPage(self, int: int) -> java.util.List[RenderResult]: ...

class PageRangeRequest(RenderRequest):
    RENDER_ALL: typing.ClassVar['PageRangeRequest'] = ...
    def __init__(self, int: int, int2: int): ...
    def equals(self, object: typing.Any) -> bool: ...
    def getFrom(self) -> int: ...
    def getTo(self) -> int: ...
    def hashCode(self) -> int: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.apache.tika.renderer")``.

    CompositeRenderer: typing.Type[CompositeRenderer]
    PageBasedRenderResults: typing.Type[PageBasedRenderResults]
    PageRangeRequest: typing.Type[PageRangeRequest]
    RenderRequest: typing.Type[RenderRequest]
    RenderResult: typing.Type[RenderResult]
    RenderResults: typing.Type[RenderResults]
    Renderer: typing.Type[Renderer]
    RenderingState: typing.Type[RenderingState]
    RenderingTracker: typing.Type[RenderingTracker]
    pdf: org.apache.tika.renderer.pdf.__module_protocol__
