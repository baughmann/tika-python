
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.io
import java.util
import jpype
import org.apache.tika.metadata
import org.apache.tika.mime
import org.apache.tika.parser
import org.xml.sax
import typing



class ID3Tags:
    GENRES: typing.ClassVar[typing.MutableSequence[str]] = ...
    def getAlbum(self) -> str: ...
    def getAlbumArtist(self) -> str: ...
    def getArtist(self) -> str: ...
    def getComments(self) -> java.util.List['ID3Tags.ID3Comment']: ...
    def getCompilation(self) -> str: ...
    def getComposer(self) -> str: ...
    def getDisc(self) -> str: ...
    def getGenre(self) -> str: ...
    def getTagsPresent(self) -> bool: ...
    def getTitle(self) -> str: ...
    def getTrackNumber(self) -> str: ...
    def getYear(self) -> str: ...
    class ID3Comment:
        @typing.overload
        def __init__(self, string: str): ...
        @typing.overload
        def __init__(self, string: str, string2: str, string3: str): ...
        def getDescription(self) -> str: ...
        def getLanguage(self) -> str: ...
        def getText(self) -> str: ...

class LyricsHandler:
    def __init__(self, inputStream: java.io.InputStream, contentHandler: org.xml.sax.ContentHandler): ...
    def hasID3v1(self) -> bool: ...
    def hasLyrics(self) -> bool: ...

class MP3Frame: ...

class Mp3Parser(org.apache.tika.parser.Parser):
    def __init__(self): ...
    def getMaxRecordSize(self) -> int: ...
    def getSupportedTypes(self, parseContext: org.apache.tika.parser.ParseContext) -> java.util.Set[org.apache.tika.mime.MediaType]: ...
    def parse(self, inputStream: java.io.InputStream, contentHandler: org.xml.sax.ContentHandler, metadata: org.apache.tika.metadata.Metadata, parseContext: org.apache.tika.parser.ParseContext) -> None: ...
    def setMaxRecordSize(self, int: int) -> None: ...

class AudioFrame(MP3Frame):
    MPEG_V1: typing.ClassVar[int] = ...
    MPEG_V2: typing.ClassVar[int] = ...
    MPEG_V2_5: typing.ClassVar[int] = ...
    LAYER_1: typing.ClassVar[int] = ...
    LAYER_2: typing.ClassVar[int] = ...
    LAYER_3: typing.ClassVar[int] = ...
    @typing.overload
    def __init__(self, int: int, int2: int, int3: int, int4: int, int5: int, int6: int, float: float): ...
    @typing.overload
    def __init__(self, int: int, int2: int, int3: int, int4: int, inputStream: java.io.InputStream): ...
    @typing.overload
    def __init__(self, inputStream: java.io.InputStream, contentHandler: org.xml.sax.ContentHandler): ...
    def getBitRate(self) -> int: ...
    def getChannels(self) -> int: ...
    def getDuration(self) -> float: ...
    def getLayer(self) -> int: ...
    def getLength(self) -> int: ...
    def getSampleRate(self) -> int: ...
    def getVersion(self) -> str: ...
    def getVersionCode(self) -> int: ...
    @staticmethod
    def isAudioHeader(int: int, int2: int, int3: int, int4: int) -> bool: ...

class CompositeTagHandler(ID3Tags):
    def __init__(self, iD3TagsArray: typing.Union[typing.List[ID3Tags], jpype.JArray]): ...
    def getAlbum(self) -> str: ...
    def getAlbumArtist(self) -> str: ...
    def getArtist(self) -> str: ...
    def getComments(self) -> java.util.List[ID3Tags.ID3Comment]: ...
    def getCompilation(self) -> str: ...
    def getComposer(self) -> str: ...
    def getDisc(self) -> str: ...
    def getGenre(self) -> str: ...
    def getTagsPresent(self) -> bool: ...
    def getTitle(self) -> str: ...
    def getTrackNumber(self) -> str: ...
    def getYear(self) -> str: ...

class ID3v1Handler(ID3Tags):
    def __init__(self, inputStream: java.io.InputStream, contentHandler: org.xml.sax.ContentHandler): ...
    def getAlbum(self) -> str: ...
    def getAlbumArtist(self) -> str: ...
    def getArtist(self) -> str: ...
    def getComments(self) -> java.util.List[ID3Tags.ID3Comment]: ...
    def getCompilation(self) -> str: ...
    def getComposer(self) -> str: ...
    def getDisc(self) -> str: ...
    def getGenre(self) -> str: ...
    def getTagsPresent(self) -> bool: ...
    def getTitle(self) -> str: ...
    def getTrackNumber(self) -> str: ...
    def getYear(self) -> str: ...

class ID3v22Handler(ID3Tags):
    def __init__(self, iD3v2Frame: 'ID3v2Frame'): ...
    def getAlbum(self) -> str: ...
    def getAlbumArtist(self) -> str: ...
    def getArtist(self) -> str: ...
    def getComments(self) -> java.util.List[ID3Tags.ID3Comment]: ...
    def getCompilation(self) -> str: ...
    def getComposer(self) -> str: ...
    def getDisc(self) -> str: ...
    def getGenre(self) -> str: ...
    def getTagsPresent(self) -> bool: ...
    def getTitle(self) -> str: ...
    def getTrackNumber(self) -> str: ...
    def getYear(self) -> str: ...

class ID3v23Handler(ID3Tags):
    def __init__(self, iD3v2Frame: 'ID3v2Frame'): ...
    def getAlbum(self) -> str: ...
    def getAlbumArtist(self) -> str: ...
    def getArtist(self) -> str: ...
    def getComments(self) -> java.util.List[ID3Tags.ID3Comment]: ...
    def getCompilation(self) -> str: ...
    def getComposer(self) -> str: ...
    def getDisc(self) -> str: ...
    def getGenre(self) -> str: ...
    def getTagsPresent(self) -> bool: ...
    def getTitle(self) -> str: ...
    def getTrackNumber(self) -> str: ...
    def getYear(self) -> str: ...

class ID3v24Handler(ID3Tags):
    def __init__(self, iD3v2Frame: 'ID3v2Frame'): ...
    def getAlbum(self) -> str: ...
    def getAlbumArtist(self) -> str: ...
    def getArtist(self) -> str: ...
    def getComments(self) -> java.util.List[ID3Tags.ID3Comment]: ...
    def getCompilation(self) -> str: ...
    def getComposer(self) -> str: ...
    def getDisc(self) -> str: ...
    def getGenre(self) -> str: ...
    def getTagsPresent(self) -> bool: ...
    def getTitle(self) -> str: ...
    def getTrackNumber(self) -> str: ...
    def getYear(self) -> str: ...

class ID3v2Frame(MP3Frame):
    @staticmethod
    def createFrameIfPresent(inputStream: java.io.InputStream) -> MP3Frame: ...
    def getData(self) -> typing.MutableSequence[int]: ...
    def getExtendedHeader(self) -> typing.MutableSequence[int]: ...
    def getFlags(self) -> int: ...
    def getLength(self) -> int: ...
    def getMajorVersion(self) -> int: ...
    @staticmethod
    def getMaxRecordSize() -> int: ...
    def getMinorVersion(self) -> int: ...
    @staticmethod
    def setMaxRecordSize(int: int) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.apache.tika.parser.mp3")``.

    AudioFrame: typing.Type[AudioFrame]
    CompositeTagHandler: typing.Type[CompositeTagHandler]
    ID3Tags: typing.Type[ID3Tags]
    ID3v1Handler: typing.Type[ID3v1Handler]
    ID3v22Handler: typing.Type[ID3v22Handler]
    ID3v23Handler: typing.Type[ID3v23Handler]
    ID3v24Handler: typing.Type[ID3v24Handler]
    ID3v2Frame: typing.Type[ID3v2Frame]
    LyricsHandler: typing.Type[LyricsHandler]
    MP3Frame: typing.Type[MP3Frame]
    Mp3Parser: typing.Type[Mp3Parser]
