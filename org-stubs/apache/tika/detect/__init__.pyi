
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.io
import java.lang
import java.nio.charset
import java.nio.file
import java.util
import java.util.regex
import javax.xml.namespace
import jpype
import jpype.protocol
import org.apache.tika.config
import org.apache.tika.detect.apple
import org.apache.tika.detect.gzip
import org.apache.tika.detect.microsoft
import org.apache.tika.detect.ole
import org.apache.tika.detect.zip
import org.apache.tika.metadata
import org.apache.tika.mime
import org.xml.sax
import typing



class AutoDetectReader(java.io.BufferedReader):
    @typing.overload
    def __init__(self, inputStream: java.io.InputStream): ...
    @typing.overload
    def __init__(self, inputStream: java.io.InputStream, metadata: org.apache.tika.metadata.Metadata): ...
    @typing.overload
    def __init__(self, inputStream: java.io.InputStream, metadata: org.apache.tika.metadata.Metadata, serviceLoader: org.apache.tika.config.ServiceLoader): ...
    @typing.overload
    def __init__(self, inputStream: java.io.InputStream, metadata: org.apache.tika.metadata.Metadata, encodingDetector: typing.Union['EncodingDetector', typing.Callable]): ...
    def asInputSource(self) -> org.xml.sax.InputSource: ...
    def getCharset(self) -> java.nio.charset.Charset: ...

class Detector(java.io.Serializable):
    def detect(self, inputStream: java.io.InputStream, metadata: org.apache.tika.metadata.Metadata) -> org.apache.tika.mime.MediaType: ...

class EncodingDetector(java.io.Serializable):
    def detect(self, inputStream: java.io.InputStream, metadata: org.apache.tika.metadata.Metadata) -> java.nio.charset.Charset: ...

class NNTrainedModelBuilder:
    def __init__(self): ...
    def build(self) -> 'NNTrainedModel': ...
    def getNumOfHidden(self) -> int: ...
    def getNumOfInputs(self) -> int: ...
    def getNumOfOutputs(self) -> int: ...
    def getParams(self) -> typing.MutableSequence[float]: ...
    def getType(self) -> org.apache.tika.mime.MediaType: ...
    def setNumOfHidden(self, int: int) -> None: ...
    def setNumOfInputs(self, int: int) -> None: ...
    def setNumOfOutputs(self, int: int) -> None: ...
    def setParams(self, floatArray: typing.Union[typing.List[float], jpype.JArray]) -> None: ...
    def setType(self, mediaType: org.apache.tika.mime.MediaType) -> None: ...

class TextStatistics:
    def __init__(self): ...
    def addData(self, byteArray: typing.Union[typing.List[int], jpype.JArray, bytes], int: int, int2: int) -> None: ...
    @typing.overload
    def count(self) -> int: ...
    @typing.overload
    def count(self, int: int) -> int: ...
    def countControl(self) -> int: ...
    def countEightBit(self) -> int: ...
    def countSafeAscii(self) -> int: ...
    def isMostlyAscii(self) -> bool: ...
    def looksLikeUTF8(self) -> bool: ...

class TrainedModel:
    def __init__(self): ...
    @typing.overload
    def predict(self, doubleArray: typing.Union[typing.List[float], jpype.JArray]) -> float: ...
    @typing.overload
    def predict(self, floatArray: typing.Union[typing.List[float], jpype.JArray]) -> float: ...

class XmlRootExtractor:
    def __init__(self): ...
    @typing.overload
    def extractRootElement(self, byteArray: typing.Union[typing.List[int], jpype.JArray, bytes]) -> javax.xml.namespace.QName: ...
    @typing.overload
    def extractRootElement(self, inputStream: java.io.InputStream) -> javax.xml.namespace.QName: ...

class CompositeDetector(Detector):
    @typing.overload
    def __init__(self, list: java.util.List[typing.Union[Detector, typing.Callable]]): ...
    @typing.overload
    def __init__(self, *detector: typing.Union[Detector, typing.Callable]): ...
    @typing.overload
    def __init__(self, mediaTypeRegistry: org.apache.tika.mime.MediaTypeRegistry, list: java.util.List[typing.Union[Detector, typing.Callable]]): ...
    @typing.overload
    def __init__(self, mediaTypeRegistry: org.apache.tika.mime.MediaTypeRegistry, list: java.util.List[typing.Union[Detector, typing.Callable]], collection: typing.Union[java.util.Collection[typing.Type[Detector]], typing.Sequence[typing.Type[Detector]], typing.Set[typing.Type[Detector]]]): ...
    def detect(self, inputStream: java.io.InputStream, metadata: org.apache.tika.metadata.Metadata) -> org.apache.tika.mime.MediaType: ...
    def getDetectors(self) -> java.util.List[Detector]: ...

class CompositeEncodingDetector(EncodingDetector, java.io.Serializable):
    @typing.overload
    def __init__(self, list: java.util.List[typing.Union[EncodingDetector, typing.Callable]]): ...
    @typing.overload
    def __init__(self, list: java.util.List[typing.Union[EncodingDetector, typing.Callable]], collection: typing.Union[java.util.Collection[typing.Type[EncodingDetector]], typing.Sequence[typing.Type[EncodingDetector]], typing.Set[typing.Type[EncodingDetector]]]): ...
    def detect(self, inputStream: java.io.InputStream, metadata: org.apache.tika.metadata.Metadata) -> java.nio.charset.Charset: ...
    def getDetectors(self) -> java.util.List[EncodingDetector]: ...

class EmptyDetector(Detector):
    INSTANCE: typing.ClassVar['EmptyDetector'] = ...
    def __init__(self): ...
    def detect(self, inputStream: java.io.InputStream, metadata: org.apache.tika.metadata.Metadata) -> org.apache.tika.mime.MediaType: ...

class FileCommandDetector(Detector):
    FILE_MIME: typing.ClassVar[org.apache.tika.metadata.Property] = ...
    def __init__(self): ...
    @typing.overload
    @staticmethod
    def checkHasFile() -> bool: ...
    @typing.overload
    @staticmethod
    def checkHasFile(string: str) -> bool: ...
    def detect(self, inputStream: java.io.InputStream, metadata: org.apache.tika.metadata.Metadata) -> org.apache.tika.mime.MediaType: ...
    def isUseMime(self) -> bool: ...
    def setFilePath(self, string: str) -> None: ...
    def setMaxBytes(self, int: int) -> None: ...
    def setTimeoutMs(self, long: int) -> None: ...
    def setUseMime(self, boolean: bool) -> None: ...

class MagicDetector(Detector):
    @typing.overload
    def __init__(self, mediaType: org.apache.tika.mime.MediaType, byteArray: typing.Union[typing.List[int], jpype.JArray, bytes]): ...
    @typing.overload
    def __init__(self, mediaType: org.apache.tika.mime.MediaType, byteArray: typing.Union[typing.List[int], jpype.JArray, bytes], byteArray2: typing.Union[typing.List[int], jpype.JArray, bytes], boolean: bool, boolean2: bool, int: int, int2: int): ...
    @typing.overload
    def __init__(self, mediaType: org.apache.tika.mime.MediaType, byteArray: typing.Union[typing.List[int], jpype.JArray, bytes], byteArray2: typing.Union[typing.List[int], jpype.JArray, bytes], boolean: bool, int: int, int2: int): ...
    @typing.overload
    def __init__(self, mediaType: org.apache.tika.mime.MediaType, byteArray: typing.Union[typing.List[int], jpype.JArray, bytes], byteArray2: typing.Union[typing.List[int], jpype.JArray, bytes], int: int, int2: int): ...
    @typing.overload
    def __init__(self, mediaType: org.apache.tika.mime.MediaType, byteArray: typing.Union[typing.List[int], jpype.JArray, bytes], int: int): ...
    def detect(self, inputStream: java.io.InputStream, metadata: org.apache.tika.metadata.Metadata) -> org.apache.tika.mime.MediaType: ...
    def getLength(self) -> int: ...
    @staticmethod
    def parse(mediaType: org.apache.tika.mime.MediaType, string: str, string2: str, string3: str, string4: str) -> 'MagicDetector': ...
    def toString(self) -> str: ...

class NNTrainedModel(TrainedModel):
    def __init__(self, int: int, int2: int, int3: int, floatArray: typing.Union[typing.List[float], jpype.JArray]): ...
    @typing.overload
    def predict(self, doubleArray: typing.Union[typing.List[float], jpype.JArray]) -> float: ...
    @typing.overload
    def predict(self, floatArray: typing.Union[typing.List[float], jpype.JArray]) -> float: ...

class NameDetector(Detector):
    def __init__(self, map: typing.Union[java.util.Map[java.util.regex.Pattern, org.apache.tika.mime.MediaType], typing.Mapping[java.util.regex.Pattern, org.apache.tika.mime.MediaType]]): ...
    def detect(self, inputStream: java.io.InputStream, metadata: org.apache.tika.metadata.Metadata) -> org.apache.tika.mime.MediaType: ...

class NonDetectingEncodingDetector(EncodingDetector):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, charset: java.nio.charset.Charset): ...
    def detect(self, inputStream: java.io.InputStream, metadata: org.apache.tika.metadata.Metadata) -> java.nio.charset.Charset: ...
    def getCharset(self) -> java.nio.charset.Charset: ...

class OverrideDetector(Detector):
    def __init__(self): ...
    def detect(self, inputStream: java.io.InputStream, metadata: org.apache.tika.metadata.Metadata) -> org.apache.tika.mime.MediaType: ...

class TextDetector(Detector):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, int: int): ...
    def detect(self, inputStream: java.io.InputStream, metadata: org.apache.tika.metadata.Metadata) -> org.apache.tika.mime.MediaType: ...

class TrainedModelDetector(Detector):
    def __init__(self): ...
    def detect(self, inputStream: java.io.InputStream, metadata: org.apache.tika.metadata.Metadata) -> org.apache.tika.mime.MediaType: ...
    def getMinLength(self) -> int: ...
    @typing.overload
    def loadDefaultModels(self, inputStream: java.io.InputStream) -> None: ...
    @typing.overload
    def loadDefaultModels(self, classLoader: java.lang.ClassLoader) -> None: ...
    @typing.overload
    def loadDefaultModels(self, file: typing.Union[java.io.File, jpype.protocol.SupportsPath]) -> None: ...
    @typing.overload
    def loadDefaultModels(self, path: typing.Union[java.nio.file.Path, jpype.protocol.SupportsPath]) -> None: ...

class TypeDetector(Detector):
    def __init__(self): ...
    def detect(self, inputStream: java.io.InputStream, metadata: org.apache.tika.metadata.Metadata) -> org.apache.tika.mime.MediaType: ...

class ZeroSizeFileDetector(Detector):
    def __init__(self): ...
    def detect(self, inputStream: java.io.InputStream, metadata: org.apache.tika.metadata.Metadata) -> org.apache.tika.mime.MediaType: ...

class DefaultDetector(CompositeDetector):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, classLoader: java.lang.ClassLoader): ...
    @typing.overload
    def __init__(self, mimeTypes: org.apache.tika.mime.MimeTypes): ...
    @typing.overload
    def __init__(self, mimeTypes: org.apache.tika.mime.MimeTypes, classLoader: java.lang.ClassLoader): ...
    @typing.overload
    def __init__(self, mimeTypes: org.apache.tika.mime.MimeTypes, serviceLoader: org.apache.tika.config.ServiceLoader): ...
    @typing.overload
    def __init__(self, mimeTypes: org.apache.tika.mime.MimeTypes, serviceLoader: org.apache.tika.config.ServiceLoader, collection: typing.Union[java.util.Collection[typing.Type[Detector]], typing.Sequence[typing.Type[Detector]], typing.Set[typing.Type[Detector]]]): ...
    def getDetectors(self) -> java.util.List[Detector]: ...

class DefaultEncodingDetector(CompositeEncodingDetector):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, serviceLoader: org.apache.tika.config.ServiceLoader): ...
    @typing.overload
    def __init__(self, serviceLoader: org.apache.tika.config.ServiceLoader, collection: typing.Union[java.util.Collection[typing.Type[EncodingDetector]], typing.Sequence[typing.Type[EncodingDetector]], typing.Set[typing.Type[EncodingDetector]]]): ...

class DefaultProbDetector(CompositeDetector):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, classLoader: java.lang.ClassLoader): ...
    @typing.overload
    def __init__(self, mimeTypes: org.apache.tika.mime.MimeTypes): ...
    @typing.overload
    def __init__(self, probabilisticMimeDetectionSelector: org.apache.tika.mime.ProbabilisticMimeDetectionSelector, classLoader: java.lang.ClassLoader): ...
    @typing.overload
    def __init__(self, probabilisticMimeDetectionSelector: org.apache.tika.mime.ProbabilisticMimeDetectionSelector, serviceLoader: org.apache.tika.config.ServiceLoader): ...
    def getDetectors(self) -> java.util.List[Detector]: ...

class NNExampleModelDetector(TrainedModelDetector):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, file: typing.Union[java.io.File, jpype.protocol.SupportsPath]): ...
    @typing.overload
    def __init__(self, path: typing.Union[java.nio.file.Path, jpype.protocol.SupportsPath]): ...
    @typing.overload
    def loadDefaultModels(self, inputStream: java.io.InputStream) -> None: ...
    @typing.overload
    def loadDefaultModels(self, classLoader: java.lang.ClassLoader) -> None: ...
    @typing.overload
    def loadDefaultModels(self, file: typing.Union[java.io.File, jpype.protocol.SupportsPath]) -> None: ...
    @typing.overload
    def loadDefaultModels(self, path: typing.Union[java.nio.file.Path, jpype.protocol.SupportsPath]) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.apache.tika.detect")``.

    AutoDetectReader: typing.Type[AutoDetectReader]
    CompositeDetector: typing.Type[CompositeDetector]
    CompositeEncodingDetector: typing.Type[CompositeEncodingDetector]
    DefaultDetector: typing.Type[DefaultDetector]
    DefaultEncodingDetector: typing.Type[DefaultEncodingDetector]
    DefaultProbDetector: typing.Type[DefaultProbDetector]
    Detector: typing.Type[Detector]
    EmptyDetector: typing.Type[EmptyDetector]
    EncodingDetector: typing.Type[EncodingDetector]
    FileCommandDetector: typing.Type[FileCommandDetector]
    MagicDetector: typing.Type[MagicDetector]
    NNExampleModelDetector: typing.Type[NNExampleModelDetector]
    NNTrainedModel: typing.Type[NNTrainedModel]
    NNTrainedModelBuilder: typing.Type[NNTrainedModelBuilder]
    NameDetector: typing.Type[NameDetector]
    NonDetectingEncodingDetector: typing.Type[NonDetectingEncodingDetector]
    OverrideDetector: typing.Type[OverrideDetector]
    TextDetector: typing.Type[TextDetector]
    TextStatistics: typing.Type[TextStatistics]
    TrainedModel: typing.Type[TrainedModel]
    TrainedModelDetector: typing.Type[TrainedModelDetector]
    TypeDetector: typing.Type[TypeDetector]
    XmlRootExtractor: typing.Type[XmlRootExtractor]
    ZeroSizeFileDetector: typing.Type[ZeroSizeFileDetector]
    apple: org.apache.tika.detect.apple.__module_protocol__
    gzip: org.apache.tika.detect.gzip.__module_protocol__
    microsoft: org.apache.tika.detect.microsoft.__module_protocol__
    ole: org.apache.tika.detect.ole.__module_protocol__
    zip: org.apache.tika.detect.zip.__module_protocol__
