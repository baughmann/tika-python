
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.io
import java.lang
import java.util
import java.util.zip
import org.apache.commons.compress.archivers.zip
import org.apache.tika.metadata
import org.apache.tika.mime
import org.apache.tika.parser
import org.xml.sax
import typing



class IWork13PackageParser(org.apache.tika.parser.Parser):
    IWORK13_COMMON_ENTRY: typing.ClassVar[str] = ...
    IWORK13_MAIN_ENTRY: typing.ClassVar[str] = ...
    IWORKS_PREFIX: typing.ClassVar[str] = ...
    IWORKS_DOC_ID: typing.ClassVar[org.apache.tika.metadata.Property] = ...
    IWORKS_BUILD_VERSION_HISTORY: typing.ClassVar[org.apache.tika.metadata.Property] = ...
    def __init__(self): ...
    def getSupportedTypes(self, parseContext: org.apache.tika.parser.ParseContext) -> java.util.Set[org.apache.tika.mime.MediaType]: ...
    def parse(self, inputStream: java.io.InputStream, contentHandler: org.xml.sax.ContentHandler, metadata: org.apache.tika.metadata.Metadata, parseContext: org.apache.tika.parser.ParseContext) -> None: ...
    class IWork13DocumentType(java.lang.Enum['IWork13PackageParser.IWork13DocumentType']):
        KEYNOTE13: typing.ClassVar['IWork13PackageParser.IWork13DocumentType'] = ...
        NUMBERS13: typing.ClassVar['IWork13PackageParser.IWork13DocumentType'] = ...
        PAGES13: typing.ClassVar['IWork13PackageParser.IWork13DocumentType'] = ...
        UNKNOWN13: typing.ClassVar['IWork13PackageParser.IWork13DocumentType'] = ...
        @staticmethod
        def detect(zipFile: org.apache.commons.compress.archivers.zip.ZipFile) -> org.apache.tika.mime.MediaType: ...
        @staticmethod
        def detectIfPossible(zipEntry: java.util.zip.ZipEntry) -> org.apache.tika.mime.MediaType: ...
        def getType(self) -> org.apache.tika.mime.MediaType: ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'IWork13PackageParser.IWork13DocumentType': ...
        @staticmethod
        def values() -> typing.MutableSequence['IWork13PackageParser.IWork13DocumentType']: ...

class IWork18PackageParser(org.apache.tika.parser.Parser):
    def __init__(self): ...
    def getSupportedTypes(self, parseContext: org.apache.tika.parser.ParseContext) -> java.util.Set[org.apache.tika.mime.MediaType]: ...
    def parse(self, inputStream: java.io.InputStream, contentHandler: org.xml.sax.ContentHandler, metadata: org.apache.tika.metadata.Metadata, parseContext: org.apache.tika.parser.ParseContext) -> None: ...
    class IWork18DocumentType(java.lang.Enum['IWork18PackageParser.IWork18DocumentType']):
        KEYNOTE18: typing.ClassVar['IWork18PackageParser.IWork18DocumentType'] = ...
        NUMBERS18: typing.ClassVar['IWork18PackageParser.IWork18DocumentType'] = ...
        PAGES18: typing.ClassVar['IWork18PackageParser.IWork18DocumentType'] = ...
        @staticmethod
        def detect(zipFile: org.apache.commons.compress.archivers.zip.ZipFile) -> org.apache.tika.mime.MediaType: ...
        @staticmethod
        def detectIfPossible(zipEntry: java.util.zip.ZipEntry) -> org.apache.tika.mime.MediaType: ...
        def getType(self) -> org.apache.tika.mime.MediaType: ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'IWork18PackageParser.IWork18DocumentType': ...
        @staticmethod
        def values() -> typing.MutableSequence['IWork18PackageParser.IWork18DocumentType']: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.apache.tika.parser.iwork.iwana")``.

    IWork13PackageParser: typing.Type[IWork13PackageParser]
    IWork18PackageParser: typing.Type[IWork18PackageParser]
