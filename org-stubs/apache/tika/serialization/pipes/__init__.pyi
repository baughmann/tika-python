
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.io
import java.util
import org.apache.tika.pipes
import org.apache.tika.pipes.emitter
import typing



class JsonEmitData:
    def __init__(self): ...
    @staticmethod
    def toJson(emitData: org.apache.tika.pipes.emitter.EmitData, writer: java.io.Writer) -> None: ...

class JsonFetchEmitTuple:
    ID: typing.ClassVar[str] = ...
    FETCHER: typing.ClassVar[str] = ...
    FETCHKEY: typing.ClassVar[str] = ...
    FETCH_RANGE_START: typing.ClassVar[str] = ...
    FETCH_RANGE_END: typing.ClassVar[str] = ...
    EMITTER: typing.ClassVar[str] = ...
    EMITKEY: typing.ClassVar[str] = ...
    METADATAKEY: typing.ClassVar[str] = ...
    ON_PARSE_EXCEPTION: typing.ClassVar[str] = ...
    def __init__(self): ...
    @staticmethod
    def fromJson(reader: java.io.Reader) -> org.apache.tika.pipes.FetchEmitTuple: ...
    @typing.overload
    @staticmethod
    def toJson(fetchEmitTuple: org.apache.tika.pipes.FetchEmitTuple) -> str: ...
    @typing.overload
    @staticmethod
    def toJson(fetchEmitTuple: org.apache.tika.pipes.FetchEmitTuple, writer: java.io.Writer) -> None: ...

class JsonFetchEmitTupleList:
    def __init__(self): ...
    @staticmethod
    def fromJson(reader: java.io.Reader) -> java.util.List[org.apache.tika.pipes.FetchEmitTuple]: ...
    @typing.overload
    @staticmethod
    def toJson(list: java.util.List[org.apache.tika.pipes.FetchEmitTuple]) -> str: ...
    @typing.overload
    @staticmethod
    def toJson(list: java.util.List[org.apache.tika.pipes.FetchEmitTuple], writer: java.io.Writer) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.apache.tika.serialization.pipes")``.

    JsonEmitData: typing.Type[JsonEmitData]
    JsonFetchEmitTuple: typing.Type[JsonFetchEmitTuple]
    JsonFetchEmitTupleList: typing.Type[JsonFetchEmitTupleList]
