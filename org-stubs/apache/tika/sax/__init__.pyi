
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.io
import java.lang
import java.nio.charset
import java.util
import javax.xml.namespace
import jpype
import org.apache.tika.io
import org.apache.tika.metadata
import org.apache.tika.metadata.filter
import org.apache.tika.parser
import org.apache.tika.sax.boilerpipe
import org.apache.tika.sax.xpath
import org.xml.sax
import org.xml.sax.helpers
import typing



class AbstractRecursiveParserWrapperHandler(org.xml.sax.helpers.DefaultHandler, java.io.Serializable):
    EMBEDDED_RESOURCE_LIMIT_REACHED: typing.ClassVar[org.apache.tika.metadata.Property] = ...
    @typing.overload
    def __init__(self, contentHandlerFactory: 'ContentHandlerFactory'): ...
    @typing.overload
    def __init__(self, contentHandlerFactory: 'ContentHandlerFactory', int: int): ...
    @typing.overload
    def endDocument(self, contentHandler: org.xml.sax.ContentHandler, metadata: org.apache.tika.metadata.Metadata) -> None: ...
    @typing.overload
    def endDocument(self) -> None: ...
    def endEmbeddedDocument(self, contentHandler: org.xml.sax.ContentHandler, metadata: org.apache.tika.metadata.Metadata) -> None: ...
    def getContentHandlerFactory(self) -> 'ContentHandlerFactory': ...
    @typing.overload
    def getNewContentHandler(self) -> org.xml.sax.ContentHandler: ...
    @typing.overload
    def getNewContentHandler(self, outputStream: java.io.OutputStream, charset: java.nio.charset.Charset) -> org.xml.sax.ContentHandler: ...
    def hasHitMaximumEmbeddedResources(self) -> bool: ...
    def startEmbeddedDocument(self, contentHandler: org.xml.sax.ContentHandler, metadata: org.apache.tika.metadata.Metadata) -> None: ...

class CleanPhoneText:
    cleanSubstitutions: typing.ClassVar[typing.MutableSequence[typing.MutableSequence[typing.MutableSequence[str]]]] = ...
    def __init__(self): ...
    @staticmethod
    def clean(string: str) -> str: ...
    @staticmethod
    def extractPhoneNumbers(string: str) -> java.util.ArrayList[str]: ...

class ContentHandlerDecorator(org.xml.sax.helpers.DefaultHandler):
    def __init__(self, contentHandler: org.xml.sax.ContentHandler): ...
    def characters(self, charArray: typing.Union[typing.List[str], jpype.JArray], int: int, int2: int) -> None: ...
    def endDocument(self) -> None: ...
    def endElement(self, string: str, string2: str, string3: str) -> None: ...
    def endPrefixMapping(self, string: str) -> None: ...
    def error(self, sAXParseException: org.xml.sax.SAXParseException) -> None: ...
    def fatalError(self, sAXParseException: org.xml.sax.SAXParseException) -> None: ...
    def ignorableWhitespace(self, charArray: typing.Union[typing.List[str], jpype.JArray], int: int, int2: int) -> None: ...
    def processingInstruction(self, string: str, string2: str) -> None: ...
    def setDocumentLocator(self, locator: org.xml.sax.Locator) -> None: ...
    def skippedEntity(self, string: str) -> None: ...
    def startDocument(self) -> None: ...
    def startElement(self, string: str, string2: str, string3: str, attributes: org.xml.sax.Attributes) -> None: ...
    def startPrefixMapping(self, string: str, string2: str) -> None: ...
    def toString(self) -> str: ...
    def warning(self, sAXParseException: org.xml.sax.SAXParseException) -> None: ...

class ContentHandlerDecoratorFactory(java.io.Serializable):
    def decorate(self, contentHandler: org.xml.sax.ContentHandler, metadata: org.apache.tika.metadata.Metadata, parseContext: org.apache.tika.parser.ParseContext) -> org.xml.sax.ContentHandler: ...

class ContentHandlerFactory(java.io.Serializable):
    @typing.overload
    def getNewContentHandler(self) -> org.xml.sax.ContentHandler: ...
    @typing.overload
    def getNewContentHandler(self, outputStream: java.io.OutputStream, charset: java.nio.charset.Charset) -> org.xml.sax.ContentHandler: ...

class DIFContentHandler(org.xml.sax.helpers.DefaultHandler):
    def __init__(self, contentHandler: org.xml.sax.ContentHandler, metadata: org.apache.tika.metadata.Metadata): ...
    def characters(self, charArray: typing.Union[typing.List[str], jpype.JArray], int: int, int2: int) -> None: ...
    def endDocument(self) -> None: ...
    def endElement(self, string: str, string2: str, string3: str) -> None: ...
    def ignorableWhitespace(self, charArray: typing.Union[typing.List[str], jpype.JArray], int: int, int2: int) -> None: ...
    def setDocumentLocator(self, locator: org.xml.sax.Locator) -> None: ...
    def startDocument(self) -> None: ...
    def startElement(self, string: str, string2: str, string3: str, attributes: org.xml.sax.Attributes) -> None: ...
    def toString(self) -> str: ...

class Link:
    @typing.overload
    def __init__(self, string: str, string2: str, string3: str, string4: str): ...
    @typing.overload
    def __init__(self, string: str, string2: str, string3: str, string4: str, string5: str): ...
    def getRel(self) -> str: ...
    def getText(self) -> str: ...
    def getTitle(self) -> str: ...
    def getType(self) -> str: ...
    def getUri(self) -> str: ...
    def isAnchor(self) -> bool: ...
    def isIframe(self) -> bool: ...
    def isImage(self) -> bool: ...
    def isLink(self) -> bool: ...
    def isScript(self) -> bool: ...
    def toString(self) -> str: ...

class LinkContentHandler(org.xml.sax.helpers.DefaultHandler):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, boolean: bool): ...
    def characters(self, charArray: typing.Union[typing.List[str], jpype.JArray], int: int, int2: int) -> None: ...
    def endElement(self, string: str, string2: str, string3: str) -> None: ...
    def getLinks(self) -> java.util.List[Link]: ...
    def ignorableWhitespace(self, charArray: typing.Union[typing.List[str], jpype.JArray], int: int, int2: int) -> None: ...
    def startElement(self, string: str, string2: str, string3: str, attributes: org.xml.sax.Attributes) -> None: ...

class StandardOrganizations:
    def __init__(self): ...
    @staticmethod
    def getOrganizations() -> java.util.Map[str, str]: ...
    @staticmethod
    def getOrganzationsRegex() -> str: ...

class StandardReference:
    def getIdentifier(self) -> str: ...
    def getMainOrganizationAcronym(self) -> str: ...
    def getScore(self) -> float: ...
    def getSecondOrganizationAcronym(self) -> str: ...
    def getSeparator(self) -> str: ...
    def setIdentifier(self, string: str) -> None: ...
    def setMainOrganizationAcronym(self, string: str) -> None: ...
    def setScore(self, double: float) -> None: ...
    def setSecondOrganizationAcronym(self, string: str) -> None: ...
    def setSeparator(self, string: str) -> None: ...
    def toString(self) -> str: ...
    class StandardReferenceBuilder:
        def __init__(self, string: str, string2: str): ...
        def build(self) -> 'StandardReference': ...
        def setScore(self, double: float) -> 'StandardReference.StandardReferenceBuilder': ...
        def setSecondOrganization(self, string: str, string2: str) -> 'StandardReference.StandardReferenceBuilder': ...

class StandardsText:
    def __init__(self): ...
    @staticmethod
    def extractStandardReferences(string: str, double: float) -> java.util.ArrayList[StandardReference]: ...

class StoppingEarlyException(org.xml.sax.SAXException):
    INSTANCE: typing.ClassVar['StoppingEarlyException'] = ...
    def __init__(self): ...

class TaggedSAXException(org.xml.sax.SAXException):
    def __init__(self, sAXException: org.xml.sax.SAXException, object: typing.Any): ...
    def getCause(self) -> org.xml.sax.SAXException: ...
    def getTag(self) -> typing.Any: ...

class TeeContentHandler(org.xml.sax.helpers.DefaultHandler):
    def __init__(self, *contentHandler: org.xml.sax.ContentHandler): ...
    def characters(self, charArray: typing.Union[typing.List[str], jpype.JArray], int: int, int2: int) -> None: ...
    def endDocument(self) -> None: ...
    def endElement(self, string: str, string2: str, string3: str) -> None: ...
    def endPrefixMapping(self, string: str) -> None: ...
    def ignorableWhitespace(self, charArray: typing.Union[typing.List[str], jpype.JArray], int: int, int2: int) -> None: ...
    def processingInstruction(self, string: str, string2: str) -> None: ...
    def setDocumentLocator(self, locator: org.xml.sax.Locator) -> None: ...
    def skippedEntity(self, string: str) -> None: ...
    def startDocument(self) -> None: ...
    def startElement(self, string: str, string2: str, string3: str, attributes: org.xml.sax.Attributes) -> None: ...
    def startPrefixMapping(self, string: str, string2: str) -> None: ...

class TextContentHandler(org.xml.sax.helpers.DefaultHandler):
    @typing.overload
    def __init__(self, contentHandler: org.xml.sax.ContentHandler): ...
    @typing.overload
    def __init__(self, contentHandler: org.xml.sax.ContentHandler, boolean: bool): ...
    def characters(self, charArray: typing.Union[typing.List[str], jpype.JArray], int: int, int2: int) -> None: ...
    def endDocument(self) -> None: ...
    def ignorableWhitespace(self, charArray: typing.Union[typing.List[str], jpype.JArray], int: int, int2: int) -> None: ...
    def setDocumentLocator(self, locator: org.xml.sax.Locator) -> None: ...
    def startDocument(self) -> None: ...
    def startElement(self, string: str, string2: str, string3: str, attributes: org.xml.sax.Attributes) -> None: ...
    def toString(self) -> str: ...

class ToTextContentHandler(org.xml.sax.helpers.DefaultHandler):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, outputStream: java.io.OutputStream, string: str): ...
    @typing.overload
    def __init__(self, writer: java.io.Writer): ...
    def characters(self, charArray: typing.Union[typing.List[str], jpype.JArray], int: int, int2: int) -> None: ...
    def endDocument(self) -> None: ...
    def endElement(self, string: str, string2: str, string3: str) -> None: ...
    def ignorableWhitespace(self, charArray: typing.Union[typing.List[str], jpype.JArray], int: int, int2: int) -> None: ...
    def startElement(self, string: str, string2: str, string3: str, attributes: org.xml.sax.Attributes) -> None: ...
    def toString(self) -> str: ...

class WriteLimiter:
    def getWriteLimit(self) -> int: ...
    def isThrowOnWriteLimitReached(self) -> bool: ...

class BasicContentHandlerFactory(ContentHandlerFactory, WriteLimiter):
    @typing.overload
    def __init__(self, hANDLER_TYPE: 'BasicContentHandlerFactory.HANDLER_TYPE', int: int): ...
    @typing.overload
    def __init__(self, hANDLER_TYPE: 'BasicContentHandlerFactory.HANDLER_TYPE', int: int, boolean: bool, parseContext: org.apache.tika.parser.ParseContext): ...
    @typing.overload
    def getNewContentHandler(self) -> org.xml.sax.ContentHandler: ...
    @typing.overload
    def getNewContentHandler(self, outputStream: java.io.OutputStream, charset: java.nio.charset.Charset) -> org.xml.sax.ContentHandler: ...
    def getType(self) -> 'BasicContentHandlerFactory.HANDLER_TYPE': ...
    def getWriteLimit(self) -> int: ...
    def isThrowOnWriteLimitReached(self) -> bool: ...
    @staticmethod
    def parseHandlerType(string: str, hANDLER_TYPE: 'BasicContentHandlerFactory.HANDLER_TYPE') -> 'BasicContentHandlerFactory.HANDLER_TYPE': ...
    class HANDLER_TYPE(java.lang.Enum['BasicContentHandlerFactory.HANDLER_TYPE']):
        BODY: typing.ClassVar['BasicContentHandlerFactory.HANDLER_TYPE'] = ...
        IGNORE: typing.ClassVar['BasicContentHandlerFactory.HANDLER_TYPE'] = ...
        TEXT: typing.ClassVar['BasicContentHandlerFactory.HANDLER_TYPE'] = ...
        HTML: typing.ClassVar['BasicContentHandlerFactory.HANDLER_TYPE'] = ...
        XML: typing.ClassVar['BasicContentHandlerFactory.HANDLER_TYPE'] = ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @typing.overload
        @staticmethod
        def valueOf(class_: typing.Type[_valueOf_0__T], string: str) -> _valueOf_0__T: ...
        @typing.overload
        @staticmethod
        def valueOf(string: str) -> 'BasicContentHandlerFactory.HANDLER_TYPE': ...
        @staticmethod
        def values() -> typing.MutableSequence['BasicContentHandlerFactory.HANDLER_TYPE']: ...

class BodyContentHandler(ContentHandlerDecorator):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, int: int): ...
    @typing.overload
    def __init__(self, writer: java.io.Writer): ...
    @typing.overload
    def __init__(self, contentHandler: org.xml.sax.ContentHandler): ...

class ElementMappingContentHandler(ContentHandlerDecorator):
    def __init__(self, contentHandler: org.xml.sax.ContentHandler, map: typing.Union[java.util.Map[javax.xml.namespace.QName, 'ElementMappingContentHandler.TargetElement'], typing.Mapping[javax.xml.namespace.QName, 'ElementMappingContentHandler.TargetElement']]): ...
    def endElement(self, string: str, string2: str, string3: str) -> None: ...
    def startElement(self, string: str, string2: str, string3: str, attributes: org.xml.sax.Attributes) -> None: ...
    class TargetElement:
        @typing.overload
        def __init__(self, string: str, string2: str): ...
        @typing.overload
        def __init__(self, string: str, string2: str, map: typing.Union[java.util.Map[javax.xml.namespace.QName, javax.xml.namespace.QName], typing.Mapping[javax.xml.namespace.QName, javax.xml.namespace.QName]]): ...
        @typing.overload
        def __init__(self, qName: javax.xml.namespace.QName): ...
        @typing.overload
        def __init__(self, qName: javax.xml.namespace.QName, map: typing.Union[java.util.Map[javax.xml.namespace.QName, javax.xml.namespace.QName], typing.Mapping[javax.xml.namespace.QName, javax.xml.namespace.QName]]): ...
        def getAttributesMapping(self) -> java.util.Map[javax.xml.namespace.QName, javax.xml.namespace.QName]: ...
        def getMappedTagName(self) -> javax.xml.namespace.QName: ...
        def mapAttributes(self, attributes: org.xml.sax.Attributes) -> org.xml.sax.Attributes: ...

class EmbeddedContentHandler(ContentHandlerDecorator):
    def __init__(self, contentHandler: org.xml.sax.ContentHandler): ...
    def endDocument(self) -> None: ...
    def startDocument(self) -> None: ...

class EndDocumentShieldingContentHandler(ContentHandlerDecorator):
    def __init__(self, contentHandler: org.xml.sax.ContentHandler): ...
    def endDocument(self) -> None: ...
    def isEndDocumentWasCalled(self) -> bool: ...
    def reallyEndDocument(self) -> None: ...

class ExpandedTitleContentHandler(ContentHandlerDecorator):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, contentHandler: org.xml.sax.ContentHandler): ...
    def characters(self, charArray: typing.Union[typing.List[str], jpype.JArray], int: int, int2: int) -> None: ...
    def endElement(self, string: str, string2: str, string3: str) -> None: ...
    def startDocument(self) -> None: ...
    def startElement(self, string: str, string2: str, string3: str, attributes: org.xml.sax.Attributes) -> None: ...

class OfflineContentHandler(ContentHandlerDecorator):
    def __init__(self, contentHandler: org.xml.sax.ContentHandler): ...
    def resolveEntity(self, string: str, string2: str) -> org.xml.sax.InputSource: ...

class PhoneExtractingContentHandler(ContentHandlerDecorator):
    def __init__(self, contentHandler: org.xml.sax.ContentHandler, metadata: org.apache.tika.metadata.Metadata): ...
    def characters(self, charArray: typing.Union[typing.List[str], jpype.JArray], int: int, int2: int) -> None: ...
    def endDocument(self) -> None: ...

class RecursiveParserWrapperHandler(AbstractRecursiveParserWrapperHandler):
    @typing.overload
    def __init__(self, contentHandlerFactory: ContentHandlerFactory): ...
    @typing.overload
    def __init__(self, contentHandlerFactory: ContentHandlerFactory, int: int): ...
    @typing.overload
    def __init__(self, contentHandlerFactory: ContentHandlerFactory, int: int, metadataFilter: org.apache.tika.metadata.filter.MetadataFilter): ...
    @typing.overload
    def endDocument(self, contentHandler: org.xml.sax.ContentHandler, metadata: org.apache.tika.metadata.Metadata) -> None: ...
    @typing.overload
    def endDocument(self) -> None: ...
    def endEmbeddedDocument(self, contentHandler: org.xml.sax.ContentHandler, metadata: org.apache.tika.metadata.Metadata) -> None: ...
    def getMetadataList(self) -> java.util.List[org.apache.tika.metadata.Metadata]: ...
    def startEmbeddedDocument(self, contentHandler: org.xml.sax.ContentHandler, metadata: org.apache.tika.metadata.Metadata) -> None: ...

class SafeContentHandler(ContentHandlerDecorator):
    def __init__(self, contentHandler: org.xml.sax.ContentHandler): ...
    def characters(self, charArray: typing.Union[typing.List[str], jpype.JArray], int: int, int2: int) -> None: ...
    def endDocument(self) -> None: ...
    def endElement(self, string: str, string2: str, string3: str) -> None: ...
    def ignorableWhitespace(self, charArray: typing.Union[typing.List[str], jpype.JArray], int: int, int2: int) -> None: ...
    def startElement(self, string: str, string2: str, string3: str, attributes: org.xml.sax.Attributes) -> None: ...

class SecureContentHandler(ContentHandlerDecorator):
    def __init__(self, contentHandler: org.xml.sax.ContentHandler, tikaInputStream: org.apache.tika.io.TikaInputStream): ...
    def characters(self, charArray: typing.Union[typing.List[str], jpype.JArray], int: int, int2: int) -> None: ...
    def endElement(self, string: str, string2: str, string3: str) -> None: ...
    def getMaximumCompressionRatio(self) -> int: ...
    def getMaximumDepth(self) -> int: ...
    def getMaximumPackageEntryDepth(self) -> int: ...
    def getOutputThreshold(self) -> int: ...
    def ignorableWhitespace(self, charArray: typing.Union[typing.List[str], jpype.JArray], int: int, int2: int) -> None: ...
    def setMaximumCompressionRatio(self, long: int) -> None: ...
    def setMaximumDepth(self, int: int) -> None: ...
    def setMaximumPackageEntryDepth(self, int: int) -> None: ...
    def setOutputThreshold(self, long: int) -> None: ...
    def startElement(self, string: str, string2: str, string3: str, attributes: org.xml.sax.Attributes) -> None: ...
    def throwIfCauseOf(self, sAXException: org.xml.sax.SAXException) -> None: ...

class StandardsExtractingContentHandler(ContentHandlerDecorator):
    STANDARD_REFERENCES: typing.ClassVar[str] = ...
    def __init__(self, contentHandler: org.xml.sax.ContentHandler, metadata: org.apache.tika.metadata.Metadata): ...
    def characters(self, charArray: typing.Union[typing.List[str], jpype.JArray], int: int, int2: int) -> None: ...
    def endDocument(self) -> None: ...
    def getThreshold(self) -> float: ...
    def setMaxBufferLength(self, int: int) -> None: ...
    def setThreshold(self, double: float) -> None: ...

class TaggedContentHandler(ContentHandlerDecorator):
    def __init__(self, contentHandler: org.xml.sax.ContentHandler): ...
    def isCauseOf(self, sAXException: org.xml.sax.SAXException) -> bool: ...
    def throwIfCauseOf(self, exception: java.lang.Exception) -> None: ...

class TextAndAttributeContentHandler(TextContentHandler):
    @typing.overload
    def __init__(self, contentHandler: org.xml.sax.ContentHandler): ...
    @typing.overload
    def __init__(self, contentHandler: org.xml.sax.ContentHandler, boolean: bool): ...
    def startElement(self, string: str, string2: str, string3: str, attributes: org.xml.sax.Attributes) -> None: ...

class ToXMLContentHandler(ToTextContentHandler):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, outputStream: java.io.OutputStream, string: str): ...
    @typing.overload
    def __init__(self, string: str): ...
    def characters(self, charArray: typing.Union[typing.List[str], jpype.JArray], int: int, int2: int) -> None: ...
    def endElement(self, string: str, string2: str, string3: str) -> None: ...
    def startDocument(self) -> None: ...
    def startElement(self, string: str, string2: str, string3: str, attributes: org.xml.sax.Attributes) -> None: ...
    def startPrefixMapping(self, string: str, string2: str) -> None: ...

class WriteOutContentHandler(ContentHandlerDecorator):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, int: int): ...
    @typing.overload
    def __init__(self, writer: java.io.Writer): ...
    @typing.overload
    def __init__(self, writer: java.io.Writer, int: int): ...
    @typing.overload
    def __init__(self, contentHandler: org.xml.sax.ContentHandler, int: int): ...
    @typing.overload
    def __init__(self, contentHandler: org.xml.sax.ContentHandler, int: int, boolean: bool, parseContext: org.apache.tika.parser.ParseContext): ...
    def characters(self, charArray: typing.Union[typing.List[str], jpype.JArray], int: int, int2: int) -> None: ...
    def ignorableWhitespace(self, charArray: typing.Union[typing.List[str], jpype.JArray], int: int, int2: int) -> None: ...

class RichTextContentHandler(WriteOutContentHandler):
    def __init__(self, writer: java.io.Writer): ...
    def startElement(self, string: str, string2: str, string3: str, attributes: org.xml.sax.Attributes) -> None: ...

class ToHTMLContentHandler(ToXMLContentHandler):
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, outputStream: java.io.OutputStream, string: str): ...
    def endElement(self, string: str, string2: str, string3: str) -> None: ...
    def startDocument(self) -> None: ...

class XHTMLContentHandler(SafeContentHandler):
    XHTML: typing.ClassVar[str] = ...
    ENDLINE: typing.ClassVar[java.util.Set] = ...
    def __init__(self, contentHandler: org.xml.sax.ContentHandler, metadata: org.apache.tika.metadata.Metadata): ...
    @typing.overload
    def characters(self, charArray: typing.Union[typing.List[str], jpype.JArray], int: int, int2: int) -> None: ...
    @typing.overload
    def characters(self, string: str) -> None: ...
    def element(self, string: str, string2: str) -> None: ...
    def endDocument(self) -> None: ...
    @typing.overload
    def endElement(self, string: str) -> None: ...
    @typing.overload
    def endElement(self, string: str, string2: str, string3: str) -> None: ...
    def newline(self) -> None: ...
    def startDocument(self) -> None: ...
    @typing.overload
    def startElement(self, string: str) -> None: ...
    @typing.overload
    def startElement(self, string: str, string2: str, string3: str) -> None: ...
    @typing.overload
    def startElement(self, string: str, string2: str, string3: str, attributes: org.xml.sax.Attributes) -> None: ...
    @typing.overload
    def startElement(self, string: str, attributesImpl: org.xml.sax.helpers.AttributesImpl) -> None: ...

class XMPContentHandler(SafeContentHandler):
    RDF: typing.ClassVar[str] = ...
    XMP: typing.ClassVar[str] = ...
    def __init__(self, contentHandler: org.xml.sax.ContentHandler): ...
    def endDescription(self) -> None: ...
    def endDocument(self) -> None: ...
    def metadata(self, metadata: org.apache.tika.metadata.Metadata) -> None: ...
    def property(self, string: str, string2: str) -> None: ...
    def startDescription(self, string: str, string2: str, string3: str) -> None: ...
    def startDocument(self) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.apache.tika.sax")``.

    AbstractRecursiveParserWrapperHandler: typing.Type[AbstractRecursiveParserWrapperHandler]
    BasicContentHandlerFactory: typing.Type[BasicContentHandlerFactory]
    BodyContentHandler: typing.Type[BodyContentHandler]
    CleanPhoneText: typing.Type[CleanPhoneText]
    ContentHandlerDecorator: typing.Type[ContentHandlerDecorator]
    ContentHandlerDecoratorFactory: typing.Type[ContentHandlerDecoratorFactory]
    ContentHandlerFactory: typing.Type[ContentHandlerFactory]
    DIFContentHandler: typing.Type[DIFContentHandler]
    ElementMappingContentHandler: typing.Type[ElementMappingContentHandler]
    EmbeddedContentHandler: typing.Type[EmbeddedContentHandler]
    EndDocumentShieldingContentHandler: typing.Type[EndDocumentShieldingContentHandler]
    ExpandedTitleContentHandler: typing.Type[ExpandedTitleContentHandler]
    Link: typing.Type[Link]
    LinkContentHandler: typing.Type[LinkContentHandler]
    OfflineContentHandler: typing.Type[OfflineContentHandler]
    PhoneExtractingContentHandler: typing.Type[PhoneExtractingContentHandler]
    RecursiveParserWrapperHandler: typing.Type[RecursiveParserWrapperHandler]
    RichTextContentHandler: typing.Type[RichTextContentHandler]
    SafeContentHandler: typing.Type[SafeContentHandler]
    SecureContentHandler: typing.Type[SecureContentHandler]
    StandardOrganizations: typing.Type[StandardOrganizations]
    StandardReference: typing.Type[StandardReference]
    StandardsExtractingContentHandler: typing.Type[StandardsExtractingContentHandler]
    StandardsText: typing.Type[StandardsText]
    StoppingEarlyException: typing.Type[StoppingEarlyException]
    TaggedContentHandler: typing.Type[TaggedContentHandler]
    TaggedSAXException: typing.Type[TaggedSAXException]
    TeeContentHandler: typing.Type[TeeContentHandler]
    TextAndAttributeContentHandler: typing.Type[TextAndAttributeContentHandler]
    TextContentHandler: typing.Type[TextContentHandler]
    ToHTMLContentHandler: typing.Type[ToHTMLContentHandler]
    ToTextContentHandler: typing.Type[ToTextContentHandler]
    ToXMLContentHandler: typing.Type[ToXMLContentHandler]
    WriteLimiter: typing.Type[WriteLimiter]
    WriteOutContentHandler: typing.Type[WriteOutContentHandler]
    XHTMLContentHandler: typing.Type[XHTMLContentHandler]
    XMPContentHandler: typing.Type[XMPContentHandler]
    boilerpipe: org.apache.tika.sax.boilerpipe.__module_protocol__
    xpath: org.apache.tika.sax.xpath.__module_protocol__
