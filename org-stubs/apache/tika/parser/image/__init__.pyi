
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.io
import java.util
import jpype
import jpype.protocol
import org.apache.tika.metadata
import org.apache.tika.mime
import org.apache.tika.parser
import org.xml.sax
import typing



class AbstractImageParser(org.apache.tika.parser.Parser):
    OCR_MEDIATYPE_PREFIX: typing.ClassVar[str] = ...
    def __init__(self): ...
    def parse(self, inputStream: java.io.InputStream, contentHandler: org.xml.sax.ContentHandler, metadata: org.apache.tika.metadata.Metadata, parseContext: org.apache.tika.parser.ParseContext) -> None: ...

class ICNSParser(org.apache.tika.parser.Parser):
    ICNS_MIME_TYPE: typing.ClassVar[str] = ...
    def __init__(self): ...
    def getSupportedTypes(self, parseContext: org.apache.tika.parser.ParseContext) -> java.util.Set[org.apache.tika.mime.MediaType]: ...
    def parse(self, inputStream: java.io.InputStream, contentHandler: org.xml.sax.ContentHandler, metadata: org.apache.tika.metadata.Metadata, parseContext: org.apache.tika.parser.ParseContext) -> None: ...

class ImageMetadataExtractor:
    @typing.overload
    def __init__(self, metadata: org.apache.tika.metadata.Metadata): ...
    @typing.overload
    def __init__(self, metadata: org.apache.tika.metadata.Metadata, *directoryHandler: 'ImageMetadataExtractor.DirectoryHandler'): ...
    def parseHeif(self, inputStream: java.io.InputStream) -> None: ...
    def parseJpeg(self, file: typing.Union[java.io.File, jpype.protocol.SupportsPath]) -> None: ...
    @typing.overload
    def parseRawExif(self, byteArray: typing.Union[typing.List[int], jpype.JArray, bytes]) -> None: ...
    @typing.overload
    def parseRawExif(self, inputStream: java.io.InputStream, int: int, boolean: bool) -> None: ...
    def parseRawXMP(self, byteArray: typing.Union[typing.List[int], jpype.JArray, bytes]) -> None: ...
    def parseTiff(self, file: typing.Union[java.io.File, jpype.protocol.SupportsPath]) -> None: ...
    def parseWebP(self, file: typing.Union[java.io.File, jpype.protocol.SupportsPath]) -> None: ...
    class DirectoryHandler: ...

class JXLParser(org.apache.tika.parser.Parser):
    def __init__(self): ...
    def getSupportedTypes(self, parseContext: org.apache.tika.parser.ParseContext) -> java.util.Set[org.apache.tika.mime.MediaType]: ...
    def parse(self, inputStream: java.io.InputStream, contentHandler: org.xml.sax.ContentHandler, metadata: org.apache.tika.metadata.Metadata, parseContext: org.apache.tika.parser.ParseContext) -> None: ...

class MetadataFields:
    def __init__(self): ...
    @typing.overload
    @staticmethod
    def isMetadataField(string: str) -> bool: ...
    @typing.overload
    @staticmethod
    def isMetadataField(property: org.apache.tika.metadata.Property) -> bool: ...

class PSDParser(org.apache.tika.parser.Parser):
    def __init__(self): ...
    def getMaxDataLengthBytes(self) -> int: ...
    def getSupportedTypes(self, parseContext: org.apache.tika.parser.ParseContext) -> java.util.Set[org.apache.tika.mime.MediaType]: ...
    def parse(self, inputStream: java.io.InputStream, contentHandler: org.xml.sax.ContentHandler, metadata: org.apache.tika.metadata.Metadata, parseContext: org.apache.tika.parser.ParseContext) -> None: ...
    def setMaxDataLengthBytes(self, int: int) -> None: ...

class WebPParser(org.apache.tika.parser.Parser):
    def __init__(self): ...
    def getSupportedTypes(self, parseContext: org.apache.tika.parser.ParseContext) -> java.util.Set[org.apache.tika.mime.MediaType]: ...
    def parse(self, inputStream: java.io.InputStream, contentHandler: org.xml.sax.ContentHandler, metadata: org.apache.tika.metadata.Metadata, parseContext: org.apache.tika.parser.ParseContext) -> None: ...

class BPGParser(AbstractImageParser):
    def __init__(self): ...
    def getMaxRecordLength(self) -> int: ...
    def getSupportedTypes(self, parseContext: org.apache.tika.parser.ParseContext) -> java.util.Set[org.apache.tika.mime.MediaType]: ...
    def setMaxRecordLength(self, int: int) -> None: ...

class HeifParser(AbstractImageParser):
    def __init__(self): ...
    def getSupportedTypes(self, parseContext: org.apache.tika.parser.ParseContext) -> java.util.Set[org.apache.tika.mime.MediaType]: ...

class ImageParser(AbstractImageParser):
    def __init__(self): ...
    def getSupportedTypes(self, parseContext: org.apache.tika.parser.ParseContext) -> java.util.Set[org.apache.tika.mime.MediaType]: ...

class JpegParser(AbstractImageParser):
    def __init__(self): ...
    def getSupportedTypes(self, parseContext: org.apache.tika.parser.ParseContext) -> java.util.Set[org.apache.tika.mime.MediaType]: ...

class TiffParser(AbstractImageParser):
    def __init__(self): ...
    def getSupportedTypes(self, parseContext: org.apache.tika.parser.ParseContext) -> java.util.Set[org.apache.tika.mime.MediaType]: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.apache.tika.parser.image")``.

    AbstractImageParser: typing.Type[AbstractImageParser]
    BPGParser: typing.Type[BPGParser]
    HeifParser: typing.Type[HeifParser]
    ICNSParser: typing.Type[ICNSParser]
    ImageMetadataExtractor: typing.Type[ImageMetadataExtractor]
    ImageParser: typing.Type[ImageParser]
    JXLParser: typing.Type[JXLParser]
    JpegParser: typing.Type[JpegParser]
    MetadataFields: typing.Type[MetadataFields]
    PSDParser: typing.Type[PSDParser]
    TiffParser: typing.Type[TiffParser]
    WebPParser: typing.Type[WebPParser]
