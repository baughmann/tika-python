
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import com.adobe.internal.xmp
import java.util
import org.apache.tika.metadata
import typing



class ITikaToXMPConverter:
    def process(self, metadata: org.apache.tika.metadata.Metadata) -> com.adobe.internal.xmp.XMPMeta: ...

class Namespace:
    uri: str = ...
    prefix: str = ...
    def __init__(self, string: str, string2: str): ...

class TikaToXMP:
    def __init__(self): ...
    @typing.overload
    @staticmethod
    def convert(metadata: org.apache.tika.metadata.Metadata) -> com.adobe.internal.xmp.XMPMeta: ...
    @typing.overload
    @staticmethod
    def convert(metadata: org.apache.tika.metadata.Metadata, string: str) -> com.adobe.internal.xmp.XMPMeta: ...
    @staticmethod
    def getConverter(string: str) -> ITikaToXMPConverter: ...
    @staticmethod
    def isConverterAvailable(string: str) -> bool: ...

class AbstractConverter(ITikaToXMPConverter):
    def __init__(self): ...
    def getXMPMeta(self) -> com.adobe.internal.xmp.XMPMeta: ...
    def process(self, metadata: org.apache.tika.metadata.Metadata) -> com.adobe.internal.xmp.XMPMeta: ...
    def setMetadata(self, metadata: org.apache.tika.metadata.Metadata) -> None: ...

class GenericConverter(AbstractConverter):
    def __init__(self): ...
    def getAdditionalNamespaces(self) -> java.util.Set[Namespace]: ...
    def process(self, metadata: org.apache.tika.metadata.Metadata) -> com.adobe.internal.xmp.XMPMeta: ...

class MSOfficeBinaryConverter(AbstractConverter):
    def __init__(self): ...
    def process(self, metadata: org.apache.tika.metadata.Metadata) -> com.adobe.internal.xmp.XMPMeta: ...

class MSOfficeXMLConverter(AbstractConverter):
    def __init__(self): ...
    def process(self, metadata: org.apache.tika.metadata.Metadata) -> com.adobe.internal.xmp.XMPMeta: ...

class OpenDocumentConverter(AbstractConverter):
    def __init__(self): ...
    def process(self, metadata: org.apache.tika.metadata.Metadata) -> com.adobe.internal.xmp.XMPMeta: ...

class RTFConverter(AbstractConverter):
    def __init__(self): ...
    def process(self, metadata: org.apache.tika.metadata.Metadata) -> com.adobe.internal.xmp.XMPMeta: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("org.apache.tika.xmp.convert")``.

    AbstractConverter: typing.Type[AbstractConverter]
    GenericConverter: typing.Type[GenericConverter]
    ITikaToXMPConverter: typing.Type[ITikaToXMPConverter]
    MSOfficeBinaryConverter: typing.Type[MSOfficeBinaryConverter]
    MSOfficeXMLConverter: typing.Type[MSOfficeXMLConverter]
    Namespace: typing.Type[Namespace]
    OpenDocumentConverter: typing.Type[OpenDocumentConverter]
    RTFConverter: typing.Type[RTFConverter]
    TikaToXMP: typing.Type[TikaToXMP]
